// This file was automatically generated based on
// data generated by the original Java game
#![ignore = "unused"]
use crate::helpers::{NamespacedKey, Registry};
use num_derive::FromPrimitive;
use num_traits::FromPrimitive;
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, FromPrimitive)]
#[allow(non_camel_case_types)]
/// Key: `minecraft:sound_event`
pub enum SoundEvent {
  Ambient_Cave = 0,
  Ambient_Underwater_Enter = 1,
  Ambient_Underwater_Exit = 2,
  Ambient_Underwater_Loop = 3,
  Ambient_Underwater_Loop_Additions = 4,
  Ambient_Underwater_Loop_Additions_Rare = 5,
  Ambient_Underwater_Loop_Additions_UltraRare = 6,
  Block_Anvil_Break = 7,
  Block_Anvil_Destroy = 8,
  Block_Anvil_Fall = 9,
  Block_Anvil_Hit = 10,
  Block_Anvil_Land = 11,
  Block_Anvil_Place = 12,
  Block_Anvil_Step = 13,
  Block_Anvil_Use = 14,
  Item_Armor_EquipChain = 15,
  Item_Armor_EquipDiamond = 16,
  Item_Armor_EquipElytra = 17,
  Item_Armor_EquipGeneric = 18,
  Item_Armor_EquipGold = 19,
  Item_Armor_EquipIron = 20,
  Item_Armor_EquipLeather = 21,
  Item_Armor_EquipTurtle = 22,
  Entity_ArmorStand_Break = 23,
  Entity_ArmorStand_Fall = 24,
  Entity_ArmorStand_Hit = 25,
  Entity_ArmorStand_Place = 26,
  Entity_Arrow_Hit = 27,
  Entity_Arrow_HitPlayer = 28,
  Entity_Arrow_Shoot = 29,
  Item_Axe_Strip = 30,
  Block_Bamboo_Break = 31,
  Block_Bamboo_Fall = 32,
  Block_Bamboo_Hit = 33,
  Block_Bamboo_Place = 34,
  Block_Bamboo_Step = 35,
  Block_BambooSapling_Break = 36,
  Block_BambooSapling_Hit = 37,
  Block_BambooSapling_Place = 38,
  Block_Barrel_Close = 39,
  Block_Barrel_Open = 40,
  Entity_Bat_Ambient = 41,
  Entity_Bat_Death = 42,
  Entity_Bat_Hurt = 43,
  Entity_Bat_Loop = 44,
  Entity_Bat_Takeoff = 45,
  Block_Beacon_Activate = 46,
  Block_Beacon_Ambient = 47,
  Block_Beacon_Deactivate = 48,
  Block_Beacon_PowerSelect = 49,
  Entity_Bee_Death = 50,
  Entity_Bee_Hurt = 51,
  Entity_Bee_LoopAggressive = 52,
  Entity_Bee_Loop = 53,
  Entity_Bee_Sting = 54,
  Entity_Bee_Pollinate = 55,
  Block_Beehive_Drip = 56,
  Block_Beehive_Enter = 57,
  Block_Beehive_Exit = 58,
  Block_Beehive_Shear = 59,
  Block_Beehive_Work = 60,
  Block_Bell_Use = 61,
  Block_Bell_Resonate = 62,
  Entity_Blaze_Ambient = 63,
  Entity_Blaze_Burn = 64,
  Entity_Blaze_Death = 65,
  Entity_Blaze_Hurt = 66,
  Entity_Blaze_Shoot = 67,
  Entity_Boat_PaddleLand = 68,
  Entity_Boat_PaddleWater = 69,
  Item_Book_PageTurn = 70,
  Item_Book_Put = 71,
  Entity_FishingBobber_Retrieve = 72,
  Entity_FishingBobber_Splash = 73,
  Entity_FishingBobber_Throw = 74,
  Block_Blastfurnace_FireCrackle = 75,
  Item_Bottle_Empty = 76,
  Item_Bottle_Fill = 77,
  Item_Bottle_FillDragonbreath = 78,
  Block_BrewingStand_Brew = 79,
  Block_BubbleColumn_BubblePop = 80,
  Block_BubbleColumn_UpwardsAmbient = 81,
  Block_BubbleColumn_UpwardsInside = 82,
  Block_BubbleColumn_WhirlpoolAmbient = 83,
  Block_BubbleColumn_WhirlpoolInside = 84,
  Item_Bucket_Empty = 85,
  Item_Bucket_EmptyFish = 86,
  Item_Bucket_EmptyLava = 87,
  Item_Bucket_Fill = 88,
  Item_Bucket_FillFish = 89,
  Item_Bucket_FillLava = 90,
  Block_Campfire_Crackle = 91,
  Entity_Cat_Ambient = 92,
  Entity_Cat_StrayAmbient = 93,
  Entity_Cat_Death = 94,
  Entity_Cat_Eat = 95,
  Entity_Cat_Hiss = 96,
  Entity_Cat_BegForFood = 97,
  Entity_Cat_Hurt = 98,
  Entity_Cat_Purr = 99,
  Entity_Cat_Purreow = 100,
  Block_Chest_Close = 101,
  Block_Chest_Locked = 102,
  Block_Chest_Open = 103,
  Entity_Chicken_Ambient = 104,
  Entity_Chicken_Death = 105,
  Entity_Chicken_Egg = 106,
  Entity_Chicken_Hurt = 107,
  Entity_Chicken_Step = 108,
  Block_ChorusFlower_Death = 109,
  Block_ChorusFlower_Grow = 110,
  Item_ChorusFruit_Teleport = 111,
  Block_Wool_Break = 112,
  Block_Wool_Fall = 113,
  Block_Wool_Hit = 114,
  Block_Wool_Place = 115,
  Block_Wool_Step = 116,
  Entity_Cod_Ambient = 117,
  Entity_Cod_Death = 118,
  Entity_Cod_Flop = 119,
  Entity_Cod_Hurt = 120,
  Block_Comparator_Click = 121,
  Block_Composter_Empty = 122,
  Block_Composter_Fill = 123,
  Block_Composter_FillSuccess = 124,
  Block_Composter_Ready = 125,
  Block_Conduit_Activate = 126,
  Block_Conduit_Ambient = 127,
  Block_Conduit_Ambient_Short = 128,
  Block_Conduit_Attack_Target = 129,
  Block_Conduit_Deactivate = 130,
  Entity_Cow_Ambient = 131,
  Entity_Cow_Death = 132,
  Entity_Cow_Hurt = 133,
  Entity_Cow_Milk = 134,
  Entity_Cow_Step = 135,
  Entity_Creeper_Death = 136,
  Entity_Creeper_Hurt = 137,
  Entity_Creeper_Primed = 138,
  Block_Crop_Break = 139,
  Item_Crop_Plant = 140,
  Item_Crossbow_Hit = 141,
  Item_Crossbow_LoadingEnd = 142,
  Item_Crossbow_LoadingMiddle = 143,
  Item_Crossbow_LoadingStart = 144,
  Item_Crossbow_QuickCharge1 = 145,
  Item_Crossbow_QuickCharge2 = 146,
  Item_Crossbow_QuickCharge3 = 147,
  Item_Crossbow_Shoot = 148,
  Block_Dispenser_Dispense = 149,
  Block_Dispenser_Fail = 150,
  Block_Dispenser_Launch = 151,
  Entity_Dolphin_Ambient = 152,
  Entity_Dolphin_AmbientWater = 153,
  Entity_Dolphin_Attack = 154,
  Entity_Dolphin_Death = 155,
  Entity_Dolphin_Eat = 156,
  Entity_Dolphin_Hurt = 157,
  Entity_Dolphin_Jump = 158,
  Entity_Dolphin_Play = 159,
  Entity_Dolphin_Splash = 160,
  Entity_Dolphin_Swim = 161,
  Entity_Donkey_Ambient = 162,
  Entity_Donkey_Angry = 163,
  Entity_Donkey_Chest = 164,
  Entity_Donkey_Death = 165,
  Entity_Donkey_Hurt = 166,
  Entity_Drowned_Ambient = 167,
  Entity_Drowned_AmbientWater = 168,
  Entity_Drowned_Death = 169,
  Entity_Drowned_DeathWater = 170,
  Entity_Drowned_Hurt = 171,
  Entity_Drowned_HurtWater = 172,
  Entity_Drowned_Shoot = 173,
  Entity_Drowned_Step = 174,
  Entity_Drowned_Swim = 175,
  Entity_Egg_Throw = 176,
  Entity_ElderGuardian_Ambient = 177,
  Entity_ElderGuardian_AmbientLand = 178,
  Entity_ElderGuardian_Curse = 179,
  Entity_ElderGuardian_Death = 180,
  Entity_ElderGuardian_DeathLand = 181,
  Entity_ElderGuardian_Flop = 182,
  Entity_ElderGuardian_Hurt = 183,
  Entity_ElderGuardian_HurtLand = 184,
  Item_Elytra_Flying = 185,
  Block_EnchantmentTable_Use = 186,
  Block_EnderChest_Close = 187,
  Block_EnderChest_Open = 188,
  Entity_EnderDragon_Ambient = 189,
  Entity_EnderDragon_Death = 190,
  Entity_DragonFireball_Explode = 191,
  Entity_EnderDragon_Flap = 192,
  Entity_EnderDragon_Growl = 193,
  Entity_EnderDragon_Hurt = 194,
  Entity_EnderDragon_Shoot = 195,
  Entity_EnderEye_Death = 196,
  Entity_EnderEye_Launch = 197,
  Entity_Enderman_Ambient = 198,
  Entity_Enderman_Death = 199,
  Entity_Enderman_Hurt = 200,
  Entity_Enderman_Scream = 201,
  Entity_Enderman_Stare = 202,
  Entity_Enderman_Teleport = 203,
  Entity_Endermite_Ambient = 204,
  Entity_Endermite_Death = 205,
  Entity_Endermite_Hurt = 206,
  Entity_Endermite_Step = 207,
  Entity_EnderPearl_Throw = 208,
  Block_EndGateway_Spawn = 209,
  Block_EndPortalFrame_Fill = 210,
  Block_EndPortal_Spawn = 211,
  Entity_Evoker_Ambient = 212,
  Entity_Evoker_CastSpell = 213,
  Entity_Evoker_Celebrate = 214,
  Entity_Evoker_Death = 215,
  Entity_EvokerFangs_Attack = 216,
  Entity_Evoker_Hurt = 217,
  Entity_Evoker_PrepareAttack = 218,
  Entity_Evoker_PrepareSummon = 219,
  Entity_Evoker_PrepareWololo = 220,
  Entity_ExperienceBottle_Throw = 221,
  Entity_ExperienceOrb_Pickup = 222,
  Block_FenceGate_Close = 223,
  Block_FenceGate_Open = 224,
  Item_Firecharge_Use = 225,
  Entity_FireworkRocket_Blast = 226,
  Entity_FireworkRocket_BlastFar = 227,
  Entity_FireworkRocket_LargeBlast = 228,
  Entity_FireworkRocket_LargeBlastFar = 229,
  Entity_FireworkRocket_Launch = 230,
  Entity_FireworkRocket_Shoot = 231,
  Entity_FireworkRocket_Twinkle = 232,
  Entity_FireworkRocket_TwinkleFar = 233,
  Block_Fire_Ambient = 234,
  Block_Fire_Extinguish = 235,
  Entity_Fish_Swim = 236,
  Item_Flintandsteel_Use = 237,
  Entity_Fox_Aggro = 238,
  Entity_Fox_Ambient = 239,
  Entity_Fox_Bite = 240,
  Entity_Fox_Death = 241,
  Entity_Fox_Eat = 242,
  Entity_Fox_Hurt = 243,
  Entity_Fox_Screech = 244,
  Entity_Fox_Sleep = 245,
  Entity_Fox_Sniff = 246,
  Entity_Fox_Spit = 247,
  Block_Furnace_FireCrackle = 248,
  Entity_Generic_BigFall = 249,
  Entity_Generic_Burn = 250,
  Entity_Generic_Death = 251,
  Entity_Generic_Drink = 252,
  Entity_Generic_Eat = 253,
  Entity_Generic_Explode = 254,
  Entity_Generic_ExtinguishFire = 255,
  Entity_Generic_Hurt = 256,
  Entity_Generic_SmallFall = 257,
  Entity_Generic_Splash = 258,
  Entity_Generic_Swim = 259,
  Entity_Ghast_Ambient = 260,
  Entity_Ghast_Death = 261,
  Entity_Ghast_Hurt = 262,
  Entity_Ghast_Scream = 263,
  Entity_Ghast_Shoot = 264,
  Entity_Ghast_Warn = 265,
  Block_Glass_Break = 266,
  Block_Glass_Fall = 267,
  Block_Glass_Hit = 268,
  Block_Glass_Place = 269,
  Block_Glass_Step = 270,
  Block_Grass_Break = 271,
  Block_Grass_Fall = 272,
  Block_Grass_Hit = 273,
  Block_Grass_Place = 274,
  Block_Grass_Step = 275,
  Block_WetGrass_Break = 276,
  Block_WetGrass_Fall = 277,
  Block_WetGrass_Hit = 278,
  Block_WetGrass_Place = 279,
  Block_WetGrass_Step = 280,
  Block_CoralBlock_Break = 281,
  Block_CoralBlock_Fall = 282,
  Block_CoralBlock_Hit = 283,
  Block_CoralBlock_Place = 284,
  Block_CoralBlock_Step = 285,
  Block_Gravel_Break = 286,
  Block_Gravel_Fall = 287,
  Block_Gravel_Hit = 288,
  Block_Gravel_Place = 289,
  Block_Gravel_Step = 290,
  Block_Grindstone_Use = 291,
  Entity_Guardian_Ambient = 292,
  Entity_Guardian_AmbientLand = 293,
  Entity_Guardian_Attack = 294,
  Entity_Guardian_Death = 295,
  Entity_Guardian_DeathLand = 296,
  Entity_Guardian_Flop = 297,
  Entity_Guardian_Hurt = 298,
  Entity_Guardian_HurtLand = 299,
  Item_Hoe_Till = 300,
  Block_HoneyBlock_Break = 301,
  Block_HoneyBlock_Fall = 302,
  Block_HoneyBlock_Hit = 303,
  Block_HoneyBlock_Place = 304,
  Block_HoneyBlock_Slide = 305,
  Block_HoneyBlock_Step = 306,
  Item_HoneyBottle_Drink = 307,
  Entity_Horse_Ambient = 308,
  Entity_Horse_Angry = 309,
  Entity_Horse_Armor = 310,
  Entity_Horse_Breathe = 311,
  Entity_Horse_Death = 312,
  Entity_Horse_Eat = 313,
  Entity_Horse_Gallop = 314,
  Entity_Horse_Hurt = 315,
  Entity_Horse_Jump = 316,
  Entity_Horse_Land = 317,
  Entity_Horse_Saddle = 318,
  Entity_Horse_Step = 319,
  Entity_Horse_StepWood = 320,
  Entity_Hostile_BigFall = 321,
  Entity_Hostile_Death = 322,
  Entity_Hostile_Hurt = 323,
  Entity_Hostile_SmallFall = 324,
  Entity_Hostile_Splash = 325,
  Entity_Hostile_Swim = 326,
  Entity_Husk_Ambient = 327,
  Entity_Husk_ConvertedToZombie = 328,
  Entity_Husk_Death = 329,
  Entity_Husk_Hurt = 330,
  Entity_Husk_Step = 331,
  Entity_Ravager_Ambient = 332,
  Entity_Ravager_Attack = 333,
  Entity_Ravager_Celebrate = 334,
  Entity_Ravager_Death = 335,
  Entity_Ravager_Hurt = 336,
  Entity_Ravager_Step = 337,
  Entity_Ravager_Stunned = 338,
  Entity_Ravager_Roar = 339,
  Entity_Illusioner_Ambient = 340,
  Entity_Illusioner_CastSpell = 341,
  Entity_Illusioner_Death = 342,
  Entity_Illusioner_Hurt = 343,
  Entity_Illusioner_MirrorMove = 344,
  Entity_Illusioner_PrepareBlindness = 345,
  Entity_Illusioner_PrepareMirror = 346,
  Block_IronDoor_Close = 347,
  Block_IronDoor_Open = 348,
  Entity_IronGolem_Attack = 349,
  Entity_IronGolem_Damage = 350,
  Entity_IronGolem_Death = 351,
  Entity_IronGolem_Hurt = 352,
  Entity_IronGolem_Repair = 353,
  Entity_IronGolem_Step = 354,
  Block_IronTrapdoor_Close = 355,
  Block_IronTrapdoor_Open = 356,
  Entity_ItemFrame_AddItem = 357,
  Entity_ItemFrame_Break = 358,
  Entity_ItemFrame_Place = 359,
  Entity_ItemFrame_RemoveItem = 360,
  Entity_ItemFrame_RotateItem = 361,
  Entity_Item_Break = 362,
  Entity_Item_Pickup = 363,
  Block_Ladder_Break = 364,
  Block_Ladder_Fall = 365,
  Block_Ladder_Hit = 366,
  Block_Ladder_Place = 367,
  Block_Ladder_Step = 368,
  Block_Lantern_Break = 369,
  Block_Lantern_Fall = 370,
  Block_Lantern_Hit = 371,
  Block_Lantern_Place = 372,
  Block_Lantern_Step = 373,
  Block_Lava_Ambient = 374,
  Block_Lava_Extinguish = 375,
  Block_Lava_Pop = 376,
  Entity_LeashKnot_Break = 377,
  Entity_LeashKnot_Place = 378,
  Block_Lever_Click = 379,
  Entity_LightningBolt_Impact = 380,
  Entity_LightningBolt_Thunder = 381,
  Entity_LingeringPotion_Throw = 382,
  Entity_Llama_Ambient = 383,
  Entity_Llama_Angry = 384,
  Entity_Llama_Chest = 385,
  Entity_Llama_Death = 386,
  Entity_Llama_Eat = 387,
  Entity_Llama_Hurt = 388,
  Entity_Llama_Spit = 389,
  Entity_Llama_Step = 390,
  Entity_Llama_Swag = 391,
  Entity_MagmaCube_Death = 392,
  Entity_MagmaCube_Hurt = 393,
  Entity_MagmaCube_Jump = 394,
  Entity_MagmaCube_Squish = 395,
  Block_Metal_Break = 396,
  Block_Metal_Fall = 397,
  Block_Metal_Hit = 398,
  Block_Metal_Place = 399,
  Block_MetalPressurePlate_ClickOff = 400,
  Block_MetalPressurePlate_ClickOn = 401,
  Block_Metal_Step = 402,
  Entity_Minecart_Inside = 403,
  Entity_Minecart_Riding = 404,
  Entity_Mooshroom_Convert = 405,
  Entity_Mooshroom_Eat = 406,
  Entity_Mooshroom_Milk = 407,
  Entity_Mooshroom_SuspiciousMilk = 408,
  Entity_Mooshroom_Shear = 409,
  Entity_Mule_Ambient = 410,
  Entity_Mule_Chest = 411,
  Entity_Mule_Death = 412,
  Entity_Mule_Hurt = 413,
  Music_Creative = 414,
  Music_Credits = 415,
  Music_Dragon = 416,
  Music_End = 417,
  Music_Game = 418,
  Music_Menu = 419,
  Music_Nether = 420,
  Music_UnderWater = 421,
  Block_NetherWart_Break = 422,
  Item_NetherWart_Plant = 423,
  Block_NoteBlock_Basedrum = 424,
  Block_NoteBlock_Bass = 425,
  Block_NoteBlock_Bell = 426,
  Block_NoteBlock_Chime = 427,
  Block_NoteBlock_Flute = 428,
  Block_NoteBlock_Guitar = 429,
  Block_NoteBlock_Harp = 430,
  Block_NoteBlock_Hat = 431,
  Block_NoteBlock_Pling = 432,
  Block_NoteBlock_Snare = 433,
  Block_NoteBlock_Xylophone = 434,
  Block_NoteBlock_IronXylophone = 435,
  Block_NoteBlock_CowBell = 436,
  Block_NoteBlock_Didgeridoo = 437,
  Block_NoteBlock_Bit = 438,
  Block_NoteBlock_Banjo = 439,
  Entity_Ocelot_Hurt = 440,
  Entity_Ocelot_Ambient = 441,
  Entity_Ocelot_Death = 442,
  Entity_Painting_Break = 443,
  Entity_Painting_Place = 444,
  Entity_Panda_PreSneeze = 445,
  Entity_Panda_Sneeze = 446,
  Entity_Panda_Ambient = 447,
  Entity_Panda_Death = 448,
  Entity_Panda_Eat = 449,
  Entity_Panda_Step = 450,
  Entity_Panda_CantBreed = 451,
  Entity_Panda_AggressiveAmbient = 452,
  Entity_Panda_WorriedAmbient = 453,
  Entity_Panda_Hurt = 454,
  Entity_Panda_Bite = 455,
  Entity_Parrot_Ambient = 456,
  Entity_Parrot_Death = 457,
  Entity_Parrot_Eat = 458,
  Entity_Parrot_Fly = 459,
  Entity_Parrot_Hurt = 460,
  Entity_Parrot_Imitate_Blaze = 461,
  Entity_Parrot_Imitate_Creeper = 462,
  Entity_Parrot_Imitate_Drowned = 463,
  Entity_Parrot_Imitate_ElderGuardian = 464,
  Entity_Parrot_Imitate_EnderDragon = 465,
  Entity_Parrot_Imitate_Endermite = 466,
  Entity_Parrot_Imitate_Evoker = 467,
  Entity_Parrot_Imitate_Ghast = 468,
  Entity_Parrot_Imitate_Guardian = 469,
  Entity_Parrot_Imitate_Husk = 470,
  Entity_Parrot_Imitate_Illusioner = 471,
  Entity_Parrot_Imitate_MagmaCube = 472,
  Entity_Parrot_Imitate_Phantom = 473,
  Entity_Parrot_Imitate_Pillager = 474,
  Entity_Parrot_Imitate_Ravager = 475,
  Entity_Parrot_Imitate_Shulker = 476,
  Entity_Parrot_Imitate_Silverfish = 477,
  Entity_Parrot_Imitate_Skeleton = 478,
  Entity_Parrot_Imitate_Slime = 479,
  Entity_Parrot_Imitate_Spider = 480,
  Entity_Parrot_Imitate_Stray = 481,
  Entity_Parrot_Imitate_Vex = 482,
  Entity_Parrot_Imitate_Vindicator = 483,
  Entity_Parrot_Imitate_Witch = 484,
  Entity_Parrot_Imitate_Wither = 485,
  Entity_Parrot_Imitate_WitherSkeleton = 486,
  Entity_Parrot_Imitate_Zombie = 487,
  Entity_Parrot_Imitate_ZombieVillager = 488,
  Entity_Parrot_Step = 489,
  Entity_Phantom_Ambient = 490,
  Entity_Phantom_Bite = 491,
  Entity_Phantom_Death = 492,
  Entity_Phantom_Flap = 493,
  Entity_Phantom_Hurt = 494,
  Entity_Phantom_Swoop = 495,
  Entity_Pig_Ambient = 496,
  Entity_Pig_Death = 497,
  Entity_Pig_Hurt = 498,
  Entity_Pig_Saddle = 499,
  Entity_Pig_Step = 500,
  Entity_Pillager_Ambient = 501,
  Entity_Pillager_Celebrate = 502,
  Entity_Pillager_Death = 503,
  Entity_Pillager_Hurt = 504,
  Block_Piston_Contract = 505,
  Block_Piston_Extend = 506,
  Entity_Player_Attack_Crit = 507,
  Entity_Player_Attack_Knockback = 508,
  Entity_Player_Attack_Nodamage = 509,
  Entity_Player_Attack_Strong = 510,
  Entity_Player_Attack_Sweep = 511,
  Entity_Player_Attack_Weak = 512,
  Entity_Player_BigFall = 513,
  Entity_Player_Breath = 514,
  Entity_Player_Burp = 515,
  Entity_Player_Death = 516,
  Entity_Player_Hurt = 517,
  Entity_Player_HurtDrown = 518,
  Entity_Player_HurtOnFire = 519,
  Entity_Player_HurtSweetBerryBush = 520,
  Entity_Player_Levelup = 521,
  Entity_Player_SmallFall = 522,
  Entity_Player_Splash = 523,
  Entity_Player_Splash_HighSpeed = 524,
  Entity_Player_Swim = 525,
  Entity_PolarBear_Ambient = 526,
  Entity_PolarBear_AmbientBaby = 527,
  Entity_PolarBear_Death = 528,
  Entity_PolarBear_Hurt = 529,
  Entity_PolarBear_Step = 530,
  Entity_PolarBear_Warning = 531,
  Block_Portal_Ambient = 532,
  Block_Portal_Travel = 533,
  Block_Portal_Trigger = 534,
  Entity_PufferFish_Ambient = 535,
  Entity_PufferFish_BlowOut = 536,
  Entity_PufferFish_BlowUp = 537,
  Entity_PufferFish_Death = 538,
  Entity_PufferFish_Flop = 539,
  Entity_PufferFish_Hurt = 540,
  Entity_PufferFish_Sting = 541,
  Block_Pumpkin_Carve = 542,
  Entity_Rabbit_Ambient = 543,
  Entity_Rabbit_Attack = 544,
  Entity_Rabbit_Death = 545,
  Entity_Rabbit_Hurt = 546,
  Entity_Rabbit_Jump = 547,
  Event_Raid_Horn = 548,
  MusicDisc_11 = 549,
  MusicDisc_13 = 550,
  MusicDisc_Blocks = 551,
  MusicDisc_Cat = 552,
  MusicDisc_Chirp = 553,
  MusicDisc_Far = 554,
  MusicDisc_Mall = 555,
  MusicDisc_Mellohi = 556,
  MusicDisc_Stal = 557,
  MusicDisc_Strad = 558,
  MusicDisc_Wait = 559,
  MusicDisc_Ward = 560,
  Block_RedstoneTorch_Burnout = 561,
  Entity_Salmon_Ambient = 562,
  Entity_Salmon_Death = 563,
  Entity_Salmon_Flop = 564,
  Entity_Salmon_Hurt = 565,
  Block_Sand_Break = 566,
  Block_Sand_Fall = 567,
  Block_Sand_Hit = 568,
  Block_Sand_Place = 569,
  Block_Sand_Step = 570,
  Block_Scaffolding_Break = 571,
  Block_Scaffolding_Fall = 572,
  Block_Scaffolding_Hit = 573,
  Block_Scaffolding_Place = 574,
  Block_Scaffolding_Step = 575,
  Entity_Sheep_Ambient = 576,
  Entity_Sheep_Death = 577,
  Entity_Sheep_Hurt = 578,
  Entity_Sheep_Shear = 579,
  Entity_Sheep_Step = 580,
  Item_Shield_Block = 581,
  Item_Shield_Break = 582,
  Item_Shovel_Flatten = 583,
  Entity_Shulker_Ambient = 584,
  Block_ShulkerBox_Close = 585,
  Block_ShulkerBox_Open = 586,
  Entity_ShulkerBullet_Hit = 587,
  Entity_ShulkerBullet_Hurt = 588,
  Entity_Shulker_Close = 589,
  Entity_Shulker_Death = 590,
  Entity_Shulker_Hurt = 591,
  Entity_Shulker_HurtClosed = 592,
  Entity_Shulker_Open = 593,
  Entity_Shulker_Shoot = 594,
  Entity_Shulker_Teleport = 595,
  Entity_Silverfish_Ambient = 596,
  Entity_Silverfish_Death = 597,
  Entity_Silverfish_Hurt = 598,
  Entity_Silverfish_Step = 599,
  Entity_Skeleton_Ambient = 600,
  Entity_Skeleton_Death = 601,
  Entity_SkeletonHorse_Ambient = 602,
  Entity_SkeletonHorse_Death = 603,
  Entity_SkeletonHorse_Hurt = 604,
  Entity_SkeletonHorse_Swim = 605,
  Entity_SkeletonHorse_AmbientWater = 606,
  Entity_SkeletonHorse_GallopWater = 607,
  Entity_SkeletonHorse_JumpWater = 608,
  Entity_SkeletonHorse_StepWater = 609,
  Entity_Skeleton_Hurt = 610,
  Entity_Skeleton_Shoot = 611,
  Entity_Skeleton_Step = 612,
  Entity_Slime_Attack = 613,
  Entity_Slime_Death = 614,
  Entity_Slime_Hurt = 615,
  Entity_Slime_Jump = 616,
  Entity_Slime_Squish = 617,
  Block_SlimeBlock_Break = 618,
  Block_SlimeBlock_Fall = 619,
  Block_SlimeBlock_Hit = 620,
  Block_SlimeBlock_Place = 621,
  Block_SlimeBlock_Step = 622,
  Entity_MagmaCube_DeathSmall = 623,
  Entity_MagmaCube_HurtSmall = 624,
  Entity_MagmaCube_SquishSmall = 625,
  Entity_Slime_DeathSmall = 626,
  Entity_Slime_HurtSmall = 627,
  Entity_Slime_JumpSmall = 628,
  Entity_Slime_SquishSmall = 629,
  Block_Smoker_Smoke = 630,
  Entity_Snowball_Throw = 631,
  Block_Snow_Break = 632,
  Block_Snow_Fall = 633,
  Entity_SnowGolem_Ambient = 634,
  Entity_SnowGolem_Death = 635,
  Entity_SnowGolem_Hurt = 636,
  Entity_SnowGolem_Shoot = 637,
  Block_Snow_Hit = 638,
  Block_Snow_Place = 639,
  Block_Snow_Step = 640,
  Entity_Spider_Ambient = 641,
  Entity_Spider_Death = 642,
  Entity_Spider_Hurt = 643,
  Entity_Spider_Step = 644,
  Entity_SplashPotion_Break = 645,
  Entity_SplashPotion_Throw = 646,
  Entity_Squid_Ambient = 647,
  Entity_Squid_Death = 648,
  Entity_Squid_Hurt = 649,
  Entity_Squid_Squirt = 650,
  Block_Stone_Break = 651,
  Block_StoneButton_ClickOff = 652,
  Block_StoneButton_ClickOn = 653,
  Block_Stone_Fall = 654,
  Block_Stone_Hit = 655,
  Block_Stone_Place = 656,
  Block_StonePressurePlate_ClickOff = 657,
  Block_StonePressurePlate_ClickOn = 658,
  Block_Stone_Step = 659,
  Entity_Stray_Ambient = 660,
  Entity_Stray_Death = 661,
  Entity_Stray_Hurt = 662,
  Entity_Stray_Step = 663,
  Block_SweetBerryBush_Break = 664,
  Block_SweetBerryBush_Place = 665,
  Item_SweetBerries_PickFromBush = 666,
  Enchant_Thorns_Hit = 667,
  Entity_Tnt_Primed = 668,
  Item_Totem_Use = 669,
  Item_Trident_Hit = 670,
  Item_Trident_HitGround = 671,
  Item_Trident_Return = 672,
  Item_Trident_Riptide1 = 673,
  Item_Trident_Riptide2 = 674,
  Item_Trident_Riptide3 = 675,
  Item_Trident_Throw = 676,
  Item_Trident_Thunder = 677,
  Block_Tripwire_Attach = 678,
  Block_Tripwire_ClickOff = 679,
  Block_Tripwire_ClickOn = 680,
  Block_Tripwire_Detach = 681,
  Entity_TropicalFish_Ambient = 682,
  Entity_TropicalFish_Death = 683,
  Entity_TropicalFish_Flop = 684,
  Entity_TropicalFish_Hurt = 685,
  Entity_Turtle_AmbientLand = 686,
  Entity_Turtle_Death = 687,
  Entity_Turtle_DeathBaby = 688,
  Entity_Turtle_EggBreak = 689,
  Entity_Turtle_EggCrack = 690,
  Entity_Turtle_EggHatch = 691,
  Entity_Turtle_Hurt = 692,
  Entity_Turtle_HurtBaby = 693,
  Entity_Turtle_LayEgg = 694,
  Entity_Turtle_Shamble = 695,
  Entity_Turtle_ShambleBaby = 696,
  Entity_Turtle_Swim = 697,
  Ui_Button_Click = 698,
  Ui_Loom_SelectPattern = 699,
  Ui_Loom_TakeResult = 700,
  Ui_CartographyTable_TakeResult = 701,
  Ui_Stonecutter_TakeResult = 702,
  Ui_Stonecutter_SelectRecipe = 703,
  Ui_Toast_ChallengeComplete = 704,
  Ui_Toast_In = 705,
  Ui_Toast_Out = 706,
  Entity_Vex_Ambient = 707,
  Entity_Vex_Charge = 708,
  Entity_Vex_Death = 709,
  Entity_Vex_Hurt = 710,
  Entity_Villager_Ambient = 711,
  Entity_Villager_Celebrate = 712,
  Entity_Villager_Death = 713,
  Entity_Villager_Hurt = 714,
  Entity_Villager_No = 715,
  Entity_Villager_Trade = 716,
  Entity_Villager_Yes = 717,
  Entity_Villager_WorkArmorer = 718,
  Entity_Villager_WorkButcher = 719,
  Entity_Villager_WorkCartographer = 720,
  Entity_Villager_WorkCleric = 721,
  Entity_Villager_WorkFarmer = 722,
  Entity_Villager_WorkFisherman = 723,
  Entity_Villager_WorkFletcher = 724,
  Entity_Villager_WorkLeatherworker = 725,
  Entity_Villager_WorkLibrarian = 726,
  Entity_Villager_WorkMason = 727,
  Entity_Villager_WorkShepherd = 728,
  Entity_Villager_WorkToolsmith = 729,
  Entity_Villager_WorkWeaponsmith = 730,
  Entity_Vindicator_Ambient = 731,
  Entity_Vindicator_Celebrate = 732,
  Entity_Vindicator_Death = 733,
  Entity_Vindicator_Hurt = 734,
  Block_LilyPad_Place = 735,
  Entity_WanderingTrader_Ambient = 736,
  Entity_WanderingTrader_Death = 737,
  Entity_WanderingTrader_Disappeared = 738,
  Entity_WanderingTrader_DrinkMilk = 739,
  Entity_WanderingTrader_DrinkPotion = 740,
  Entity_WanderingTrader_Hurt = 741,
  Entity_WanderingTrader_No = 742,
  Entity_WanderingTrader_Reappeared = 743,
  Entity_WanderingTrader_Trade = 744,
  Entity_WanderingTrader_Yes = 745,
  Block_Water_Ambient = 746,
  Weather_Rain = 747,
  Weather_Rain_Above = 748,
  Entity_Witch_Ambient = 749,
  Entity_Witch_Celebrate = 750,
  Entity_Witch_Death = 751,
  Entity_Witch_Drink = 752,
  Entity_Witch_Hurt = 753,
  Entity_Witch_Throw = 754,
  Entity_Wither_Ambient = 755,
  Entity_Wither_BreakBlock = 756,
  Entity_Wither_Death = 757,
  Entity_Wither_Hurt = 758,
  Entity_Wither_Shoot = 759,
  Entity_WitherSkeleton_Ambient = 760,
  Entity_WitherSkeleton_Death = 761,
  Entity_WitherSkeleton_Hurt = 762,
  Entity_WitherSkeleton_Step = 763,
  Entity_Wither_Spawn = 764,
  Entity_Wolf_Ambient = 765,
  Entity_Wolf_Death = 766,
  Entity_Wolf_Growl = 767,
  Entity_Wolf_Howl = 768,
  Entity_Wolf_Hurt = 769,
  Entity_Wolf_Pant = 770,
  Entity_Wolf_Shake = 771,
  Entity_Wolf_Step = 772,
  Entity_Wolf_Whine = 773,
  Block_WoodenDoor_Close = 774,
  Block_WoodenDoor_Open = 775,
  Block_WoodenTrapdoor_Close = 776,
  Block_WoodenTrapdoor_Open = 777,
  Block_Wood_Break = 778,
  Block_WoodenButton_ClickOff = 779,
  Block_WoodenButton_ClickOn = 780,
  Block_Wood_Fall = 781,
  Block_Wood_Hit = 782,
  Block_Wood_Place = 783,
  Block_WoodenPressurePlate_ClickOff = 784,
  Block_WoodenPressurePlate_ClickOn = 785,
  Block_Wood_Step = 786,
  Entity_Zombie_Ambient = 787,
  Entity_Zombie_AttackWoodenDoor = 788,
  Entity_Zombie_AttackIronDoor = 789,
  Entity_Zombie_BreakWoodenDoor = 790,
  Entity_Zombie_ConvertedToDrowned = 791,
  Entity_Zombie_Death = 792,
  Entity_Zombie_DestroyEgg = 793,
  Entity_ZombieHorse_Ambient = 794,
  Entity_ZombieHorse_Death = 795,
  Entity_ZombieHorse_Hurt = 796,
  Entity_Zombie_Hurt = 797,
  Entity_Zombie_Infect = 798,
  Entity_ZombiePigman_Ambient = 799,
  Entity_ZombiePigman_Angry = 800,
  Entity_ZombiePigman_Death = 801,
  Entity_ZombiePigman_Hurt = 802,
  Entity_Zombie_Step = 803,
  Entity_ZombieVillager_Ambient = 804,
  Entity_ZombieVillager_Converted = 805,
  Entity_ZombieVillager_Cure = 806,
  Entity_ZombieVillager_Death = 807,
  Entity_ZombieVillager_Hurt = 808,
  Entity_ZombieVillager_Step = 809,
}
impl SoundEvent {
  pub const ID: usize = 0;
}
impl Registry for SoundEvent {
  fn get_registry_key(&self) -> NamespacedKey {
    NamespacedKey::new(crate::helpers::MINECRAFT_NAMESPACE, match self {
      Self::Ambient_Cave => "ambient.cave",
      Self::Ambient_Underwater_Enter => "ambient.underwater.enter",
      Self::Ambient_Underwater_Exit => "ambient.underwater.exit",
      Self::Ambient_Underwater_Loop => "ambient.underwater.loop",
      Self::Ambient_Underwater_Loop_Additions => "ambient.underwater.loop.additions",
      Self::Ambient_Underwater_Loop_Additions_Rare => "ambient.underwater.loop.additions.rare",
      Self::Ambient_Underwater_Loop_Additions_UltraRare => "ambient.underwater.loop.additions.ultra_rare",
      Self::Block_Anvil_Break => "block.anvil.break",
      Self::Block_Anvil_Destroy => "block.anvil.destroy",
      Self::Block_Anvil_Fall => "block.anvil.fall",
      Self::Block_Anvil_Hit => "block.anvil.hit",
      Self::Block_Anvil_Land => "block.anvil.land",
      Self::Block_Anvil_Place => "block.anvil.place",
      Self::Block_Anvil_Step => "block.anvil.step",
      Self::Block_Anvil_Use => "block.anvil.use",
      Self::Item_Armor_EquipChain => "item.armor.equip_chain",
      Self::Item_Armor_EquipDiamond => "item.armor.equip_diamond",
      Self::Item_Armor_EquipElytra => "item.armor.equip_elytra",
      Self::Item_Armor_EquipGeneric => "item.armor.equip_generic",
      Self::Item_Armor_EquipGold => "item.armor.equip_gold",
      Self::Item_Armor_EquipIron => "item.armor.equip_iron",
      Self::Item_Armor_EquipLeather => "item.armor.equip_leather",
      Self::Item_Armor_EquipTurtle => "item.armor.equip_turtle",
      Self::Entity_ArmorStand_Break => "entity.armor_stand.break",
      Self::Entity_ArmorStand_Fall => "entity.armor_stand.fall",
      Self::Entity_ArmorStand_Hit => "entity.armor_stand.hit",
      Self::Entity_ArmorStand_Place => "entity.armor_stand.place",
      Self::Entity_Arrow_Hit => "entity.arrow.hit",
      Self::Entity_Arrow_HitPlayer => "entity.arrow.hit_player",
      Self::Entity_Arrow_Shoot => "entity.arrow.shoot",
      Self::Item_Axe_Strip => "item.axe.strip",
      Self::Block_Bamboo_Break => "block.bamboo.break",
      Self::Block_Bamboo_Fall => "block.bamboo.fall",
      Self::Block_Bamboo_Hit => "block.bamboo.hit",
      Self::Block_Bamboo_Place => "block.bamboo.place",
      Self::Block_Bamboo_Step => "block.bamboo.step",
      Self::Block_BambooSapling_Break => "block.bamboo_sapling.break",
      Self::Block_BambooSapling_Hit => "block.bamboo_sapling.hit",
      Self::Block_BambooSapling_Place => "block.bamboo_sapling.place",
      Self::Block_Barrel_Close => "block.barrel.close",
      Self::Block_Barrel_Open => "block.barrel.open",
      Self::Entity_Bat_Ambient => "entity.bat.ambient",
      Self::Entity_Bat_Death => "entity.bat.death",
      Self::Entity_Bat_Hurt => "entity.bat.hurt",
      Self::Entity_Bat_Loop => "entity.bat.loop",
      Self::Entity_Bat_Takeoff => "entity.bat.takeoff",
      Self::Block_Beacon_Activate => "block.beacon.activate",
      Self::Block_Beacon_Ambient => "block.beacon.ambient",
      Self::Block_Beacon_Deactivate => "block.beacon.deactivate",
      Self::Block_Beacon_PowerSelect => "block.beacon.power_select",
      Self::Entity_Bee_Death => "entity.bee.death",
      Self::Entity_Bee_Hurt => "entity.bee.hurt",
      Self::Entity_Bee_LoopAggressive => "entity.bee.loop_aggressive",
      Self::Entity_Bee_Loop => "entity.bee.loop",
      Self::Entity_Bee_Sting => "entity.bee.sting",
      Self::Entity_Bee_Pollinate => "entity.bee.pollinate",
      Self::Block_Beehive_Drip => "block.beehive.drip",
      Self::Block_Beehive_Enter => "block.beehive.enter",
      Self::Block_Beehive_Exit => "block.beehive.exit",
      Self::Block_Beehive_Shear => "block.beehive.shear",
      Self::Block_Beehive_Work => "block.beehive.work",
      Self::Block_Bell_Use => "block.bell.use",
      Self::Block_Bell_Resonate => "block.bell.resonate",
      Self::Entity_Blaze_Ambient => "entity.blaze.ambient",
      Self::Entity_Blaze_Burn => "entity.blaze.burn",
      Self::Entity_Blaze_Death => "entity.blaze.death",
      Self::Entity_Blaze_Hurt => "entity.blaze.hurt",
      Self::Entity_Blaze_Shoot => "entity.blaze.shoot",
      Self::Entity_Boat_PaddleLand => "entity.boat.paddle_land",
      Self::Entity_Boat_PaddleWater => "entity.boat.paddle_water",
      Self::Item_Book_PageTurn => "item.book.page_turn",
      Self::Item_Book_Put => "item.book.put",
      Self::Entity_FishingBobber_Retrieve => "entity.fishing_bobber.retrieve",
      Self::Entity_FishingBobber_Splash => "entity.fishing_bobber.splash",
      Self::Entity_FishingBobber_Throw => "entity.fishing_bobber.throw",
      Self::Block_Blastfurnace_FireCrackle => "block.blastfurnace.fire_crackle",
      Self::Item_Bottle_Empty => "item.bottle.empty",
      Self::Item_Bottle_Fill => "item.bottle.fill",
      Self::Item_Bottle_FillDragonbreath => "item.bottle.fill_dragonbreath",
      Self::Block_BrewingStand_Brew => "block.brewing_stand.brew",
      Self::Block_BubbleColumn_BubblePop => "block.bubble_column.bubble_pop",
      Self::Block_BubbleColumn_UpwardsAmbient => "block.bubble_column.upwards_ambient",
      Self::Block_BubbleColumn_UpwardsInside => "block.bubble_column.upwards_inside",
      Self::Block_BubbleColumn_WhirlpoolAmbient => "block.bubble_column.whirlpool_ambient",
      Self::Block_BubbleColumn_WhirlpoolInside => "block.bubble_column.whirlpool_inside",
      Self::Item_Bucket_Empty => "item.bucket.empty",
      Self::Item_Bucket_EmptyFish => "item.bucket.empty_fish",
      Self::Item_Bucket_EmptyLava => "item.bucket.empty_lava",
      Self::Item_Bucket_Fill => "item.bucket.fill",
      Self::Item_Bucket_FillFish => "item.bucket.fill_fish",
      Self::Item_Bucket_FillLava => "item.bucket.fill_lava",
      Self::Block_Campfire_Crackle => "block.campfire.crackle",
      Self::Entity_Cat_Ambient => "entity.cat.ambient",
      Self::Entity_Cat_StrayAmbient => "entity.cat.stray_ambient",
      Self::Entity_Cat_Death => "entity.cat.death",
      Self::Entity_Cat_Eat => "entity.cat.eat",
      Self::Entity_Cat_Hiss => "entity.cat.hiss",
      Self::Entity_Cat_BegForFood => "entity.cat.beg_for_food",
      Self::Entity_Cat_Hurt => "entity.cat.hurt",
      Self::Entity_Cat_Purr => "entity.cat.purr",
      Self::Entity_Cat_Purreow => "entity.cat.purreow",
      Self::Block_Chest_Close => "block.chest.close",
      Self::Block_Chest_Locked => "block.chest.locked",
      Self::Block_Chest_Open => "block.chest.open",
      Self::Entity_Chicken_Ambient => "entity.chicken.ambient",
      Self::Entity_Chicken_Death => "entity.chicken.death",
      Self::Entity_Chicken_Egg => "entity.chicken.egg",
      Self::Entity_Chicken_Hurt => "entity.chicken.hurt",
      Self::Entity_Chicken_Step => "entity.chicken.step",
      Self::Block_ChorusFlower_Death => "block.chorus_flower.death",
      Self::Block_ChorusFlower_Grow => "block.chorus_flower.grow",
      Self::Item_ChorusFruit_Teleport => "item.chorus_fruit.teleport",
      Self::Block_Wool_Break => "block.wool.break",
      Self::Block_Wool_Fall => "block.wool.fall",
      Self::Block_Wool_Hit => "block.wool.hit",
      Self::Block_Wool_Place => "block.wool.place",
      Self::Block_Wool_Step => "block.wool.step",
      Self::Entity_Cod_Ambient => "entity.cod.ambient",
      Self::Entity_Cod_Death => "entity.cod.death",
      Self::Entity_Cod_Flop => "entity.cod.flop",
      Self::Entity_Cod_Hurt => "entity.cod.hurt",
      Self::Block_Comparator_Click => "block.comparator.click",
      Self::Block_Composter_Empty => "block.composter.empty",
      Self::Block_Composter_Fill => "block.composter.fill",
      Self::Block_Composter_FillSuccess => "block.composter.fill_success",
      Self::Block_Composter_Ready => "block.composter.ready",
      Self::Block_Conduit_Activate => "block.conduit.activate",
      Self::Block_Conduit_Ambient => "block.conduit.ambient",
      Self::Block_Conduit_Ambient_Short => "block.conduit.ambient.short",
      Self::Block_Conduit_Attack_Target => "block.conduit.attack.target",
      Self::Block_Conduit_Deactivate => "block.conduit.deactivate",
      Self::Entity_Cow_Ambient => "entity.cow.ambient",
      Self::Entity_Cow_Death => "entity.cow.death",
      Self::Entity_Cow_Hurt => "entity.cow.hurt",
      Self::Entity_Cow_Milk => "entity.cow.milk",
      Self::Entity_Cow_Step => "entity.cow.step",
      Self::Entity_Creeper_Death => "entity.creeper.death",
      Self::Entity_Creeper_Hurt => "entity.creeper.hurt",
      Self::Entity_Creeper_Primed => "entity.creeper.primed",
      Self::Block_Crop_Break => "block.crop.break",
      Self::Item_Crop_Plant => "item.crop.plant",
      Self::Item_Crossbow_Hit => "item.crossbow.hit",
      Self::Item_Crossbow_LoadingEnd => "item.crossbow.loading_end",
      Self::Item_Crossbow_LoadingMiddle => "item.crossbow.loading_middle",
      Self::Item_Crossbow_LoadingStart => "item.crossbow.loading_start",
      Self::Item_Crossbow_QuickCharge1 => "item.crossbow.quick_charge_1",
      Self::Item_Crossbow_QuickCharge2 => "item.crossbow.quick_charge_2",
      Self::Item_Crossbow_QuickCharge3 => "item.crossbow.quick_charge_3",
      Self::Item_Crossbow_Shoot => "item.crossbow.shoot",
      Self::Block_Dispenser_Dispense => "block.dispenser.dispense",
      Self::Block_Dispenser_Fail => "block.dispenser.fail",
      Self::Block_Dispenser_Launch => "block.dispenser.launch",
      Self::Entity_Dolphin_Ambient => "entity.dolphin.ambient",
      Self::Entity_Dolphin_AmbientWater => "entity.dolphin.ambient_water",
      Self::Entity_Dolphin_Attack => "entity.dolphin.attack",
      Self::Entity_Dolphin_Death => "entity.dolphin.death",
      Self::Entity_Dolphin_Eat => "entity.dolphin.eat",
      Self::Entity_Dolphin_Hurt => "entity.dolphin.hurt",
      Self::Entity_Dolphin_Jump => "entity.dolphin.jump",
      Self::Entity_Dolphin_Play => "entity.dolphin.play",
      Self::Entity_Dolphin_Splash => "entity.dolphin.splash",
      Self::Entity_Dolphin_Swim => "entity.dolphin.swim",
      Self::Entity_Donkey_Ambient => "entity.donkey.ambient",
      Self::Entity_Donkey_Angry => "entity.donkey.angry",
      Self::Entity_Donkey_Chest => "entity.donkey.chest",
      Self::Entity_Donkey_Death => "entity.donkey.death",
      Self::Entity_Donkey_Hurt => "entity.donkey.hurt",
      Self::Entity_Drowned_Ambient => "entity.drowned.ambient",
      Self::Entity_Drowned_AmbientWater => "entity.drowned.ambient_water",
      Self::Entity_Drowned_Death => "entity.drowned.death",
      Self::Entity_Drowned_DeathWater => "entity.drowned.death_water",
      Self::Entity_Drowned_Hurt => "entity.drowned.hurt",
      Self::Entity_Drowned_HurtWater => "entity.drowned.hurt_water",
      Self::Entity_Drowned_Shoot => "entity.drowned.shoot",
      Self::Entity_Drowned_Step => "entity.drowned.step",
      Self::Entity_Drowned_Swim => "entity.drowned.swim",
      Self::Entity_Egg_Throw => "entity.egg.throw",
      Self::Entity_ElderGuardian_Ambient => "entity.elder_guardian.ambient",
      Self::Entity_ElderGuardian_AmbientLand => "entity.elder_guardian.ambient_land",
      Self::Entity_ElderGuardian_Curse => "entity.elder_guardian.curse",
      Self::Entity_ElderGuardian_Death => "entity.elder_guardian.death",
      Self::Entity_ElderGuardian_DeathLand => "entity.elder_guardian.death_land",
      Self::Entity_ElderGuardian_Flop => "entity.elder_guardian.flop",
      Self::Entity_ElderGuardian_Hurt => "entity.elder_guardian.hurt",
      Self::Entity_ElderGuardian_HurtLand => "entity.elder_guardian.hurt_land",
      Self::Item_Elytra_Flying => "item.elytra.flying",
      Self::Block_EnchantmentTable_Use => "block.enchantment_table.use",
      Self::Block_EnderChest_Close => "block.ender_chest.close",
      Self::Block_EnderChest_Open => "block.ender_chest.open",
      Self::Entity_EnderDragon_Ambient => "entity.ender_dragon.ambient",
      Self::Entity_EnderDragon_Death => "entity.ender_dragon.death",
      Self::Entity_DragonFireball_Explode => "entity.dragon_fireball.explode",
      Self::Entity_EnderDragon_Flap => "entity.ender_dragon.flap",
      Self::Entity_EnderDragon_Growl => "entity.ender_dragon.growl",
      Self::Entity_EnderDragon_Hurt => "entity.ender_dragon.hurt",
      Self::Entity_EnderDragon_Shoot => "entity.ender_dragon.shoot",
      Self::Entity_EnderEye_Death => "entity.ender_eye.death",
      Self::Entity_EnderEye_Launch => "entity.ender_eye.launch",
      Self::Entity_Enderman_Ambient => "entity.enderman.ambient",
      Self::Entity_Enderman_Death => "entity.enderman.death",
      Self::Entity_Enderman_Hurt => "entity.enderman.hurt",
      Self::Entity_Enderman_Scream => "entity.enderman.scream",
      Self::Entity_Enderman_Stare => "entity.enderman.stare",
      Self::Entity_Enderman_Teleport => "entity.enderman.teleport",
      Self::Entity_Endermite_Ambient => "entity.endermite.ambient",
      Self::Entity_Endermite_Death => "entity.endermite.death",
      Self::Entity_Endermite_Hurt => "entity.endermite.hurt",
      Self::Entity_Endermite_Step => "entity.endermite.step",
      Self::Entity_EnderPearl_Throw => "entity.ender_pearl.throw",
      Self::Block_EndGateway_Spawn => "block.end_gateway.spawn",
      Self::Block_EndPortalFrame_Fill => "block.end_portal_frame.fill",
      Self::Block_EndPortal_Spawn => "block.end_portal.spawn",
      Self::Entity_Evoker_Ambient => "entity.evoker.ambient",
      Self::Entity_Evoker_CastSpell => "entity.evoker.cast_spell",
      Self::Entity_Evoker_Celebrate => "entity.evoker.celebrate",
      Self::Entity_Evoker_Death => "entity.evoker.death",
      Self::Entity_EvokerFangs_Attack => "entity.evoker_fangs.attack",
      Self::Entity_Evoker_Hurt => "entity.evoker.hurt",
      Self::Entity_Evoker_PrepareAttack => "entity.evoker.prepare_attack",
      Self::Entity_Evoker_PrepareSummon => "entity.evoker.prepare_summon",
      Self::Entity_Evoker_PrepareWololo => "entity.evoker.prepare_wololo",
      Self::Entity_ExperienceBottle_Throw => "entity.experience_bottle.throw",
      Self::Entity_ExperienceOrb_Pickup => "entity.experience_orb.pickup",
      Self::Block_FenceGate_Close => "block.fence_gate.close",
      Self::Block_FenceGate_Open => "block.fence_gate.open",
      Self::Item_Firecharge_Use => "item.firecharge.use",
      Self::Entity_FireworkRocket_Blast => "entity.firework_rocket.blast",
      Self::Entity_FireworkRocket_BlastFar => "entity.firework_rocket.blast_far",
      Self::Entity_FireworkRocket_LargeBlast => "entity.firework_rocket.large_blast",
      Self::Entity_FireworkRocket_LargeBlastFar => "entity.firework_rocket.large_blast_far",
      Self::Entity_FireworkRocket_Launch => "entity.firework_rocket.launch",
      Self::Entity_FireworkRocket_Shoot => "entity.firework_rocket.shoot",
      Self::Entity_FireworkRocket_Twinkle => "entity.firework_rocket.twinkle",
      Self::Entity_FireworkRocket_TwinkleFar => "entity.firework_rocket.twinkle_far",
      Self::Block_Fire_Ambient => "block.fire.ambient",
      Self::Block_Fire_Extinguish => "block.fire.extinguish",
      Self::Entity_Fish_Swim => "entity.fish.swim",
      Self::Item_Flintandsteel_Use => "item.flintandsteel.use",
      Self::Entity_Fox_Aggro => "entity.fox.aggro",
      Self::Entity_Fox_Ambient => "entity.fox.ambient",
      Self::Entity_Fox_Bite => "entity.fox.bite",
      Self::Entity_Fox_Death => "entity.fox.death",
      Self::Entity_Fox_Eat => "entity.fox.eat",
      Self::Entity_Fox_Hurt => "entity.fox.hurt",
      Self::Entity_Fox_Screech => "entity.fox.screech",
      Self::Entity_Fox_Sleep => "entity.fox.sleep",
      Self::Entity_Fox_Sniff => "entity.fox.sniff",
      Self::Entity_Fox_Spit => "entity.fox.spit",
      Self::Block_Furnace_FireCrackle => "block.furnace.fire_crackle",
      Self::Entity_Generic_BigFall => "entity.generic.big_fall",
      Self::Entity_Generic_Burn => "entity.generic.burn",
      Self::Entity_Generic_Death => "entity.generic.death",
      Self::Entity_Generic_Drink => "entity.generic.drink",
      Self::Entity_Generic_Eat => "entity.generic.eat",
      Self::Entity_Generic_Explode => "entity.generic.explode",
      Self::Entity_Generic_ExtinguishFire => "entity.generic.extinguish_fire",
      Self::Entity_Generic_Hurt => "entity.generic.hurt",
      Self::Entity_Generic_SmallFall => "entity.generic.small_fall",
      Self::Entity_Generic_Splash => "entity.generic.splash",
      Self::Entity_Generic_Swim => "entity.generic.swim",
      Self::Entity_Ghast_Ambient => "entity.ghast.ambient",
      Self::Entity_Ghast_Death => "entity.ghast.death",
      Self::Entity_Ghast_Hurt => "entity.ghast.hurt",
      Self::Entity_Ghast_Scream => "entity.ghast.scream",
      Self::Entity_Ghast_Shoot => "entity.ghast.shoot",
      Self::Entity_Ghast_Warn => "entity.ghast.warn",
      Self::Block_Glass_Break => "block.glass.break",
      Self::Block_Glass_Fall => "block.glass.fall",
      Self::Block_Glass_Hit => "block.glass.hit",
      Self::Block_Glass_Place => "block.glass.place",
      Self::Block_Glass_Step => "block.glass.step",
      Self::Block_Grass_Break => "block.grass.break",
      Self::Block_Grass_Fall => "block.grass.fall",
      Self::Block_Grass_Hit => "block.grass.hit",
      Self::Block_Grass_Place => "block.grass.place",
      Self::Block_Grass_Step => "block.grass.step",
      Self::Block_WetGrass_Break => "block.wet_grass.break",
      Self::Block_WetGrass_Fall => "block.wet_grass.fall",
      Self::Block_WetGrass_Hit => "block.wet_grass.hit",
      Self::Block_WetGrass_Place => "block.wet_grass.place",
      Self::Block_WetGrass_Step => "block.wet_grass.step",
      Self::Block_CoralBlock_Break => "block.coral_block.break",
      Self::Block_CoralBlock_Fall => "block.coral_block.fall",
      Self::Block_CoralBlock_Hit => "block.coral_block.hit",
      Self::Block_CoralBlock_Place => "block.coral_block.place",
      Self::Block_CoralBlock_Step => "block.coral_block.step",
      Self::Block_Gravel_Break => "block.gravel.break",
      Self::Block_Gravel_Fall => "block.gravel.fall",
      Self::Block_Gravel_Hit => "block.gravel.hit",
      Self::Block_Gravel_Place => "block.gravel.place",
      Self::Block_Gravel_Step => "block.gravel.step",
      Self::Block_Grindstone_Use => "block.grindstone.use",
      Self::Entity_Guardian_Ambient => "entity.guardian.ambient",
      Self::Entity_Guardian_AmbientLand => "entity.guardian.ambient_land",
      Self::Entity_Guardian_Attack => "entity.guardian.attack",
      Self::Entity_Guardian_Death => "entity.guardian.death",
      Self::Entity_Guardian_DeathLand => "entity.guardian.death_land",
      Self::Entity_Guardian_Flop => "entity.guardian.flop",
      Self::Entity_Guardian_Hurt => "entity.guardian.hurt",
      Self::Entity_Guardian_HurtLand => "entity.guardian.hurt_land",
      Self::Item_Hoe_Till => "item.hoe.till",
      Self::Block_HoneyBlock_Break => "block.honey_block.break",
      Self::Block_HoneyBlock_Fall => "block.honey_block.fall",
      Self::Block_HoneyBlock_Hit => "block.honey_block.hit",
      Self::Block_HoneyBlock_Place => "block.honey_block.place",
      Self::Block_HoneyBlock_Slide => "block.honey_block.slide",
      Self::Block_HoneyBlock_Step => "block.honey_block.step",
      Self::Item_HoneyBottle_Drink => "item.honey_bottle.drink",
      Self::Entity_Horse_Ambient => "entity.horse.ambient",
      Self::Entity_Horse_Angry => "entity.horse.angry",
      Self::Entity_Horse_Armor => "entity.horse.armor",
      Self::Entity_Horse_Breathe => "entity.horse.breathe",
      Self::Entity_Horse_Death => "entity.horse.death",
      Self::Entity_Horse_Eat => "entity.horse.eat",
      Self::Entity_Horse_Gallop => "entity.horse.gallop",
      Self::Entity_Horse_Hurt => "entity.horse.hurt",
      Self::Entity_Horse_Jump => "entity.horse.jump",
      Self::Entity_Horse_Land => "entity.horse.land",
      Self::Entity_Horse_Saddle => "entity.horse.saddle",
      Self::Entity_Horse_Step => "entity.horse.step",
      Self::Entity_Horse_StepWood => "entity.horse.step_wood",
      Self::Entity_Hostile_BigFall => "entity.hostile.big_fall",
      Self::Entity_Hostile_Death => "entity.hostile.death",
      Self::Entity_Hostile_Hurt => "entity.hostile.hurt",
      Self::Entity_Hostile_SmallFall => "entity.hostile.small_fall",
      Self::Entity_Hostile_Splash => "entity.hostile.splash",
      Self::Entity_Hostile_Swim => "entity.hostile.swim",
      Self::Entity_Husk_Ambient => "entity.husk.ambient",
      Self::Entity_Husk_ConvertedToZombie => "entity.husk.converted_to_zombie",
      Self::Entity_Husk_Death => "entity.husk.death",
      Self::Entity_Husk_Hurt => "entity.husk.hurt",
      Self::Entity_Husk_Step => "entity.husk.step",
      Self::Entity_Ravager_Ambient => "entity.ravager.ambient",
      Self::Entity_Ravager_Attack => "entity.ravager.attack",
      Self::Entity_Ravager_Celebrate => "entity.ravager.celebrate",
      Self::Entity_Ravager_Death => "entity.ravager.death",
      Self::Entity_Ravager_Hurt => "entity.ravager.hurt",
      Self::Entity_Ravager_Step => "entity.ravager.step",
      Self::Entity_Ravager_Stunned => "entity.ravager.stunned",
      Self::Entity_Ravager_Roar => "entity.ravager.roar",
      Self::Entity_Illusioner_Ambient => "entity.illusioner.ambient",
      Self::Entity_Illusioner_CastSpell => "entity.illusioner.cast_spell",
      Self::Entity_Illusioner_Death => "entity.illusioner.death",
      Self::Entity_Illusioner_Hurt => "entity.illusioner.hurt",
      Self::Entity_Illusioner_MirrorMove => "entity.illusioner.mirror_move",
      Self::Entity_Illusioner_PrepareBlindness => "entity.illusioner.prepare_blindness",
      Self::Entity_Illusioner_PrepareMirror => "entity.illusioner.prepare_mirror",
      Self::Block_IronDoor_Close => "block.iron_door.close",
      Self::Block_IronDoor_Open => "block.iron_door.open",
      Self::Entity_IronGolem_Attack => "entity.iron_golem.attack",
      Self::Entity_IronGolem_Damage => "entity.iron_golem.damage",
      Self::Entity_IronGolem_Death => "entity.iron_golem.death",
      Self::Entity_IronGolem_Hurt => "entity.iron_golem.hurt",
      Self::Entity_IronGolem_Repair => "entity.iron_golem.repair",
      Self::Entity_IronGolem_Step => "entity.iron_golem.step",
      Self::Block_IronTrapdoor_Close => "block.iron_trapdoor.close",
      Self::Block_IronTrapdoor_Open => "block.iron_trapdoor.open",
      Self::Entity_ItemFrame_AddItem => "entity.item_frame.add_item",
      Self::Entity_ItemFrame_Break => "entity.item_frame.break",
      Self::Entity_ItemFrame_Place => "entity.item_frame.place",
      Self::Entity_ItemFrame_RemoveItem => "entity.item_frame.remove_item",
      Self::Entity_ItemFrame_RotateItem => "entity.item_frame.rotate_item",
      Self::Entity_Item_Break => "entity.item.break",
      Self::Entity_Item_Pickup => "entity.item.pickup",
      Self::Block_Ladder_Break => "block.ladder.break",
      Self::Block_Ladder_Fall => "block.ladder.fall",
      Self::Block_Ladder_Hit => "block.ladder.hit",
      Self::Block_Ladder_Place => "block.ladder.place",
      Self::Block_Ladder_Step => "block.ladder.step",
      Self::Block_Lantern_Break => "block.lantern.break",
      Self::Block_Lantern_Fall => "block.lantern.fall",
      Self::Block_Lantern_Hit => "block.lantern.hit",
      Self::Block_Lantern_Place => "block.lantern.place",
      Self::Block_Lantern_Step => "block.lantern.step",
      Self::Block_Lava_Ambient => "block.lava.ambient",
      Self::Block_Lava_Extinguish => "block.lava.extinguish",
      Self::Block_Lava_Pop => "block.lava.pop",
      Self::Entity_LeashKnot_Break => "entity.leash_knot.break",
      Self::Entity_LeashKnot_Place => "entity.leash_knot.place",
      Self::Block_Lever_Click => "block.lever.click",
      Self::Entity_LightningBolt_Impact => "entity.lightning_bolt.impact",
      Self::Entity_LightningBolt_Thunder => "entity.lightning_bolt.thunder",
      Self::Entity_LingeringPotion_Throw => "entity.lingering_potion.throw",
      Self::Entity_Llama_Ambient => "entity.llama.ambient",
      Self::Entity_Llama_Angry => "entity.llama.angry",
      Self::Entity_Llama_Chest => "entity.llama.chest",
      Self::Entity_Llama_Death => "entity.llama.death",
      Self::Entity_Llama_Eat => "entity.llama.eat",
      Self::Entity_Llama_Hurt => "entity.llama.hurt",
      Self::Entity_Llama_Spit => "entity.llama.spit",
      Self::Entity_Llama_Step => "entity.llama.step",
      Self::Entity_Llama_Swag => "entity.llama.swag",
      Self::Entity_MagmaCube_Death => "entity.magma_cube.death",
      Self::Entity_MagmaCube_Hurt => "entity.magma_cube.hurt",
      Self::Entity_MagmaCube_Jump => "entity.magma_cube.jump",
      Self::Entity_MagmaCube_Squish => "entity.magma_cube.squish",
      Self::Block_Metal_Break => "block.metal.break",
      Self::Block_Metal_Fall => "block.metal.fall",
      Self::Block_Metal_Hit => "block.metal.hit",
      Self::Block_Metal_Place => "block.metal.place",
      Self::Block_MetalPressurePlate_ClickOff => "block.metal_pressure_plate.click_off",
      Self::Block_MetalPressurePlate_ClickOn => "block.metal_pressure_plate.click_on",
      Self::Block_Metal_Step => "block.metal.step",
      Self::Entity_Minecart_Inside => "entity.minecart.inside",
      Self::Entity_Minecart_Riding => "entity.minecart.riding",
      Self::Entity_Mooshroom_Convert => "entity.mooshroom.convert",
      Self::Entity_Mooshroom_Eat => "entity.mooshroom.eat",
      Self::Entity_Mooshroom_Milk => "entity.mooshroom.milk",
      Self::Entity_Mooshroom_SuspiciousMilk => "entity.mooshroom.suspicious_milk",
      Self::Entity_Mooshroom_Shear => "entity.mooshroom.shear",
      Self::Entity_Mule_Ambient => "entity.mule.ambient",
      Self::Entity_Mule_Chest => "entity.mule.chest",
      Self::Entity_Mule_Death => "entity.mule.death",
      Self::Entity_Mule_Hurt => "entity.mule.hurt",
      Self::Music_Creative => "music.creative",
      Self::Music_Credits => "music.credits",
      Self::Music_Dragon => "music.dragon",
      Self::Music_End => "music.end",
      Self::Music_Game => "music.game",
      Self::Music_Menu => "music.menu",
      Self::Music_Nether => "music.nether",
      Self::Music_UnderWater => "music.under_water",
      Self::Block_NetherWart_Break => "block.nether_wart.break",
      Self::Item_NetherWart_Plant => "item.nether_wart.plant",
      Self::Block_NoteBlock_Basedrum => "block.note_block.basedrum",
      Self::Block_NoteBlock_Bass => "block.note_block.bass",
      Self::Block_NoteBlock_Bell => "block.note_block.bell",
      Self::Block_NoteBlock_Chime => "block.note_block.chime",
      Self::Block_NoteBlock_Flute => "block.note_block.flute",
      Self::Block_NoteBlock_Guitar => "block.note_block.guitar",
      Self::Block_NoteBlock_Harp => "block.note_block.harp",
      Self::Block_NoteBlock_Hat => "block.note_block.hat",
      Self::Block_NoteBlock_Pling => "block.note_block.pling",
      Self::Block_NoteBlock_Snare => "block.note_block.snare",
      Self::Block_NoteBlock_Xylophone => "block.note_block.xylophone",
      Self::Block_NoteBlock_IronXylophone => "block.note_block.iron_xylophone",
      Self::Block_NoteBlock_CowBell => "block.note_block.cow_bell",
      Self::Block_NoteBlock_Didgeridoo => "block.note_block.didgeridoo",
      Self::Block_NoteBlock_Bit => "block.note_block.bit",
      Self::Block_NoteBlock_Banjo => "block.note_block.banjo",
      Self::Entity_Ocelot_Hurt => "entity.ocelot.hurt",
      Self::Entity_Ocelot_Ambient => "entity.ocelot.ambient",
      Self::Entity_Ocelot_Death => "entity.ocelot.death",
      Self::Entity_Painting_Break => "entity.painting.break",
      Self::Entity_Painting_Place => "entity.painting.place",
      Self::Entity_Panda_PreSneeze => "entity.panda.pre_sneeze",
      Self::Entity_Panda_Sneeze => "entity.panda.sneeze",
      Self::Entity_Panda_Ambient => "entity.panda.ambient",
      Self::Entity_Panda_Death => "entity.panda.death",
      Self::Entity_Panda_Eat => "entity.panda.eat",
      Self::Entity_Panda_Step => "entity.panda.step",
      Self::Entity_Panda_CantBreed => "entity.panda.cant_breed",
      Self::Entity_Panda_AggressiveAmbient => "entity.panda.aggressive_ambient",
      Self::Entity_Panda_WorriedAmbient => "entity.panda.worried_ambient",
      Self::Entity_Panda_Hurt => "entity.panda.hurt",
      Self::Entity_Panda_Bite => "entity.panda.bite",
      Self::Entity_Parrot_Ambient => "entity.parrot.ambient",
      Self::Entity_Parrot_Death => "entity.parrot.death",
      Self::Entity_Parrot_Eat => "entity.parrot.eat",
      Self::Entity_Parrot_Fly => "entity.parrot.fly",
      Self::Entity_Parrot_Hurt => "entity.parrot.hurt",
      Self::Entity_Parrot_Imitate_Blaze => "entity.parrot.imitate.blaze",
      Self::Entity_Parrot_Imitate_Creeper => "entity.parrot.imitate.creeper",
      Self::Entity_Parrot_Imitate_Drowned => "entity.parrot.imitate.drowned",
      Self::Entity_Parrot_Imitate_ElderGuardian => "entity.parrot.imitate.elder_guardian",
      Self::Entity_Parrot_Imitate_EnderDragon => "entity.parrot.imitate.ender_dragon",
      Self::Entity_Parrot_Imitate_Endermite => "entity.parrot.imitate.endermite",
      Self::Entity_Parrot_Imitate_Evoker => "entity.parrot.imitate.evoker",
      Self::Entity_Parrot_Imitate_Ghast => "entity.parrot.imitate.ghast",
      Self::Entity_Parrot_Imitate_Guardian => "entity.parrot.imitate.guardian",
      Self::Entity_Parrot_Imitate_Husk => "entity.parrot.imitate.husk",
      Self::Entity_Parrot_Imitate_Illusioner => "entity.parrot.imitate.illusioner",
      Self::Entity_Parrot_Imitate_MagmaCube => "entity.parrot.imitate.magma_cube",
      Self::Entity_Parrot_Imitate_Phantom => "entity.parrot.imitate.phantom",
      Self::Entity_Parrot_Imitate_Pillager => "entity.parrot.imitate.pillager",
      Self::Entity_Parrot_Imitate_Ravager => "entity.parrot.imitate.ravager",
      Self::Entity_Parrot_Imitate_Shulker => "entity.parrot.imitate.shulker",
      Self::Entity_Parrot_Imitate_Silverfish => "entity.parrot.imitate.silverfish",
      Self::Entity_Parrot_Imitate_Skeleton => "entity.parrot.imitate.skeleton",
      Self::Entity_Parrot_Imitate_Slime => "entity.parrot.imitate.slime",
      Self::Entity_Parrot_Imitate_Spider => "entity.parrot.imitate.spider",
      Self::Entity_Parrot_Imitate_Stray => "entity.parrot.imitate.stray",
      Self::Entity_Parrot_Imitate_Vex => "entity.parrot.imitate.vex",
      Self::Entity_Parrot_Imitate_Vindicator => "entity.parrot.imitate.vindicator",
      Self::Entity_Parrot_Imitate_Witch => "entity.parrot.imitate.witch",
      Self::Entity_Parrot_Imitate_Wither => "entity.parrot.imitate.wither",
      Self::Entity_Parrot_Imitate_WitherSkeleton => "entity.parrot.imitate.wither_skeleton",
      Self::Entity_Parrot_Imitate_Zombie => "entity.parrot.imitate.zombie",
      Self::Entity_Parrot_Imitate_ZombieVillager => "entity.parrot.imitate.zombie_villager",
      Self::Entity_Parrot_Step => "entity.parrot.step",
      Self::Entity_Phantom_Ambient => "entity.phantom.ambient",
      Self::Entity_Phantom_Bite => "entity.phantom.bite",
      Self::Entity_Phantom_Death => "entity.phantom.death",
      Self::Entity_Phantom_Flap => "entity.phantom.flap",
      Self::Entity_Phantom_Hurt => "entity.phantom.hurt",
      Self::Entity_Phantom_Swoop => "entity.phantom.swoop",
      Self::Entity_Pig_Ambient => "entity.pig.ambient",
      Self::Entity_Pig_Death => "entity.pig.death",
      Self::Entity_Pig_Hurt => "entity.pig.hurt",
      Self::Entity_Pig_Saddle => "entity.pig.saddle",
      Self::Entity_Pig_Step => "entity.pig.step",
      Self::Entity_Pillager_Ambient => "entity.pillager.ambient",
      Self::Entity_Pillager_Celebrate => "entity.pillager.celebrate",
      Self::Entity_Pillager_Death => "entity.pillager.death",
      Self::Entity_Pillager_Hurt => "entity.pillager.hurt",
      Self::Block_Piston_Contract => "block.piston.contract",
      Self::Block_Piston_Extend => "block.piston.extend",
      Self::Entity_Player_Attack_Crit => "entity.player.attack.crit",
      Self::Entity_Player_Attack_Knockback => "entity.player.attack.knockback",
      Self::Entity_Player_Attack_Nodamage => "entity.player.attack.nodamage",
      Self::Entity_Player_Attack_Strong => "entity.player.attack.strong",
      Self::Entity_Player_Attack_Sweep => "entity.player.attack.sweep",
      Self::Entity_Player_Attack_Weak => "entity.player.attack.weak",
      Self::Entity_Player_BigFall => "entity.player.big_fall",
      Self::Entity_Player_Breath => "entity.player.breath",
      Self::Entity_Player_Burp => "entity.player.burp",
      Self::Entity_Player_Death => "entity.player.death",
      Self::Entity_Player_Hurt => "entity.player.hurt",
      Self::Entity_Player_HurtDrown => "entity.player.hurt_drown",
      Self::Entity_Player_HurtOnFire => "entity.player.hurt_on_fire",
      Self::Entity_Player_HurtSweetBerryBush => "entity.player.hurt_sweet_berry_bush",
      Self::Entity_Player_Levelup => "entity.player.levelup",
      Self::Entity_Player_SmallFall => "entity.player.small_fall",
      Self::Entity_Player_Splash => "entity.player.splash",
      Self::Entity_Player_Splash_HighSpeed => "entity.player.splash.high_speed",
      Self::Entity_Player_Swim => "entity.player.swim",
      Self::Entity_PolarBear_Ambient => "entity.polar_bear.ambient",
      Self::Entity_PolarBear_AmbientBaby => "entity.polar_bear.ambient_baby",
      Self::Entity_PolarBear_Death => "entity.polar_bear.death",
      Self::Entity_PolarBear_Hurt => "entity.polar_bear.hurt",
      Self::Entity_PolarBear_Step => "entity.polar_bear.step",
      Self::Entity_PolarBear_Warning => "entity.polar_bear.warning",
      Self::Block_Portal_Ambient => "block.portal.ambient",
      Self::Block_Portal_Travel => "block.portal.travel",
      Self::Block_Portal_Trigger => "block.portal.trigger",
      Self::Entity_PufferFish_Ambient => "entity.puffer_fish.ambient",
      Self::Entity_PufferFish_BlowOut => "entity.puffer_fish.blow_out",
      Self::Entity_PufferFish_BlowUp => "entity.puffer_fish.blow_up",
      Self::Entity_PufferFish_Death => "entity.puffer_fish.death",
      Self::Entity_PufferFish_Flop => "entity.puffer_fish.flop",
      Self::Entity_PufferFish_Hurt => "entity.puffer_fish.hurt",
      Self::Entity_PufferFish_Sting => "entity.puffer_fish.sting",
      Self::Block_Pumpkin_Carve => "block.pumpkin.carve",
      Self::Entity_Rabbit_Ambient => "entity.rabbit.ambient",
      Self::Entity_Rabbit_Attack => "entity.rabbit.attack",
      Self::Entity_Rabbit_Death => "entity.rabbit.death",
      Self::Entity_Rabbit_Hurt => "entity.rabbit.hurt",
      Self::Entity_Rabbit_Jump => "entity.rabbit.jump",
      Self::Event_Raid_Horn => "event.raid.horn",
      Self::MusicDisc_11 => "music_disc.11",
      Self::MusicDisc_13 => "music_disc.13",
      Self::MusicDisc_Blocks => "music_disc.blocks",
      Self::MusicDisc_Cat => "music_disc.cat",
      Self::MusicDisc_Chirp => "music_disc.chirp",
      Self::MusicDisc_Far => "music_disc.far",
      Self::MusicDisc_Mall => "music_disc.mall",
      Self::MusicDisc_Mellohi => "music_disc.mellohi",
      Self::MusicDisc_Stal => "music_disc.stal",
      Self::MusicDisc_Strad => "music_disc.strad",
      Self::MusicDisc_Wait => "music_disc.wait",
      Self::MusicDisc_Ward => "music_disc.ward",
      Self::Block_RedstoneTorch_Burnout => "block.redstone_torch.burnout",
      Self::Entity_Salmon_Ambient => "entity.salmon.ambient",
      Self::Entity_Salmon_Death => "entity.salmon.death",
      Self::Entity_Salmon_Flop => "entity.salmon.flop",
      Self::Entity_Salmon_Hurt => "entity.salmon.hurt",
      Self::Block_Sand_Break => "block.sand.break",
      Self::Block_Sand_Fall => "block.sand.fall",
      Self::Block_Sand_Hit => "block.sand.hit",
      Self::Block_Sand_Place => "block.sand.place",
      Self::Block_Sand_Step => "block.sand.step",
      Self::Block_Scaffolding_Break => "block.scaffolding.break",
      Self::Block_Scaffolding_Fall => "block.scaffolding.fall",
      Self::Block_Scaffolding_Hit => "block.scaffolding.hit",
      Self::Block_Scaffolding_Place => "block.scaffolding.place",
      Self::Block_Scaffolding_Step => "block.scaffolding.step",
      Self::Entity_Sheep_Ambient => "entity.sheep.ambient",
      Self::Entity_Sheep_Death => "entity.sheep.death",
      Self::Entity_Sheep_Hurt => "entity.sheep.hurt",
      Self::Entity_Sheep_Shear => "entity.sheep.shear",
      Self::Entity_Sheep_Step => "entity.sheep.step",
      Self::Item_Shield_Block => "item.shield.block",
      Self::Item_Shield_Break => "item.shield.break",
      Self::Item_Shovel_Flatten => "item.shovel.flatten",
      Self::Entity_Shulker_Ambient => "entity.shulker.ambient",
      Self::Block_ShulkerBox_Close => "block.shulker_box.close",
      Self::Block_ShulkerBox_Open => "block.shulker_box.open",
      Self::Entity_ShulkerBullet_Hit => "entity.shulker_bullet.hit",
      Self::Entity_ShulkerBullet_Hurt => "entity.shulker_bullet.hurt",
      Self::Entity_Shulker_Close => "entity.shulker.close",
      Self::Entity_Shulker_Death => "entity.shulker.death",
      Self::Entity_Shulker_Hurt => "entity.shulker.hurt",
      Self::Entity_Shulker_HurtClosed => "entity.shulker.hurt_closed",
      Self::Entity_Shulker_Open => "entity.shulker.open",
      Self::Entity_Shulker_Shoot => "entity.shulker.shoot",
      Self::Entity_Shulker_Teleport => "entity.shulker.teleport",
      Self::Entity_Silverfish_Ambient => "entity.silverfish.ambient",
      Self::Entity_Silverfish_Death => "entity.silverfish.death",
      Self::Entity_Silverfish_Hurt => "entity.silverfish.hurt",
      Self::Entity_Silverfish_Step => "entity.silverfish.step",
      Self::Entity_Skeleton_Ambient => "entity.skeleton.ambient",
      Self::Entity_Skeleton_Death => "entity.skeleton.death",
      Self::Entity_SkeletonHorse_Ambient => "entity.skeleton_horse.ambient",
      Self::Entity_SkeletonHorse_Death => "entity.skeleton_horse.death",
      Self::Entity_SkeletonHorse_Hurt => "entity.skeleton_horse.hurt",
      Self::Entity_SkeletonHorse_Swim => "entity.skeleton_horse.swim",
      Self::Entity_SkeletonHorse_AmbientWater => "entity.skeleton_horse.ambient_water",
      Self::Entity_SkeletonHorse_GallopWater => "entity.skeleton_horse.gallop_water",
      Self::Entity_SkeletonHorse_JumpWater => "entity.skeleton_horse.jump_water",
      Self::Entity_SkeletonHorse_StepWater => "entity.skeleton_horse.step_water",
      Self::Entity_Skeleton_Hurt => "entity.skeleton.hurt",
      Self::Entity_Skeleton_Shoot => "entity.skeleton.shoot",
      Self::Entity_Skeleton_Step => "entity.skeleton.step",
      Self::Entity_Slime_Attack => "entity.slime.attack",
      Self::Entity_Slime_Death => "entity.slime.death",
      Self::Entity_Slime_Hurt => "entity.slime.hurt",
      Self::Entity_Slime_Jump => "entity.slime.jump",
      Self::Entity_Slime_Squish => "entity.slime.squish",
      Self::Block_SlimeBlock_Break => "block.slime_block.break",
      Self::Block_SlimeBlock_Fall => "block.slime_block.fall",
      Self::Block_SlimeBlock_Hit => "block.slime_block.hit",
      Self::Block_SlimeBlock_Place => "block.slime_block.place",
      Self::Block_SlimeBlock_Step => "block.slime_block.step",
      Self::Entity_MagmaCube_DeathSmall => "entity.magma_cube.death_small",
      Self::Entity_MagmaCube_HurtSmall => "entity.magma_cube.hurt_small",
      Self::Entity_MagmaCube_SquishSmall => "entity.magma_cube.squish_small",
      Self::Entity_Slime_DeathSmall => "entity.slime.death_small",
      Self::Entity_Slime_HurtSmall => "entity.slime.hurt_small",
      Self::Entity_Slime_JumpSmall => "entity.slime.jump_small",
      Self::Entity_Slime_SquishSmall => "entity.slime.squish_small",
      Self::Block_Smoker_Smoke => "block.smoker.smoke",
      Self::Entity_Snowball_Throw => "entity.snowball.throw",
      Self::Block_Snow_Break => "block.snow.break",
      Self::Block_Snow_Fall => "block.snow.fall",
      Self::Entity_SnowGolem_Ambient => "entity.snow_golem.ambient",
      Self::Entity_SnowGolem_Death => "entity.snow_golem.death",
      Self::Entity_SnowGolem_Hurt => "entity.snow_golem.hurt",
      Self::Entity_SnowGolem_Shoot => "entity.snow_golem.shoot",
      Self::Block_Snow_Hit => "block.snow.hit",
      Self::Block_Snow_Place => "block.snow.place",
      Self::Block_Snow_Step => "block.snow.step",
      Self::Entity_Spider_Ambient => "entity.spider.ambient",
      Self::Entity_Spider_Death => "entity.spider.death",
      Self::Entity_Spider_Hurt => "entity.spider.hurt",
      Self::Entity_Spider_Step => "entity.spider.step",
      Self::Entity_SplashPotion_Break => "entity.splash_potion.break",
      Self::Entity_SplashPotion_Throw => "entity.splash_potion.throw",
      Self::Entity_Squid_Ambient => "entity.squid.ambient",
      Self::Entity_Squid_Death => "entity.squid.death",
      Self::Entity_Squid_Hurt => "entity.squid.hurt",
      Self::Entity_Squid_Squirt => "entity.squid.squirt",
      Self::Block_Stone_Break => "block.stone.break",
      Self::Block_StoneButton_ClickOff => "block.stone_button.click_off",
      Self::Block_StoneButton_ClickOn => "block.stone_button.click_on",
      Self::Block_Stone_Fall => "block.stone.fall",
      Self::Block_Stone_Hit => "block.stone.hit",
      Self::Block_Stone_Place => "block.stone.place",
      Self::Block_StonePressurePlate_ClickOff => "block.stone_pressure_plate.click_off",
      Self::Block_StonePressurePlate_ClickOn => "block.stone_pressure_plate.click_on",
      Self::Block_Stone_Step => "block.stone.step",
      Self::Entity_Stray_Ambient => "entity.stray.ambient",
      Self::Entity_Stray_Death => "entity.stray.death",
      Self::Entity_Stray_Hurt => "entity.stray.hurt",
      Self::Entity_Stray_Step => "entity.stray.step",
      Self::Block_SweetBerryBush_Break => "block.sweet_berry_bush.break",
      Self::Block_SweetBerryBush_Place => "block.sweet_berry_bush.place",
      Self::Item_SweetBerries_PickFromBush => "item.sweet_berries.pick_from_bush",
      Self::Enchant_Thorns_Hit => "enchant.thorns.hit",
      Self::Entity_Tnt_Primed => "entity.tnt.primed",
      Self::Item_Totem_Use => "item.totem.use",
      Self::Item_Trident_Hit => "item.trident.hit",
      Self::Item_Trident_HitGround => "item.trident.hit_ground",
      Self::Item_Trident_Return => "item.trident.return",
      Self::Item_Trident_Riptide1 => "item.trident.riptide_1",
      Self::Item_Trident_Riptide2 => "item.trident.riptide_2",
      Self::Item_Trident_Riptide3 => "item.trident.riptide_3",
      Self::Item_Trident_Throw => "item.trident.throw",
      Self::Item_Trident_Thunder => "item.trident.thunder",
      Self::Block_Tripwire_Attach => "block.tripwire.attach",
      Self::Block_Tripwire_ClickOff => "block.tripwire.click_off",
      Self::Block_Tripwire_ClickOn => "block.tripwire.click_on",
      Self::Block_Tripwire_Detach => "block.tripwire.detach",
      Self::Entity_TropicalFish_Ambient => "entity.tropical_fish.ambient",
      Self::Entity_TropicalFish_Death => "entity.tropical_fish.death",
      Self::Entity_TropicalFish_Flop => "entity.tropical_fish.flop",
      Self::Entity_TropicalFish_Hurt => "entity.tropical_fish.hurt",
      Self::Entity_Turtle_AmbientLand => "entity.turtle.ambient_land",
      Self::Entity_Turtle_Death => "entity.turtle.death",
      Self::Entity_Turtle_DeathBaby => "entity.turtle.death_baby",
      Self::Entity_Turtle_EggBreak => "entity.turtle.egg_break",
      Self::Entity_Turtle_EggCrack => "entity.turtle.egg_crack",
      Self::Entity_Turtle_EggHatch => "entity.turtle.egg_hatch",
      Self::Entity_Turtle_Hurt => "entity.turtle.hurt",
      Self::Entity_Turtle_HurtBaby => "entity.turtle.hurt_baby",
      Self::Entity_Turtle_LayEgg => "entity.turtle.lay_egg",
      Self::Entity_Turtle_Shamble => "entity.turtle.shamble",
      Self::Entity_Turtle_ShambleBaby => "entity.turtle.shamble_baby",
      Self::Entity_Turtle_Swim => "entity.turtle.swim",
      Self::Ui_Button_Click => "ui.button.click",
      Self::Ui_Loom_SelectPattern => "ui.loom.select_pattern",
      Self::Ui_Loom_TakeResult => "ui.loom.take_result",
      Self::Ui_CartographyTable_TakeResult => "ui.cartography_table.take_result",
      Self::Ui_Stonecutter_TakeResult => "ui.stonecutter.take_result",
      Self::Ui_Stonecutter_SelectRecipe => "ui.stonecutter.select_recipe",
      Self::Ui_Toast_ChallengeComplete => "ui.toast.challenge_complete",
      Self::Ui_Toast_In => "ui.toast.in",
      Self::Ui_Toast_Out => "ui.toast.out",
      Self::Entity_Vex_Ambient => "entity.vex.ambient",
      Self::Entity_Vex_Charge => "entity.vex.charge",
      Self::Entity_Vex_Death => "entity.vex.death",
      Self::Entity_Vex_Hurt => "entity.vex.hurt",
      Self::Entity_Villager_Ambient => "entity.villager.ambient",
      Self::Entity_Villager_Celebrate => "entity.villager.celebrate",
      Self::Entity_Villager_Death => "entity.villager.death",
      Self::Entity_Villager_Hurt => "entity.villager.hurt",
      Self::Entity_Villager_No => "entity.villager.no",
      Self::Entity_Villager_Trade => "entity.villager.trade",
      Self::Entity_Villager_Yes => "entity.villager.yes",
      Self::Entity_Villager_WorkArmorer => "entity.villager.work_armorer",
      Self::Entity_Villager_WorkButcher => "entity.villager.work_butcher",
      Self::Entity_Villager_WorkCartographer => "entity.villager.work_cartographer",
      Self::Entity_Villager_WorkCleric => "entity.villager.work_cleric",
      Self::Entity_Villager_WorkFarmer => "entity.villager.work_farmer",
      Self::Entity_Villager_WorkFisherman => "entity.villager.work_fisherman",
      Self::Entity_Villager_WorkFletcher => "entity.villager.work_fletcher",
      Self::Entity_Villager_WorkLeatherworker => "entity.villager.work_leatherworker",
      Self::Entity_Villager_WorkLibrarian => "entity.villager.work_librarian",
      Self::Entity_Villager_WorkMason => "entity.villager.work_mason",
      Self::Entity_Villager_WorkShepherd => "entity.villager.work_shepherd",
      Self::Entity_Villager_WorkToolsmith => "entity.villager.work_toolsmith",
      Self::Entity_Villager_WorkWeaponsmith => "entity.villager.work_weaponsmith",
      Self::Entity_Vindicator_Ambient => "entity.vindicator.ambient",
      Self::Entity_Vindicator_Celebrate => "entity.vindicator.celebrate",
      Self::Entity_Vindicator_Death => "entity.vindicator.death",
      Self::Entity_Vindicator_Hurt => "entity.vindicator.hurt",
      Self::Block_LilyPad_Place => "block.lily_pad.place",
      Self::Entity_WanderingTrader_Ambient => "entity.wandering_trader.ambient",
      Self::Entity_WanderingTrader_Death => "entity.wandering_trader.death",
      Self::Entity_WanderingTrader_Disappeared => "entity.wandering_trader.disappeared",
      Self::Entity_WanderingTrader_DrinkMilk => "entity.wandering_trader.drink_milk",
      Self::Entity_WanderingTrader_DrinkPotion => "entity.wandering_trader.drink_potion",
      Self::Entity_WanderingTrader_Hurt => "entity.wandering_trader.hurt",
      Self::Entity_WanderingTrader_No => "entity.wandering_trader.no",
      Self::Entity_WanderingTrader_Reappeared => "entity.wandering_trader.reappeared",
      Self::Entity_WanderingTrader_Trade => "entity.wandering_trader.trade",
      Self::Entity_WanderingTrader_Yes => "entity.wandering_trader.yes",
      Self::Block_Water_Ambient => "block.water.ambient",
      Self::Weather_Rain => "weather.rain",
      Self::Weather_Rain_Above => "weather.rain.above",
      Self::Entity_Witch_Ambient => "entity.witch.ambient",
      Self::Entity_Witch_Celebrate => "entity.witch.celebrate",
      Self::Entity_Witch_Death => "entity.witch.death",
      Self::Entity_Witch_Drink => "entity.witch.drink",
      Self::Entity_Witch_Hurt => "entity.witch.hurt",
      Self::Entity_Witch_Throw => "entity.witch.throw",
      Self::Entity_Wither_Ambient => "entity.wither.ambient",
      Self::Entity_Wither_BreakBlock => "entity.wither.break_block",
      Self::Entity_Wither_Death => "entity.wither.death",
      Self::Entity_Wither_Hurt => "entity.wither.hurt",
      Self::Entity_Wither_Shoot => "entity.wither.shoot",
      Self::Entity_WitherSkeleton_Ambient => "entity.wither_skeleton.ambient",
      Self::Entity_WitherSkeleton_Death => "entity.wither_skeleton.death",
      Self::Entity_WitherSkeleton_Hurt => "entity.wither_skeleton.hurt",
      Self::Entity_WitherSkeleton_Step => "entity.wither_skeleton.step",
      Self::Entity_Wither_Spawn => "entity.wither.spawn",
      Self::Entity_Wolf_Ambient => "entity.wolf.ambient",
      Self::Entity_Wolf_Death => "entity.wolf.death",
      Self::Entity_Wolf_Growl => "entity.wolf.growl",
      Self::Entity_Wolf_Howl => "entity.wolf.howl",
      Self::Entity_Wolf_Hurt => "entity.wolf.hurt",
      Self::Entity_Wolf_Pant => "entity.wolf.pant",
      Self::Entity_Wolf_Shake => "entity.wolf.shake",
      Self::Entity_Wolf_Step => "entity.wolf.step",
      Self::Entity_Wolf_Whine => "entity.wolf.whine",
      Self::Block_WoodenDoor_Close => "block.wooden_door.close",
      Self::Block_WoodenDoor_Open => "block.wooden_door.open",
      Self::Block_WoodenTrapdoor_Close => "block.wooden_trapdoor.close",
      Self::Block_WoodenTrapdoor_Open => "block.wooden_trapdoor.open",
      Self::Block_Wood_Break => "block.wood.break",
      Self::Block_WoodenButton_ClickOff => "block.wooden_button.click_off",
      Self::Block_WoodenButton_ClickOn => "block.wooden_button.click_on",
      Self::Block_Wood_Fall => "block.wood.fall",
      Self::Block_Wood_Hit => "block.wood.hit",
      Self::Block_Wood_Place => "block.wood.place",
      Self::Block_WoodenPressurePlate_ClickOff => "block.wooden_pressure_plate.click_off",
      Self::Block_WoodenPressurePlate_ClickOn => "block.wooden_pressure_plate.click_on",
      Self::Block_Wood_Step => "block.wood.step",
      Self::Entity_Zombie_Ambient => "entity.zombie.ambient",
      Self::Entity_Zombie_AttackWoodenDoor => "entity.zombie.attack_wooden_door",
      Self::Entity_Zombie_AttackIronDoor => "entity.zombie.attack_iron_door",
      Self::Entity_Zombie_BreakWoodenDoor => "entity.zombie.break_wooden_door",
      Self::Entity_Zombie_ConvertedToDrowned => "entity.zombie.converted_to_drowned",
      Self::Entity_Zombie_Death => "entity.zombie.death",
      Self::Entity_Zombie_DestroyEgg => "entity.zombie.destroy_egg",
      Self::Entity_ZombieHorse_Ambient => "entity.zombie_horse.ambient",
      Self::Entity_ZombieHorse_Death => "entity.zombie_horse.death",
      Self::Entity_ZombieHorse_Hurt => "entity.zombie_horse.hurt",
      Self::Entity_Zombie_Hurt => "entity.zombie.hurt",
      Self::Entity_Zombie_Infect => "entity.zombie.infect",
      Self::Entity_ZombiePigman_Ambient => "entity.zombie_pigman.ambient",
      Self::Entity_ZombiePigman_Angry => "entity.zombie_pigman.angry",
      Self::Entity_ZombiePigman_Death => "entity.zombie_pigman.death",
      Self::Entity_ZombiePigman_Hurt => "entity.zombie_pigman.hurt",
      Self::Entity_Zombie_Step => "entity.zombie.step",
      Self::Entity_ZombieVillager_Ambient => "entity.zombie_villager.ambient",
      Self::Entity_ZombieVillager_Converted => "entity.zombie_villager.converted",
      Self::Entity_ZombieVillager_Cure => "entity.zombie_villager.cure",
      Self::Entity_ZombieVillager_Death => "entity.zombie_villager.death",
      Self::Entity_ZombieVillager_Hurt => "entity.zombie_villager.hurt",
      Self::Entity_ZombieVillager_Step => "entity.zombie_villager.step",
    })
  }
  fn from_registry_key(key: &NamespacedKey) -> Option<Self> {
    if *key.namespace() != crate::helpers::MINECRAFT_NAMESPACE {return None;}
    Some(match &**key.key() {
      "ambient.cave" => Self::Ambient_Cave,
      "ambient.underwater.enter" => Self::Ambient_Underwater_Enter,
      "ambient.underwater.exit" => Self::Ambient_Underwater_Exit,
      "ambient.underwater.loop" => Self::Ambient_Underwater_Loop,
      "ambient.underwater.loop.additions" => Self::Ambient_Underwater_Loop_Additions,
      "ambient.underwater.loop.additions.rare" => Self::Ambient_Underwater_Loop_Additions_Rare,
      "ambient.underwater.loop.additions.ultra_rare" => Self::Ambient_Underwater_Loop_Additions_UltraRare,
      "block.anvil.break" => Self::Block_Anvil_Break,
      "block.anvil.destroy" => Self::Block_Anvil_Destroy,
      "block.anvil.fall" => Self::Block_Anvil_Fall,
      "block.anvil.hit" => Self::Block_Anvil_Hit,
      "block.anvil.land" => Self::Block_Anvil_Land,
      "block.anvil.place" => Self::Block_Anvil_Place,
      "block.anvil.step" => Self::Block_Anvil_Step,
      "block.anvil.use" => Self::Block_Anvil_Use,
      "item.armor.equip_chain" => Self::Item_Armor_EquipChain,
      "item.armor.equip_diamond" => Self::Item_Armor_EquipDiamond,
      "item.armor.equip_elytra" => Self::Item_Armor_EquipElytra,
      "item.armor.equip_generic" => Self::Item_Armor_EquipGeneric,
      "item.armor.equip_gold" => Self::Item_Armor_EquipGold,
      "item.armor.equip_iron" => Self::Item_Armor_EquipIron,
      "item.armor.equip_leather" => Self::Item_Armor_EquipLeather,
      "item.armor.equip_turtle" => Self::Item_Armor_EquipTurtle,
      "entity.armor_stand.break" => Self::Entity_ArmorStand_Break,
      "entity.armor_stand.fall" => Self::Entity_ArmorStand_Fall,
      "entity.armor_stand.hit" => Self::Entity_ArmorStand_Hit,
      "entity.armor_stand.place" => Self::Entity_ArmorStand_Place,
      "entity.arrow.hit" => Self::Entity_Arrow_Hit,
      "entity.arrow.hit_player" => Self::Entity_Arrow_HitPlayer,
      "entity.arrow.shoot" => Self::Entity_Arrow_Shoot,
      "item.axe.strip" => Self::Item_Axe_Strip,
      "block.bamboo.break" => Self::Block_Bamboo_Break,
      "block.bamboo.fall" => Self::Block_Bamboo_Fall,
      "block.bamboo.hit" => Self::Block_Bamboo_Hit,
      "block.bamboo.place" => Self::Block_Bamboo_Place,
      "block.bamboo.step" => Self::Block_Bamboo_Step,
      "block.bamboo_sapling.break" => Self::Block_BambooSapling_Break,
      "block.bamboo_sapling.hit" => Self::Block_BambooSapling_Hit,
      "block.bamboo_sapling.place" => Self::Block_BambooSapling_Place,
      "block.barrel.close" => Self::Block_Barrel_Close,
      "block.barrel.open" => Self::Block_Barrel_Open,
      "entity.bat.ambient" => Self::Entity_Bat_Ambient,
      "entity.bat.death" => Self::Entity_Bat_Death,
      "entity.bat.hurt" => Self::Entity_Bat_Hurt,
      "entity.bat.loop" => Self::Entity_Bat_Loop,
      "entity.bat.takeoff" => Self::Entity_Bat_Takeoff,
      "block.beacon.activate" => Self::Block_Beacon_Activate,
      "block.beacon.ambient" => Self::Block_Beacon_Ambient,
      "block.beacon.deactivate" => Self::Block_Beacon_Deactivate,
      "block.beacon.power_select" => Self::Block_Beacon_PowerSelect,
      "entity.bee.death" => Self::Entity_Bee_Death,
      "entity.bee.hurt" => Self::Entity_Bee_Hurt,
      "entity.bee.loop_aggressive" => Self::Entity_Bee_LoopAggressive,
      "entity.bee.loop" => Self::Entity_Bee_Loop,
      "entity.bee.sting" => Self::Entity_Bee_Sting,
      "entity.bee.pollinate" => Self::Entity_Bee_Pollinate,
      "block.beehive.drip" => Self::Block_Beehive_Drip,
      "block.beehive.enter" => Self::Block_Beehive_Enter,
      "block.beehive.exit" => Self::Block_Beehive_Exit,
      "block.beehive.shear" => Self::Block_Beehive_Shear,
      "block.beehive.work" => Self::Block_Beehive_Work,
      "block.bell.use" => Self::Block_Bell_Use,
      "block.bell.resonate" => Self::Block_Bell_Resonate,
      "entity.blaze.ambient" => Self::Entity_Blaze_Ambient,
      "entity.blaze.burn" => Self::Entity_Blaze_Burn,
      "entity.blaze.death" => Self::Entity_Blaze_Death,
      "entity.blaze.hurt" => Self::Entity_Blaze_Hurt,
      "entity.blaze.shoot" => Self::Entity_Blaze_Shoot,
      "entity.boat.paddle_land" => Self::Entity_Boat_PaddleLand,
      "entity.boat.paddle_water" => Self::Entity_Boat_PaddleWater,
      "item.book.page_turn" => Self::Item_Book_PageTurn,
      "item.book.put" => Self::Item_Book_Put,
      "entity.fishing_bobber.retrieve" => Self::Entity_FishingBobber_Retrieve,
      "entity.fishing_bobber.splash" => Self::Entity_FishingBobber_Splash,
      "entity.fishing_bobber.throw" => Self::Entity_FishingBobber_Throw,
      "block.blastfurnace.fire_crackle" => Self::Block_Blastfurnace_FireCrackle,
      "item.bottle.empty" => Self::Item_Bottle_Empty,
      "item.bottle.fill" => Self::Item_Bottle_Fill,
      "item.bottle.fill_dragonbreath" => Self::Item_Bottle_FillDragonbreath,
      "block.brewing_stand.brew" => Self::Block_BrewingStand_Brew,
      "block.bubble_column.bubble_pop" => Self::Block_BubbleColumn_BubblePop,
      "block.bubble_column.upwards_ambient" => Self::Block_BubbleColumn_UpwardsAmbient,
      "block.bubble_column.upwards_inside" => Self::Block_BubbleColumn_UpwardsInside,
      "block.bubble_column.whirlpool_ambient" => Self::Block_BubbleColumn_WhirlpoolAmbient,
      "block.bubble_column.whirlpool_inside" => Self::Block_BubbleColumn_WhirlpoolInside,
      "item.bucket.empty" => Self::Item_Bucket_Empty,
      "item.bucket.empty_fish" => Self::Item_Bucket_EmptyFish,
      "item.bucket.empty_lava" => Self::Item_Bucket_EmptyLava,
      "item.bucket.fill" => Self::Item_Bucket_Fill,
      "item.bucket.fill_fish" => Self::Item_Bucket_FillFish,
      "item.bucket.fill_lava" => Self::Item_Bucket_FillLava,
      "block.campfire.crackle" => Self::Block_Campfire_Crackle,
      "entity.cat.ambient" => Self::Entity_Cat_Ambient,
      "entity.cat.stray_ambient" => Self::Entity_Cat_StrayAmbient,
      "entity.cat.death" => Self::Entity_Cat_Death,
      "entity.cat.eat" => Self::Entity_Cat_Eat,
      "entity.cat.hiss" => Self::Entity_Cat_Hiss,
      "entity.cat.beg_for_food" => Self::Entity_Cat_BegForFood,
      "entity.cat.hurt" => Self::Entity_Cat_Hurt,
      "entity.cat.purr" => Self::Entity_Cat_Purr,
      "entity.cat.purreow" => Self::Entity_Cat_Purreow,
      "block.chest.close" => Self::Block_Chest_Close,
      "block.chest.locked" => Self::Block_Chest_Locked,
      "block.chest.open" => Self::Block_Chest_Open,
      "entity.chicken.ambient" => Self::Entity_Chicken_Ambient,
      "entity.chicken.death" => Self::Entity_Chicken_Death,
      "entity.chicken.egg" => Self::Entity_Chicken_Egg,
      "entity.chicken.hurt" => Self::Entity_Chicken_Hurt,
      "entity.chicken.step" => Self::Entity_Chicken_Step,
      "block.chorus_flower.death" => Self::Block_ChorusFlower_Death,
      "block.chorus_flower.grow" => Self::Block_ChorusFlower_Grow,
      "item.chorus_fruit.teleport" => Self::Item_ChorusFruit_Teleport,
      "block.wool.break" => Self::Block_Wool_Break,
      "block.wool.fall" => Self::Block_Wool_Fall,
      "block.wool.hit" => Self::Block_Wool_Hit,
      "block.wool.place" => Self::Block_Wool_Place,
      "block.wool.step" => Self::Block_Wool_Step,
      "entity.cod.ambient" => Self::Entity_Cod_Ambient,
      "entity.cod.death" => Self::Entity_Cod_Death,
      "entity.cod.flop" => Self::Entity_Cod_Flop,
      "entity.cod.hurt" => Self::Entity_Cod_Hurt,
      "block.comparator.click" => Self::Block_Comparator_Click,
      "block.composter.empty" => Self::Block_Composter_Empty,
      "block.composter.fill" => Self::Block_Composter_Fill,
      "block.composter.fill_success" => Self::Block_Composter_FillSuccess,
      "block.composter.ready" => Self::Block_Composter_Ready,
      "block.conduit.activate" => Self::Block_Conduit_Activate,
      "block.conduit.ambient" => Self::Block_Conduit_Ambient,
      "block.conduit.ambient.short" => Self::Block_Conduit_Ambient_Short,
      "block.conduit.attack.target" => Self::Block_Conduit_Attack_Target,
      "block.conduit.deactivate" => Self::Block_Conduit_Deactivate,
      "entity.cow.ambient" => Self::Entity_Cow_Ambient,
      "entity.cow.death" => Self::Entity_Cow_Death,
      "entity.cow.hurt" => Self::Entity_Cow_Hurt,
      "entity.cow.milk" => Self::Entity_Cow_Milk,
      "entity.cow.step" => Self::Entity_Cow_Step,
      "entity.creeper.death" => Self::Entity_Creeper_Death,
      "entity.creeper.hurt" => Self::Entity_Creeper_Hurt,
      "entity.creeper.primed" => Self::Entity_Creeper_Primed,
      "block.crop.break" => Self::Block_Crop_Break,
      "item.crop.plant" => Self::Item_Crop_Plant,
      "item.crossbow.hit" => Self::Item_Crossbow_Hit,
      "item.crossbow.loading_end" => Self::Item_Crossbow_LoadingEnd,
      "item.crossbow.loading_middle" => Self::Item_Crossbow_LoadingMiddle,
      "item.crossbow.loading_start" => Self::Item_Crossbow_LoadingStart,
      "item.crossbow.quick_charge_1" => Self::Item_Crossbow_QuickCharge1,
      "item.crossbow.quick_charge_2" => Self::Item_Crossbow_QuickCharge2,
      "item.crossbow.quick_charge_3" => Self::Item_Crossbow_QuickCharge3,
      "item.crossbow.shoot" => Self::Item_Crossbow_Shoot,
      "block.dispenser.dispense" => Self::Block_Dispenser_Dispense,
      "block.dispenser.fail" => Self::Block_Dispenser_Fail,
      "block.dispenser.launch" => Self::Block_Dispenser_Launch,
      "entity.dolphin.ambient" => Self::Entity_Dolphin_Ambient,
      "entity.dolphin.ambient_water" => Self::Entity_Dolphin_AmbientWater,
      "entity.dolphin.attack" => Self::Entity_Dolphin_Attack,
      "entity.dolphin.death" => Self::Entity_Dolphin_Death,
      "entity.dolphin.eat" => Self::Entity_Dolphin_Eat,
      "entity.dolphin.hurt" => Self::Entity_Dolphin_Hurt,
      "entity.dolphin.jump" => Self::Entity_Dolphin_Jump,
      "entity.dolphin.play" => Self::Entity_Dolphin_Play,
      "entity.dolphin.splash" => Self::Entity_Dolphin_Splash,
      "entity.dolphin.swim" => Self::Entity_Dolphin_Swim,
      "entity.donkey.ambient" => Self::Entity_Donkey_Ambient,
      "entity.donkey.angry" => Self::Entity_Donkey_Angry,
      "entity.donkey.chest" => Self::Entity_Donkey_Chest,
      "entity.donkey.death" => Self::Entity_Donkey_Death,
      "entity.donkey.hurt" => Self::Entity_Donkey_Hurt,
      "entity.drowned.ambient" => Self::Entity_Drowned_Ambient,
      "entity.drowned.ambient_water" => Self::Entity_Drowned_AmbientWater,
      "entity.drowned.death" => Self::Entity_Drowned_Death,
      "entity.drowned.death_water" => Self::Entity_Drowned_DeathWater,
      "entity.drowned.hurt" => Self::Entity_Drowned_Hurt,
      "entity.drowned.hurt_water" => Self::Entity_Drowned_HurtWater,
      "entity.drowned.shoot" => Self::Entity_Drowned_Shoot,
      "entity.drowned.step" => Self::Entity_Drowned_Step,
      "entity.drowned.swim" => Self::Entity_Drowned_Swim,
      "entity.egg.throw" => Self::Entity_Egg_Throw,
      "entity.elder_guardian.ambient" => Self::Entity_ElderGuardian_Ambient,
      "entity.elder_guardian.ambient_land" => Self::Entity_ElderGuardian_AmbientLand,
      "entity.elder_guardian.curse" => Self::Entity_ElderGuardian_Curse,
      "entity.elder_guardian.death" => Self::Entity_ElderGuardian_Death,
      "entity.elder_guardian.death_land" => Self::Entity_ElderGuardian_DeathLand,
      "entity.elder_guardian.flop" => Self::Entity_ElderGuardian_Flop,
      "entity.elder_guardian.hurt" => Self::Entity_ElderGuardian_Hurt,
      "entity.elder_guardian.hurt_land" => Self::Entity_ElderGuardian_HurtLand,
      "item.elytra.flying" => Self::Item_Elytra_Flying,
      "block.enchantment_table.use" => Self::Block_EnchantmentTable_Use,
      "block.ender_chest.close" => Self::Block_EnderChest_Close,
      "block.ender_chest.open" => Self::Block_EnderChest_Open,
      "entity.ender_dragon.ambient" => Self::Entity_EnderDragon_Ambient,
      "entity.ender_dragon.death" => Self::Entity_EnderDragon_Death,
      "entity.dragon_fireball.explode" => Self::Entity_DragonFireball_Explode,
      "entity.ender_dragon.flap" => Self::Entity_EnderDragon_Flap,
      "entity.ender_dragon.growl" => Self::Entity_EnderDragon_Growl,
      "entity.ender_dragon.hurt" => Self::Entity_EnderDragon_Hurt,
      "entity.ender_dragon.shoot" => Self::Entity_EnderDragon_Shoot,
      "entity.ender_eye.death" => Self::Entity_EnderEye_Death,
      "entity.ender_eye.launch" => Self::Entity_EnderEye_Launch,
      "entity.enderman.ambient" => Self::Entity_Enderman_Ambient,
      "entity.enderman.death" => Self::Entity_Enderman_Death,
      "entity.enderman.hurt" => Self::Entity_Enderman_Hurt,
      "entity.enderman.scream" => Self::Entity_Enderman_Scream,
      "entity.enderman.stare" => Self::Entity_Enderman_Stare,
      "entity.enderman.teleport" => Self::Entity_Enderman_Teleport,
      "entity.endermite.ambient" => Self::Entity_Endermite_Ambient,
      "entity.endermite.death" => Self::Entity_Endermite_Death,
      "entity.endermite.hurt" => Self::Entity_Endermite_Hurt,
      "entity.endermite.step" => Self::Entity_Endermite_Step,
      "entity.ender_pearl.throw" => Self::Entity_EnderPearl_Throw,
      "block.end_gateway.spawn" => Self::Block_EndGateway_Spawn,
      "block.end_portal_frame.fill" => Self::Block_EndPortalFrame_Fill,
      "block.end_portal.spawn" => Self::Block_EndPortal_Spawn,
      "entity.evoker.ambient" => Self::Entity_Evoker_Ambient,
      "entity.evoker.cast_spell" => Self::Entity_Evoker_CastSpell,
      "entity.evoker.celebrate" => Self::Entity_Evoker_Celebrate,
      "entity.evoker.death" => Self::Entity_Evoker_Death,
      "entity.evoker_fangs.attack" => Self::Entity_EvokerFangs_Attack,
      "entity.evoker.hurt" => Self::Entity_Evoker_Hurt,
      "entity.evoker.prepare_attack" => Self::Entity_Evoker_PrepareAttack,
      "entity.evoker.prepare_summon" => Self::Entity_Evoker_PrepareSummon,
      "entity.evoker.prepare_wololo" => Self::Entity_Evoker_PrepareWololo,
      "entity.experience_bottle.throw" => Self::Entity_ExperienceBottle_Throw,
      "entity.experience_orb.pickup" => Self::Entity_ExperienceOrb_Pickup,
      "block.fence_gate.close" => Self::Block_FenceGate_Close,
      "block.fence_gate.open" => Self::Block_FenceGate_Open,
      "item.firecharge.use" => Self::Item_Firecharge_Use,
      "entity.firework_rocket.blast" => Self::Entity_FireworkRocket_Blast,
      "entity.firework_rocket.blast_far" => Self::Entity_FireworkRocket_BlastFar,
      "entity.firework_rocket.large_blast" => Self::Entity_FireworkRocket_LargeBlast,
      "entity.firework_rocket.large_blast_far" => Self::Entity_FireworkRocket_LargeBlastFar,
      "entity.firework_rocket.launch" => Self::Entity_FireworkRocket_Launch,
      "entity.firework_rocket.shoot" => Self::Entity_FireworkRocket_Shoot,
      "entity.firework_rocket.twinkle" => Self::Entity_FireworkRocket_Twinkle,
      "entity.firework_rocket.twinkle_far" => Self::Entity_FireworkRocket_TwinkleFar,
      "block.fire.ambient" => Self::Block_Fire_Ambient,
      "block.fire.extinguish" => Self::Block_Fire_Extinguish,
      "entity.fish.swim" => Self::Entity_Fish_Swim,
      "item.flintandsteel.use" => Self::Item_Flintandsteel_Use,
      "entity.fox.aggro" => Self::Entity_Fox_Aggro,
      "entity.fox.ambient" => Self::Entity_Fox_Ambient,
      "entity.fox.bite" => Self::Entity_Fox_Bite,
      "entity.fox.death" => Self::Entity_Fox_Death,
      "entity.fox.eat" => Self::Entity_Fox_Eat,
      "entity.fox.hurt" => Self::Entity_Fox_Hurt,
      "entity.fox.screech" => Self::Entity_Fox_Screech,
      "entity.fox.sleep" => Self::Entity_Fox_Sleep,
      "entity.fox.sniff" => Self::Entity_Fox_Sniff,
      "entity.fox.spit" => Self::Entity_Fox_Spit,
      "block.furnace.fire_crackle" => Self::Block_Furnace_FireCrackle,
      "entity.generic.big_fall" => Self::Entity_Generic_BigFall,
      "entity.generic.burn" => Self::Entity_Generic_Burn,
      "entity.generic.death" => Self::Entity_Generic_Death,
      "entity.generic.drink" => Self::Entity_Generic_Drink,
      "entity.generic.eat" => Self::Entity_Generic_Eat,
      "entity.generic.explode" => Self::Entity_Generic_Explode,
      "entity.generic.extinguish_fire" => Self::Entity_Generic_ExtinguishFire,
      "entity.generic.hurt" => Self::Entity_Generic_Hurt,
      "entity.generic.small_fall" => Self::Entity_Generic_SmallFall,
      "entity.generic.splash" => Self::Entity_Generic_Splash,
      "entity.generic.swim" => Self::Entity_Generic_Swim,
      "entity.ghast.ambient" => Self::Entity_Ghast_Ambient,
      "entity.ghast.death" => Self::Entity_Ghast_Death,
      "entity.ghast.hurt" => Self::Entity_Ghast_Hurt,
      "entity.ghast.scream" => Self::Entity_Ghast_Scream,
      "entity.ghast.shoot" => Self::Entity_Ghast_Shoot,
      "entity.ghast.warn" => Self::Entity_Ghast_Warn,
      "block.glass.break" => Self::Block_Glass_Break,
      "block.glass.fall" => Self::Block_Glass_Fall,
      "block.glass.hit" => Self::Block_Glass_Hit,
      "block.glass.place" => Self::Block_Glass_Place,
      "block.glass.step" => Self::Block_Glass_Step,
      "block.grass.break" => Self::Block_Grass_Break,
      "block.grass.fall" => Self::Block_Grass_Fall,
      "block.grass.hit" => Self::Block_Grass_Hit,
      "block.grass.place" => Self::Block_Grass_Place,
      "block.grass.step" => Self::Block_Grass_Step,
      "block.wet_grass.break" => Self::Block_WetGrass_Break,
      "block.wet_grass.fall" => Self::Block_WetGrass_Fall,
      "block.wet_grass.hit" => Self::Block_WetGrass_Hit,
      "block.wet_grass.place" => Self::Block_WetGrass_Place,
      "block.wet_grass.step" => Self::Block_WetGrass_Step,
      "block.coral_block.break" => Self::Block_CoralBlock_Break,
      "block.coral_block.fall" => Self::Block_CoralBlock_Fall,
      "block.coral_block.hit" => Self::Block_CoralBlock_Hit,
      "block.coral_block.place" => Self::Block_CoralBlock_Place,
      "block.coral_block.step" => Self::Block_CoralBlock_Step,
      "block.gravel.break" => Self::Block_Gravel_Break,
      "block.gravel.fall" => Self::Block_Gravel_Fall,
      "block.gravel.hit" => Self::Block_Gravel_Hit,
      "block.gravel.place" => Self::Block_Gravel_Place,
      "block.gravel.step" => Self::Block_Gravel_Step,
      "block.grindstone.use" => Self::Block_Grindstone_Use,
      "entity.guardian.ambient" => Self::Entity_Guardian_Ambient,
      "entity.guardian.ambient_land" => Self::Entity_Guardian_AmbientLand,
      "entity.guardian.attack" => Self::Entity_Guardian_Attack,
      "entity.guardian.death" => Self::Entity_Guardian_Death,
      "entity.guardian.death_land" => Self::Entity_Guardian_DeathLand,
      "entity.guardian.flop" => Self::Entity_Guardian_Flop,
      "entity.guardian.hurt" => Self::Entity_Guardian_Hurt,
      "entity.guardian.hurt_land" => Self::Entity_Guardian_HurtLand,
      "item.hoe.till" => Self::Item_Hoe_Till,
      "block.honey_block.break" => Self::Block_HoneyBlock_Break,
      "block.honey_block.fall" => Self::Block_HoneyBlock_Fall,
      "block.honey_block.hit" => Self::Block_HoneyBlock_Hit,
      "block.honey_block.place" => Self::Block_HoneyBlock_Place,
      "block.honey_block.slide" => Self::Block_HoneyBlock_Slide,
      "block.honey_block.step" => Self::Block_HoneyBlock_Step,
      "item.honey_bottle.drink" => Self::Item_HoneyBottle_Drink,
      "entity.horse.ambient" => Self::Entity_Horse_Ambient,
      "entity.horse.angry" => Self::Entity_Horse_Angry,
      "entity.horse.armor" => Self::Entity_Horse_Armor,
      "entity.horse.breathe" => Self::Entity_Horse_Breathe,
      "entity.horse.death" => Self::Entity_Horse_Death,
      "entity.horse.eat" => Self::Entity_Horse_Eat,
      "entity.horse.gallop" => Self::Entity_Horse_Gallop,
      "entity.horse.hurt" => Self::Entity_Horse_Hurt,
      "entity.horse.jump" => Self::Entity_Horse_Jump,
      "entity.horse.land" => Self::Entity_Horse_Land,
      "entity.horse.saddle" => Self::Entity_Horse_Saddle,
      "entity.horse.step" => Self::Entity_Horse_Step,
      "entity.horse.step_wood" => Self::Entity_Horse_StepWood,
      "entity.hostile.big_fall" => Self::Entity_Hostile_BigFall,
      "entity.hostile.death" => Self::Entity_Hostile_Death,
      "entity.hostile.hurt" => Self::Entity_Hostile_Hurt,
      "entity.hostile.small_fall" => Self::Entity_Hostile_SmallFall,
      "entity.hostile.splash" => Self::Entity_Hostile_Splash,
      "entity.hostile.swim" => Self::Entity_Hostile_Swim,
      "entity.husk.ambient" => Self::Entity_Husk_Ambient,
      "entity.husk.converted_to_zombie" => Self::Entity_Husk_ConvertedToZombie,
      "entity.husk.death" => Self::Entity_Husk_Death,
      "entity.husk.hurt" => Self::Entity_Husk_Hurt,
      "entity.husk.step" => Self::Entity_Husk_Step,
      "entity.ravager.ambient" => Self::Entity_Ravager_Ambient,
      "entity.ravager.attack" => Self::Entity_Ravager_Attack,
      "entity.ravager.celebrate" => Self::Entity_Ravager_Celebrate,
      "entity.ravager.death" => Self::Entity_Ravager_Death,
      "entity.ravager.hurt" => Self::Entity_Ravager_Hurt,
      "entity.ravager.step" => Self::Entity_Ravager_Step,
      "entity.ravager.stunned" => Self::Entity_Ravager_Stunned,
      "entity.ravager.roar" => Self::Entity_Ravager_Roar,
      "entity.illusioner.ambient" => Self::Entity_Illusioner_Ambient,
      "entity.illusioner.cast_spell" => Self::Entity_Illusioner_CastSpell,
      "entity.illusioner.death" => Self::Entity_Illusioner_Death,
      "entity.illusioner.hurt" => Self::Entity_Illusioner_Hurt,
      "entity.illusioner.mirror_move" => Self::Entity_Illusioner_MirrorMove,
      "entity.illusioner.prepare_blindness" => Self::Entity_Illusioner_PrepareBlindness,
      "entity.illusioner.prepare_mirror" => Self::Entity_Illusioner_PrepareMirror,
      "block.iron_door.close" => Self::Block_IronDoor_Close,
      "block.iron_door.open" => Self::Block_IronDoor_Open,
      "entity.iron_golem.attack" => Self::Entity_IronGolem_Attack,
      "entity.iron_golem.damage" => Self::Entity_IronGolem_Damage,
      "entity.iron_golem.death" => Self::Entity_IronGolem_Death,
      "entity.iron_golem.hurt" => Self::Entity_IronGolem_Hurt,
      "entity.iron_golem.repair" => Self::Entity_IronGolem_Repair,
      "entity.iron_golem.step" => Self::Entity_IronGolem_Step,
      "block.iron_trapdoor.close" => Self::Block_IronTrapdoor_Close,
      "block.iron_trapdoor.open" => Self::Block_IronTrapdoor_Open,
      "entity.item_frame.add_item" => Self::Entity_ItemFrame_AddItem,
      "entity.item_frame.break" => Self::Entity_ItemFrame_Break,
      "entity.item_frame.place" => Self::Entity_ItemFrame_Place,
      "entity.item_frame.remove_item" => Self::Entity_ItemFrame_RemoveItem,
      "entity.item_frame.rotate_item" => Self::Entity_ItemFrame_RotateItem,
      "entity.item.break" => Self::Entity_Item_Break,
      "entity.item.pickup" => Self::Entity_Item_Pickup,
      "block.ladder.break" => Self::Block_Ladder_Break,
      "block.ladder.fall" => Self::Block_Ladder_Fall,
      "block.ladder.hit" => Self::Block_Ladder_Hit,
      "block.ladder.place" => Self::Block_Ladder_Place,
      "block.ladder.step" => Self::Block_Ladder_Step,
      "block.lantern.break" => Self::Block_Lantern_Break,
      "block.lantern.fall" => Self::Block_Lantern_Fall,
      "block.lantern.hit" => Self::Block_Lantern_Hit,
      "block.lantern.place" => Self::Block_Lantern_Place,
      "block.lantern.step" => Self::Block_Lantern_Step,
      "block.lava.ambient" => Self::Block_Lava_Ambient,
      "block.lava.extinguish" => Self::Block_Lava_Extinguish,
      "block.lava.pop" => Self::Block_Lava_Pop,
      "entity.leash_knot.break" => Self::Entity_LeashKnot_Break,
      "entity.leash_knot.place" => Self::Entity_LeashKnot_Place,
      "block.lever.click" => Self::Block_Lever_Click,
      "entity.lightning_bolt.impact" => Self::Entity_LightningBolt_Impact,
      "entity.lightning_bolt.thunder" => Self::Entity_LightningBolt_Thunder,
      "entity.lingering_potion.throw" => Self::Entity_LingeringPotion_Throw,
      "entity.llama.ambient" => Self::Entity_Llama_Ambient,
      "entity.llama.angry" => Self::Entity_Llama_Angry,
      "entity.llama.chest" => Self::Entity_Llama_Chest,
      "entity.llama.death" => Self::Entity_Llama_Death,
      "entity.llama.eat" => Self::Entity_Llama_Eat,
      "entity.llama.hurt" => Self::Entity_Llama_Hurt,
      "entity.llama.spit" => Self::Entity_Llama_Spit,
      "entity.llama.step" => Self::Entity_Llama_Step,
      "entity.llama.swag" => Self::Entity_Llama_Swag,
      "entity.magma_cube.death" => Self::Entity_MagmaCube_Death,
      "entity.magma_cube.hurt" => Self::Entity_MagmaCube_Hurt,
      "entity.magma_cube.jump" => Self::Entity_MagmaCube_Jump,
      "entity.magma_cube.squish" => Self::Entity_MagmaCube_Squish,
      "block.metal.break" => Self::Block_Metal_Break,
      "block.metal.fall" => Self::Block_Metal_Fall,
      "block.metal.hit" => Self::Block_Metal_Hit,
      "block.metal.place" => Self::Block_Metal_Place,
      "block.metal_pressure_plate.click_off" => Self::Block_MetalPressurePlate_ClickOff,
      "block.metal_pressure_plate.click_on" => Self::Block_MetalPressurePlate_ClickOn,
      "block.metal.step" => Self::Block_Metal_Step,
      "entity.minecart.inside" => Self::Entity_Minecart_Inside,
      "entity.minecart.riding" => Self::Entity_Minecart_Riding,
      "entity.mooshroom.convert" => Self::Entity_Mooshroom_Convert,
      "entity.mooshroom.eat" => Self::Entity_Mooshroom_Eat,
      "entity.mooshroom.milk" => Self::Entity_Mooshroom_Milk,
      "entity.mooshroom.suspicious_milk" => Self::Entity_Mooshroom_SuspiciousMilk,
      "entity.mooshroom.shear" => Self::Entity_Mooshroom_Shear,
      "entity.mule.ambient" => Self::Entity_Mule_Ambient,
      "entity.mule.chest" => Self::Entity_Mule_Chest,
      "entity.mule.death" => Self::Entity_Mule_Death,
      "entity.mule.hurt" => Self::Entity_Mule_Hurt,
      "music.creative" => Self::Music_Creative,
      "music.credits" => Self::Music_Credits,
      "music.dragon" => Self::Music_Dragon,
      "music.end" => Self::Music_End,
      "music.game" => Self::Music_Game,
      "music.menu" => Self::Music_Menu,
      "music.nether" => Self::Music_Nether,
      "music.under_water" => Self::Music_UnderWater,
      "block.nether_wart.break" => Self::Block_NetherWart_Break,
      "item.nether_wart.plant" => Self::Item_NetherWart_Plant,
      "block.note_block.basedrum" => Self::Block_NoteBlock_Basedrum,
      "block.note_block.bass" => Self::Block_NoteBlock_Bass,
      "block.note_block.bell" => Self::Block_NoteBlock_Bell,
      "block.note_block.chime" => Self::Block_NoteBlock_Chime,
      "block.note_block.flute" => Self::Block_NoteBlock_Flute,
      "block.note_block.guitar" => Self::Block_NoteBlock_Guitar,
      "block.note_block.harp" => Self::Block_NoteBlock_Harp,
      "block.note_block.hat" => Self::Block_NoteBlock_Hat,
      "block.note_block.pling" => Self::Block_NoteBlock_Pling,
      "block.note_block.snare" => Self::Block_NoteBlock_Snare,
      "block.note_block.xylophone" => Self::Block_NoteBlock_Xylophone,
      "block.note_block.iron_xylophone" => Self::Block_NoteBlock_IronXylophone,
      "block.note_block.cow_bell" => Self::Block_NoteBlock_CowBell,
      "block.note_block.didgeridoo" => Self::Block_NoteBlock_Didgeridoo,
      "block.note_block.bit" => Self::Block_NoteBlock_Bit,
      "block.note_block.banjo" => Self::Block_NoteBlock_Banjo,
      "entity.ocelot.hurt" => Self::Entity_Ocelot_Hurt,
      "entity.ocelot.ambient" => Self::Entity_Ocelot_Ambient,
      "entity.ocelot.death" => Self::Entity_Ocelot_Death,
      "entity.painting.break" => Self::Entity_Painting_Break,
      "entity.painting.place" => Self::Entity_Painting_Place,
      "entity.panda.pre_sneeze" => Self::Entity_Panda_PreSneeze,
      "entity.panda.sneeze" => Self::Entity_Panda_Sneeze,
      "entity.panda.ambient" => Self::Entity_Panda_Ambient,
      "entity.panda.death" => Self::Entity_Panda_Death,
      "entity.panda.eat" => Self::Entity_Panda_Eat,
      "entity.panda.step" => Self::Entity_Panda_Step,
      "entity.panda.cant_breed" => Self::Entity_Panda_CantBreed,
      "entity.panda.aggressive_ambient" => Self::Entity_Panda_AggressiveAmbient,
      "entity.panda.worried_ambient" => Self::Entity_Panda_WorriedAmbient,
      "entity.panda.hurt" => Self::Entity_Panda_Hurt,
      "entity.panda.bite" => Self::Entity_Panda_Bite,
      "entity.parrot.ambient" => Self::Entity_Parrot_Ambient,
      "entity.parrot.death" => Self::Entity_Parrot_Death,
      "entity.parrot.eat" => Self::Entity_Parrot_Eat,
      "entity.parrot.fly" => Self::Entity_Parrot_Fly,
      "entity.parrot.hurt" => Self::Entity_Parrot_Hurt,
      "entity.parrot.imitate.blaze" => Self::Entity_Parrot_Imitate_Blaze,
      "entity.parrot.imitate.creeper" => Self::Entity_Parrot_Imitate_Creeper,
      "entity.parrot.imitate.drowned" => Self::Entity_Parrot_Imitate_Drowned,
      "entity.parrot.imitate.elder_guardian" => Self::Entity_Parrot_Imitate_ElderGuardian,
      "entity.parrot.imitate.ender_dragon" => Self::Entity_Parrot_Imitate_EnderDragon,
      "entity.parrot.imitate.endermite" => Self::Entity_Parrot_Imitate_Endermite,
      "entity.parrot.imitate.evoker" => Self::Entity_Parrot_Imitate_Evoker,
      "entity.parrot.imitate.ghast" => Self::Entity_Parrot_Imitate_Ghast,
      "entity.parrot.imitate.guardian" => Self::Entity_Parrot_Imitate_Guardian,
      "entity.parrot.imitate.husk" => Self::Entity_Parrot_Imitate_Husk,
      "entity.parrot.imitate.illusioner" => Self::Entity_Parrot_Imitate_Illusioner,
      "entity.parrot.imitate.magma_cube" => Self::Entity_Parrot_Imitate_MagmaCube,
      "entity.parrot.imitate.phantom" => Self::Entity_Parrot_Imitate_Phantom,
      "entity.parrot.imitate.pillager" => Self::Entity_Parrot_Imitate_Pillager,
      "entity.parrot.imitate.ravager" => Self::Entity_Parrot_Imitate_Ravager,
      "entity.parrot.imitate.shulker" => Self::Entity_Parrot_Imitate_Shulker,
      "entity.parrot.imitate.silverfish" => Self::Entity_Parrot_Imitate_Silverfish,
      "entity.parrot.imitate.skeleton" => Self::Entity_Parrot_Imitate_Skeleton,
      "entity.parrot.imitate.slime" => Self::Entity_Parrot_Imitate_Slime,
      "entity.parrot.imitate.spider" => Self::Entity_Parrot_Imitate_Spider,
      "entity.parrot.imitate.stray" => Self::Entity_Parrot_Imitate_Stray,
      "entity.parrot.imitate.vex" => Self::Entity_Parrot_Imitate_Vex,
      "entity.parrot.imitate.vindicator" => Self::Entity_Parrot_Imitate_Vindicator,
      "entity.parrot.imitate.witch" => Self::Entity_Parrot_Imitate_Witch,
      "entity.parrot.imitate.wither" => Self::Entity_Parrot_Imitate_Wither,
      "entity.parrot.imitate.wither_skeleton" => Self::Entity_Parrot_Imitate_WitherSkeleton,
      "entity.parrot.imitate.zombie" => Self::Entity_Parrot_Imitate_Zombie,
      "entity.parrot.imitate.zombie_villager" => Self::Entity_Parrot_Imitate_ZombieVillager,
      "entity.parrot.step" => Self::Entity_Parrot_Step,
      "entity.phantom.ambient" => Self::Entity_Phantom_Ambient,
      "entity.phantom.bite" => Self::Entity_Phantom_Bite,
      "entity.phantom.death" => Self::Entity_Phantom_Death,
      "entity.phantom.flap" => Self::Entity_Phantom_Flap,
      "entity.phantom.hurt" => Self::Entity_Phantom_Hurt,
      "entity.phantom.swoop" => Self::Entity_Phantom_Swoop,
      "entity.pig.ambient" => Self::Entity_Pig_Ambient,
      "entity.pig.death" => Self::Entity_Pig_Death,
      "entity.pig.hurt" => Self::Entity_Pig_Hurt,
      "entity.pig.saddle" => Self::Entity_Pig_Saddle,
      "entity.pig.step" => Self::Entity_Pig_Step,
      "entity.pillager.ambient" => Self::Entity_Pillager_Ambient,
      "entity.pillager.celebrate" => Self::Entity_Pillager_Celebrate,
      "entity.pillager.death" => Self::Entity_Pillager_Death,
      "entity.pillager.hurt" => Self::Entity_Pillager_Hurt,
      "block.piston.contract" => Self::Block_Piston_Contract,
      "block.piston.extend" => Self::Block_Piston_Extend,
      "entity.player.attack.crit" => Self::Entity_Player_Attack_Crit,
      "entity.player.attack.knockback" => Self::Entity_Player_Attack_Knockback,
      "entity.player.attack.nodamage" => Self::Entity_Player_Attack_Nodamage,
      "entity.player.attack.strong" => Self::Entity_Player_Attack_Strong,
      "entity.player.attack.sweep" => Self::Entity_Player_Attack_Sweep,
      "entity.player.attack.weak" => Self::Entity_Player_Attack_Weak,
      "entity.player.big_fall" => Self::Entity_Player_BigFall,
      "entity.player.breath" => Self::Entity_Player_Breath,
      "entity.player.burp" => Self::Entity_Player_Burp,
      "entity.player.death" => Self::Entity_Player_Death,
      "entity.player.hurt" => Self::Entity_Player_Hurt,
      "entity.player.hurt_drown" => Self::Entity_Player_HurtDrown,
      "entity.player.hurt_on_fire" => Self::Entity_Player_HurtOnFire,
      "entity.player.hurt_sweet_berry_bush" => Self::Entity_Player_HurtSweetBerryBush,
      "entity.player.levelup" => Self::Entity_Player_Levelup,
      "entity.player.small_fall" => Self::Entity_Player_SmallFall,
      "entity.player.splash" => Self::Entity_Player_Splash,
      "entity.player.splash.high_speed" => Self::Entity_Player_Splash_HighSpeed,
      "entity.player.swim" => Self::Entity_Player_Swim,
      "entity.polar_bear.ambient" => Self::Entity_PolarBear_Ambient,
      "entity.polar_bear.ambient_baby" => Self::Entity_PolarBear_AmbientBaby,
      "entity.polar_bear.death" => Self::Entity_PolarBear_Death,
      "entity.polar_bear.hurt" => Self::Entity_PolarBear_Hurt,
      "entity.polar_bear.step" => Self::Entity_PolarBear_Step,
      "entity.polar_bear.warning" => Self::Entity_PolarBear_Warning,
      "block.portal.ambient" => Self::Block_Portal_Ambient,
      "block.portal.travel" => Self::Block_Portal_Travel,
      "block.portal.trigger" => Self::Block_Portal_Trigger,
      "entity.puffer_fish.ambient" => Self::Entity_PufferFish_Ambient,
      "entity.puffer_fish.blow_out" => Self::Entity_PufferFish_BlowOut,
      "entity.puffer_fish.blow_up" => Self::Entity_PufferFish_BlowUp,
      "entity.puffer_fish.death" => Self::Entity_PufferFish_Death,
      "entity.puffer_fish.flop" => Self::Entity_PufferFish_Flop,
      "entity.puffer_fish.hurt" => Self::Entity_PufferFish_Hurt,
      "entity.puffer_fish.sting" => Self::Entity_PufferFish_Sting,
      "block.pumpkin.carve" => Self::Block_Pumpkin_Carve,
      "entity.rabbit.ambient" => Self::Entity_Rabbit_Ambient,
      "entity.rabbit.attack" => Self::Entity_Rabbit_Attack,
      "entity.rabbit.death" => Self::Entity_Rabbit_Death,
      "entity.rabbit.hurt" => Self::Entity_Rabbit_Hurt,
      "entity.rabbit.jump" => Self::Entity_Rabbit_Jump,
      "event.raid.horn" => Self::Event_Raid_Horn,
      "music_disc.11" => Self::MusicDisc_11,
      "music_disc.13" => Self::MusicDisc_13,
      "music_disc.blocks" => Self::MusicDisc_Blocks,
      "music_disc.cat" => Self::MusicDisc_Cat,
      "music_disc.chirp" => Self::MusicDisc_Chirp,
      "music_disc.far" => Self::MusicDisc_Far,
      "music_disc.mall" => Self::MusicDisc_Mall,
      "music_disc.mellohi" => Self::MusicDisc_Mellohi,
      "music_disc.stal" => Self::MusicDisc_Stal,
      "music_disc.strad" => Self::MusicDisc_Strad,
      "music_disc.wait" => Self::MusicDisc_Wait,
      "music_disc.ward" => Self::MusicDisc_Ward,
      "block.redstone_torch.burnout" => Self::Block_RedstoneTorch_Burnout,
      "entity.salmon.ambient" => Self::Entity_Salmon_Ambient,
      "entity.salmon.death" => Self::Entity_Salmon_Death,
      "entity.salmon.flop" => Self::Entity_Salmon_Flop,
      "entity.salmon.hurt" => Self::Entity_Salmon_Hurt,
      "block.sand.break" => Self::Block_Sand_Break,
      "block.sand.fall" => Self::Block_Sand_Fall,
      "block.sand.hit" => Self::Block_Sand_Hit,
      "block.sand.place" => Self::Block_Sand_Place,
      "block.sand.step" => Self::Block_Sand_Step,
      "block.scaffolding.break" => Self::Block_Scaffolding_Break,
      "block.scaffolding.fall" => Self::Block_Scaffolding_Fall,
      "block.scaffolding.hit" => Self::Block_Scaffolding_Hit,
      "block.scaffolding.place" => Self::Block_Scaffolding_Place,
      "block.scaffolding.step" => Self::Block_Scaffolding_Step,
      "entity.sheep.ambient" => Self::Entity_Sheep_Ambient,
      "entity.sheep.death" => Self::Entity_Sheep_Death,
      "entity.sheep.hurt" => Self::Entity_Sheep_Hurt,
      "entity.sheep.shear" => Self::Entity_Sheep_Shear,
      "entity.sheep.step" => Self::Entity_Sheep_Step,
      "item.shield.block" => Self::Item_Shield_Block,
      "item.shield.break" => Self::Item_Shield_Break,
      "item.shovel.flatten" => Self::Item_Shovel_Flatten,
      "entity.shulker.ambient" => Self::Entity_Shulker_Ambient,
      "block.shulker_box.close" => Self::Block_ShulkerBox_Close,
      "block.shulker_box.open" => Self::Block_ShulkerBox_Open,
      "entity.shulker_bullet.hit" => Self::Entity_ShulkerBullet_Hit,
      "entity.shulker_bullet.hurt" => Self::Entity_ShulkerBullet_Hurt,
      "entity.shulker.close" => Self::Entity_Shulker_Close,
      "entity.shulker.death" => Self::Entity_Shulker_Death,
      "entity.shulker.hurt" => Self::Entity_Shulker_Hurt,
      "entity.shulker.hurt_closed" => Self::Entity_Shulker_HurtClosed,
      "entity.shulker.open" => Self::Entity_Shulker_Open,
      "entity.shulker.shoot" => Self::Entity_Shulker_Shoot,
      "entity.shulker.teleport" => Self::Entity_Shulker_Teleport,
      "entity.silverfish.ambient" => Self::Entity_Silverfish_Ambient,
      "entity.silverfish.death" => Self::Entity_Silverfish_Death,
      "entity.silverfish.hurt" => Self::Entity_Silverfish_Hurt,
      "entity.silverfish.step" => Self::Entity_Silverfish_Step,
      "entity.skeleton.ambient" => Self::Entity_Skeleton_Ambient,
      "entity.skeleton.death" => Self::Entity_Skeleton_Death,
      "entity.skeleton_horse.ambient" => Self::Entity_SkeletonHorse_Ambient,
      "entity.skeleton_horse.death" => Self::Entity_SkeletonHorse_Death,
      "entity.skeleton_horse.hurt" => Self::Entity_SkeletonHorse_Hurt,
      "entity.skeleton_horse.swim" => Self::Entity_SkeletonHorse_Swim,
      "entity.skeleton_horse.ambient_water" => Self::Entity_SkeletonHorse_AmbientWater,
      "entity.skeleton_horse.gallop_water" => Self::Entity_SkeletonHorse_GallopWater,
      "entity.skeleton_horse.jump_water" => Self::Entity_SkeletonHorse_JumpWater,
      "entity.skeleton_horse.step_water" => Self::Entity_SkeletonHorse_StepWater,
      "entity.skeleton.hurt" => Self::Entity_Skeleton_Hurt,
      "entity.skeleton.shoot" => Self::Entity_Skeleton_Shoot,
      "entity.skeleton.step" => Self::Entity_Skeleton_Step,
      "entity.slime.attack" => Self::Entity_Slime_Attack,
      "entity.slime.death" => Self::Entity_Slime_Death,
      "entity.slime.hurt" => Self::Entity_Slime_Hurt,
      "entity.slime.jump" => Self::Entity_Slime_Jump,
      "entity.slime.squish" => Self::Entity_Slime_Squish,
      "block.slime_block.break" => Self::Block_SlimeBlock_Break,
      "block.slime_block.fall" => Self::Block_SlimeBlock_Fall,
      "block.slime_block.hit" => Self::Block_SlimeBlock_Hit,
      "block.slime_block.place" => Self::Block_SlimeBlock_Place,
      "block.slime_block.step" => Self::Block_SlimeBlock_Step,
      "entity.magma_cube.death_small" => Self::Entity_MagmaCube_DeathSmall,
      "entity.magma_cube.hurt_small" => Self::Entity_MagmaCube_HurtSmall,
      "entity.magma_cube.squish_small" => Self::Entity_MagmaCube_SquishSmall,
      "entity.slime.death_small" => Self::Entity_Slime_DeathSmall,
      "entity.slime.hurt_small" => Self::Entity_Slime_HurtSmall,
      "entity.slime.jump_small" => Self::Entity_Slime_JumpSmall,
      "entity.slime.squish_small" => Self::Entity_Slime_SquishSmall,
      "block.smoker.smoke" => Self::Block_Smoker_Smoke,
      "entity.snowball.throw" => Self::Entity_Snowball_Throw,
      "block.snow.break" => Self::Block_Snow_Break,
      "block.snow.fall" => Self::Block_Snow_Fall,
      "entity.snow_golem.ambient" => Self::Entity_SnowGolem_Ambient,
      "entity.snow_golem.death" => Self::Entity_SnowGolem_Death,
      "entity.snow_golem.hurt" => Self::Entity_SnowGolem_Hurt,
      "entity.snow_golem.shoot" => Self::Entity_SnowGolem_Shoot,
      "block.snow.hit" => Self::Block_Snow_Hit,
      "block.snow.place" => Self::Block_Snow_Place,
      "block.snow.step" => Self::Block_Snow_Step,
      "entity.spider.ambient" => Self::Entity_Spider_Ambient,
      "entity.spider.death" => Self::Entity_Spider_Death,
      "entity.spider.hurt" => Self::Entity_Spider_Hurt,
      "entity.spider.step" => Self::Entity_Spider_Step,
      "entity.splash_potion.break" => Self::Entity_SplashPotion_Break,
      "entity.splash_potion.throw" => Self::Entity_SplashPotion_Throw,
      "entity.squid.ambient" => Self::Entity_Squid_Ambient,
      "entity.squid.death" => Self::Entity_Squid_Death,
      "entity.squid.hurt" => Self::Entity_Squid_Hurt,
      "entity.squid.squirt" => Self::Entity_Squid_Squirt,
      "block.stone.break" => Self::Block_Stone_Break,
      "block.stone_button.click_off" => Self::Block_StoneButton_ClickOff,
      "block.stone_button.click_on" => Self::Block_StoneButton_ClickOn,
      "block.stone.fall" => Self::Block_Stone_Fall,
      "block.stone.hit" => Self::Block_Stone_Hit,
      "block.stone.place" => Self::Block_Stone_Place,
      "block.stone_pressure_plate.click_off" => Self::Block_StonePressurePlate_ClickOff,
      "block.stone_pressure_plate.click_on" => Self::Block_StonePressurePlate_ClickOn,
      "block.stone.step" => Self::Block_Stone_Step,
      "entity.stray.ambient" => Self::Entity_Stray_Ambient,
      "entity.stray.death" => Self::Entity_Stray_Death,
      "entity.stray.hurt" => Self::Entity_Stray_Hurt,
      "entity.stray.step" => Self::Entity_Stray_Step,
      "block.sweet_berry_bush.break" => Self::Block_SweetBerryBush_Break,
      "block.sweet_berry_bush.place" => Self::Block_SweetBerryBush_Place,
      "item.sweet_berries.pick_from_bush" => Self::Item_SweetBerries_PickFromBush,
      "enchant.thorns.hit" => Self::Enchant_Thorns_Hit,
      "entity.tnt.primed" => Self::Entity_Tnt_Primed,
      "item.totem.use" => Self::Item_Totem_Use,
      "item.trident.hit" => Self::Item_Trident_Hit,
      "item.trident.hit_ground" => Self::Item_Trident_HitGround,
      "item.trident.return" => Self::Item_Trident_Return,
      "item.trident.riptide_1" => Self::Item_Trident_Riptide1,
      "item.trident.riptide_2" => Self::Item_Trident_Riptide2,
      "item.trident.riptide_3" => Self::Item_Trident_Riptide3,
      "item.trident.throw" => Self::Item_Trident_Throw,
      "item.trident.thunder" => Self::Item_Trident_Thunder,
      "block.tripwire.attach" => Self::Block_Tripwire_Attach,
      "block.tripwire.click_off" => Self::Block_Tripwire_ClickOff,
      "block.tripwire.click_on" => Self::Block_Tripwire_ClickOn,
      "block.tripwire.detach" => Self::Block_Tripwire_Detach,
      "entity.tropical_fish.ambient" => Self::Entity_TropicalFish_Ambient,
      "entity.tropical_fish.death" => Self::Entity_TropicalFish_Death,
      "entity.tropical_fish.flop" => Self::Entity_TropicalFish_Flop,
      "entity.tropical_fish.hurt" => Self::Entity_TropicalFish_Hurt,
      "entity.turtle.ambient_land" => Self::Entity_Turtle_AmbientLand,
      "entity.turtle.death" => Self::Entity_Turtle_Death,
      "entity.turtle.death_baby" => Self::Entity_Turtle_DeathBaby,
      "entity.turtle.egg_break" => Self::Entity_Turtle_EggBreak,
      "entity.turtle.egg_crack" => Self::Entity_Turtle_EggCrack,
      "entity.turtle.egg_hatch" => Self::Entity_Turtle_EggHatch,
      "entity.turtle.hurt" => Self::Entity_Turtle_Hurt,
      "entity.turtle.hurt_baby" => Self::Entity_Turtle_HurtBaby,
      "entity.turtle.lay_egg" => Self::Entity_Turtle_LayEgg,
      "entity.turtle.shamble" => Self::Entity_Turtle_Shamble,
      "entity.turtle.shamble_baby" => Self::Entity_Turtle_ShambleBaby,
      "entity.turtle.swim" => Self::Entity_Turtle_Swim,
      "ui.button.click" => Self::Ui_Button_Click,
      "ui.loom.select_pattern" => Self::Ui_Loom_SelectPattern,
      "ui.loom.take_result" => Self::Ui_Loom_TakeResult,
      "ui.cartography_table.take_result" => Self::Ui_CartographyTable_TakeResult,
      "ui.stonecutter.take_result" => Self::Ui_Stonecutter_TakeResult,
      "ui.stonecutter.select_recipe" => Self::Ui_Stonecutter_SelectRecipe,
      "ui.toast.challenge_complete" => Self::Ui_Toast_ChallengeComplete,
      "ui.toast.in" => Self::Ui_Toast_In,
      "ui.toast.out" => Self::Ui_Toast_Out,
      "entity.vex.ambient" => Self::Entity_Vex_Ambient,
      "entity.vex.charge" => Self::Entity_Vex_Charge,
      "entity.vex.death" => Self::Entity_Vex_Death,
      "entity.vex.hurt" => Self::Entity_Vex_Hurt,
      "entity.villager.ambient" => Self::Entity_Villager_Ambient,
      "entity.villager.celebrate" => Self::Entity_Villager_Celebrate,
      "entity.villager.death" => Self::Entity_Villager_Death,
      "entity.villager.hurt" => Self::Entity_Villager_Hurt,
      "entity.villager.no" => Self::Entity_Villager_No,
      "entity.villager.trade" => Self::Entity_Villager_Trade,
      "entity.villager.yes" => Self::Entity_Villager_Yes,
      "entity.villager.work_armorer" => Self::Entity_Villager_WorkArmorer,
      "entity.villager.work_butcher" => Self::Entity_Villager_WorkButcher,
      "entity.villager.work_cartographer" => Self::Entity_Villager_WorkCartographer,
      "entity.villager.work_cleric" => Self::Entity_Villager_WorkCleric,
      "entity.villager.work_farmer" => Self::Entity_Villager_WorkFarmer,
      "entity.villager.work_fisherman" => Self::Entity_Villager_WorkFisherman,
      "entity.villager.work_fletcher" => Self::Entity_Villager_WorkFletcher,
      "entity.villager.work_leatherworker" => Self::Entity_Villager_WorkLeatherworker,
      "entity.villager.work_librarian" => Self::Entity_Villager_WorkLibrarian,
      "entity.villager.work_mason" => Self::Entity_Villager_WorkMason,
      "entity.villager.work_shepherd" => Self::Entity_Villager_WorkShepherd,
      "entity.villager.work_toolsmith" => Self::Entity_Villager_WorkToolsmith,
      "entity.villager.work_weaponsmith" => Self::Entity_Villager_WorkWeaponsmith,
      "entity.vindicator.ambient" => Self::Entity_Vindicator_Ambient,
      "entity.vindicator.celebrate" => Self::Entity_Vindicator_Celebrate,
      "entity.vindicator.death" => Self::Entity_Vindicator_Death,
      "entity.vindicator.hurt" => Self::Entity_Vindicator_Hurt,
      "block.lily_pad.place" => Self::Block_LilyPad_Place,
      "entity.wandering_trader.ambient" => Self::Entity_WanderingTrader_Ambient,
      "entity.wandering_trader.death" => Self::Entity_WanderingTrader_Death,
      "entity.wandering_trader.disappeared" => Self::Entity_WanderingTrader_Disappeared,
      "entity.wandering_trader.drink_milk" => Self::Entity_WanderingTrader_DrinkMilk,
      "entity.wandering_trader.drink_potion" => Self::Entity_WanderingTrader_DrinkPotion,
      "entity.wandering_trader.hurt" => Self::Entity_WanderingTrader_Hurt,
      "entity.wandering_trader.no" => Self::Entity_WanderingTrader_No,
      "entity.wandering_trader.reappeared" => Self::Entity_WanderingTrader_Reappeared,
      "entity.wandering_trader.trade" => Self::Entity_WanderingTrader_Trade,
      "entity.wandering_trader.yes" => Self::Entity_WanderingTrader_Yes,
      "block.water.ambient" => Self::Block_Water_Ambient,
      "weather.rain" => Self::Weather_Rain,
      "weather.rain.above" => Self::Weather_Rain_Above,
      "entity.witch.ambient" => Self::Entity_Witch_Ambient,
      "entity.witch.celebrate" => Self::Entity_Witch_Celebrate,
      "entity.witch.death" => Self::Entity_Witch_Death,
      "entity.witch.drink" => Self::Entity_Witch_Drink,
      "entity.witch.hurt" => Self::Entity_Witch_Hurt,
      "entity.witch.throw" => Self::Entity_Witch_Throw,
      "entity.wither.ambient" => Self::Entity_Wither_Ambient,
      "entity.wither.break_block" => Self::Entity_Wither_BreakBlock,
      "entity.wither.death" => Self::Entity_Wither_Death,
      "entity.wither.hurt" => Self::Entity_Wither_Hurt,
      "entity.wither.shoot" => Self::Entity_Wither_Shoot,
      "entity.wither_skeleton.ambient" => Self::Entity_WitherSkeleton_Ambient,
      "entity.wither_skeleton.death" => Self::Entity_WitherSkeleton_Death,
      "entity.wither_skeleton.hurt" => Self::Entity_WitherSkeleton_Hurt,
      "entity.wither_skeleton.step" => Self::Entity_WitherSkeleton_Step,
      "entity.wither.spawn" => Self::Entity_Wither_Spawn,
      "entity.wolf.ambient" => Self::Entity_Wolf_Ambient,
      "entity.wolf.death" => Self::Entity_Wolf_Death,
      "entity.wolf.growl" => Self::Entity_Wolf_Growl,
      "entity.wolf.howl" => Self::Entity_Wolf_Howl,
      "entity.wolf.hurt" => Self::Entity_Wolf_Hurt,
      "entity.wolf.pant" => Self::Entity_Wolf_Pant,
      "entity.wolf.shake" => Self::Entity_Wolf_Shake,
      "entity.wolf.step" => Self::Entity_Wolf_Step,
      "entity.wolf.whine" => Self::Entity_Wolf_Whine,
      "block.wooden_door.close" => Self::Block_WoodenDoor_Close,
      "block.wooden_door.open" => Self::Block_WoodenDoor_Open,
      "block.wooden_trapdoor.close" => Self::Block_WoodenTrapdoor_Close,
      "block.wooden_trapdoor.open" => Self::Block_WoodenTrapdoor_Open,
      "block.wood.break" => Self::Block_Wood_Break,
      "block.wooden_button.click_off" => Self::Block_WoodenButton_ClickOff,
      "block.wooden_button.click_on" => Self::Block_WoodenButton_ClickOn,
      "block.wood.fall" => Self::Block_Wood_Fall,
      "block.wood.hit" => Self::Block_Wood_Hit,
      "block.wood.place" => Self::Block_Wood_Place,
      "block.wooden_pressure_plate.click_off" => Self::Block_WoodenPressurePlate_ClickOff,
      "block.wooden_pressure_plate.click_on" => Self::Block_WoodenPressurePlate_ClickOn,
      "block.wood.step" => Self::Block_Wood_Step,
      "entity.zombie.ambient" => Self::Entity_Zombie_Ambient,
      "entity.zombie.attack_wooden_door" => Self::Entity_Zombie_AttackWoodenDoor,
      "entity.zombie.attack_iron_door" => Self::Entity_Zombie_AttackIronDoor,
      "entity.zombie.break_wooden_door" => Self::Entity_Zombie_BreakWoodenDoor,
      "entity.zombie.converted_to_drowned" => Self::Entity_Zombie_ConvertedToDrowned,
      "entity.zombie.death" => Self::Entity_Zombie_Death,
      "entity.zombie.destroy_egg" => Self::Entity_Zombie_DestroyEgg,
      "entity.zombie_horse.ambient" => Self::Entity_ZombieHorse_Ambient,
      "entity.zombie_horse.death" => Self::Entity_ZombieHorse_Death,
      "entity.zombie_horse.hurt" => Self::Entity_ZombieHorse_Hurt,
      "entity.zombie.hurt" => Self::Entity_Zombie_Hurt,
      "entity.zombie.infect" => Self::Entity_Zombie_Infect,
      "entity.zombie_pigman.ambient" => Self::Entity_ZombiePigman_Ambient,
      "entity.zombie_pigman.angry" => Self::Entity_ZombiePigman_Angry,
      "entity.zombie_pigman.death" => Self::Entity_ZombiePigman_Death,
      "entity.zombie_pigman.hurt" => Self::Entity_ZombiePigman_Hurt,
      "entity.zombie.step" => Self::Entity_Zombie_Step,
      "entity.zombie_villager.ambient" => Self::Entity_ZombieVillager_Ambient,
      "entity.zombie_villager.converted" => Self::Entity_ZombieVillager_Converted,
      "entity.zombie_villager.cure" => Self::Entity_ZombieVillager_Cure,
      "entity.zombie_villager.death" => Self::Entity_ZombieVillager_Death,
      "entity.zombie_villager.hurt" => Self::Entity_ZombieVillager_Hurt,
      "entity.zombie_villager.step" => Self::Entity_ZombieVillager_Step,
      _ => {return None;},
    })
  }
  fn get_id(&self) -> usize {
    *self as usize
  }
  fn from_id(id: usize) -> Option<Self> {
    FromPrimitive::from_usize(id)
  }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, FromPrimitive)]
#[allow(non_camel_case_types)]
/// Key: `minecraft:fluid`
pub enum Fluid {
  Empty = 0,
  FlowingWater = 1,
  Water = 2,
  FlowingLava = 3,
  Lava = 4,
}
impl Fluid {
  pub const ID: usize = 1;
}
impl Registry for Fluid {
  fn get_registry_key(&self) -> NamespacedKey {
    NamespacedKey::new(crate::helpers::MINECRAFT_NAMESPACE, match self {
      Self::Empty => "empty",
      Self::FlowingWater => "flowing_water",
      Self::Water => "water",
      Self::FlowingLava => "flowing_lava",
      Self::Lava => "lava",
    })
  }
  fn from_registry_key(key: &NamespacedKey) -> Option<Self> {
    if *key.namespace() != crate::helpers::MINECRAFT_NAMESPACE {return None;}
    Some(match &**key.key() {
      "empty" => Self::Empty,
      "flowing_water" => Self::FlowingWater,
      "water" => Self::Water,
      "flowing_lava" => Self::FlowingLava,
      "lava" => Self::Lava,
      _ => {return None;},
    })
  }
  fn get_id(&self) -> usize {
    *self as usize
  }
  fn from_id(id: usize) -> Option<Self> {
    FromPrimitive::from_usize(id)
  }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, FromPrimitive)]
#[allow(non_camel_case_types)]
/// Key: `minecraft:mob_effect`
pub enum MobEffect {
  Speed = 1,
  Slowness = 2,
  Haste = 3,
  MiningFatigue = 4,
  Strength = 5,
  InstantHealth = 6,
  InstantDamage = 7,
  JumpBoost = 8,
  Nausea = 9,
  Regeneration = 10,
  Resistance = 11,
  FireResistance = 12,
  WaterBreathing = 13,
  Invisibility = 14,
  Blindness = 15,
  NightVision = 16,
  Hunger = 17,
  Weakness = 18,
  Poison = 19,
  Wither = 20,
  HealthBoost = 21,
  Absorption = 22,
  Saturation = 23,
  Glowing = 24,
  Levitation = 25,
  Luck = 26,
  Unluck = 27,
  SlowFalling = 28,
  ConduitPower = 29,
  DolphinsGrace = 30,
  BadOmen = 31,
  HeroOfTheVillage = 32,
}
impl MobEffect {
  pub const ID: usize = 2;
}
impl Registry for MobEffect {
  fn get_registry_key(&self) -> NamespacedKey {
    NamespacedKey::new(crate::helpers::MINECRAFT_NAMESPACE, match self {
      Self::Speed => "speed",
      Self::Slowness => "slowness",
      Self::Haste => "haste",
      Self::MiningFatigue => "mining_fatigue",
      Self::Strength => "strength",
      Self::InstantHealth => "instant_health",
      Self::InstantDamage => "instant_damage",
      Self::JumpBoost => "jump_boost",
      Self::Nausea => "nausea",
      Self::Regeneration => "regeneration",
      Self::Resistance => "resistance",
      Self::FireResistance => "fire_resistance",
      Self::WaterBreathing => "water_breathing",
      Self::Invisibility => "invisibility",
      Self::Blindness => "blindness",
      Self::NightVision => "night_vision",
      Self::Hunger => "hunger",
      Self::Weakness => "weakness",
      Self::Poison => "poison",
      Self::Wither => "wither",
      Self::HealthBoost => "health_boost",
      Self::Absorption => "absorption",
      Self::Saturation => "saturation",
      Self::Glowing => "glowing",
      Self::Levitation => "levitation",
      Self::Luck => "luck",
      Self::Unluck => "unluck",
      Self::SlowFalling => "slow_falling",
      Self::ConduitPower => "conduit_power",
      Self::DolphinsGrace => "dolphins_grace",
      Self::BadOmen => "bad_omen",
      Self::HeroOfTheVillage => "hero_of_the_village",
    })
  }
  fn from_registry_key(key: &NamespacedKey) -> Option<Self> {
    if *key.namespace() != crate::helpers::MINECRAFT_NAMESPACE {return None;}
    Some(match &**key.key() {
      "speed" => Self::Speed,
      "slowness" => Self::Slowness,
      "haste" => Self::Haste,
      "mining_fatigue" => Self::MiningFatigue,
      "strength" => Self::Strength,
      "instant_health" => Self::InstantHealth,
      "instant_damage" => Self::InstantDamage,
      "jump_boost" => Self::JumpBoost,
      "nausea" => Self::Nausea,
      "regeneration" => Self::Regeneration,
      "resistance" => Self::Resistance,
      "fire_resistance" => Self::FireResistance,
      "water_breathing" => Self::WaterBreathing,
      "invisibility" => Self::Invisibility,
      "blindness" => Self::Blindness,
      "night_vision" => Self::NightVision,
      "hunger" => Self::Hunger,
      "weakness" => Self::Weakness,
      "poison" => Self::Poison,
      "wither" => Self::Wither,
      "health_boost" => Self::HealthBoost,
      "absorption" => Self::Absorption,
      "saturation" => Self::Saturation,
      "glowing" => Self::Glowing,
      "levitation" => Self::Levitation,
      "luck" => Self::Luck,
      "unluck" => Self::Unluck,
      "slow_falling" => Self::SlowFalling,
      "conduit_power" => Self::ConduitPower,
      "dolphins_grace" => Self::DolphinsGrace,
      "bad_omen" => Self::BadOmen,
      "hero_of_the_village" => Self::HeroOfTheVillage,
      _ => {return None;},
    })
  }
  fn get_id(&self) -> usize {
    *self as usize
  }
  fn from_id(id: usize) -> Option<Self> {
    FromPrimitive::from_usize(id)
  }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, FromPrimitive)]
#[allow(non_camel_case_types)]
/// Key: `minecraft:block`
pub enum Block {
  Air = 0,
  Stone = 1,
  Granite = 2,
  PolishedGranite = 3,
  Diorite = 4,
  PolishedDiorite = 5,
  Andesite = 6,
  PolishedAndesite = 7,
  GrassBlock = 8,
  Dirt = 9,
  CoarseDirt = 10,
  Podzol = 11,
  Cobblestone = 12,
  OakPlanks = 13,
  SprucePlanks = 14,
  BirchPlanks = 15,
  JunglePlanks = 16,
  AcaciaPlanks = 17,
  DarkOakPlanks = 18,
  OakSapling = 19,
  SpruceSapling = 20,
  BirchSapling = 21,
  JungleSapling = 22,
  AcaciaSapling = 23,
  DarkOakSapling = 24,
  Bedrock = 25,
  Water = 26,
  Lava = 27,
  Sand = 28,
  RedSand = 29,
  Gravel = 30,
  GoldOre = 31,
  IronOre = 32,
  CoalOre = 33,
  OakLog = 34,
  SpruceLog = 35,
  BirchLog = 36,
  JungleLog = 37,
  AcaciaLog = 38,
  DarkOakLog = 39,
  StrippedSpruceLog = 40,
  StrippedBirchLog = 41,
  StrippedJungleLog = 42,
  StrippedAcaciaLog = 43,
  StrippedDarkOakLog = 44,
  StrippedOakLog = 45,
  OakWood = 46,
  SpruceWood = 47,
  BirchWood = 48,
  JungleWood = 49,
  AcaciaWood = 50,
  DarkOakWood = 51,
  StrippedOakWood = 52,
  StrippedSpruceWood = 53,
  StrippedBirchWood = 54,
  StrippedJungleWood = 55,
  StrippedAcaciaWood = 56,
  StrippedDarkOakWood = 57,
  OakLeaves = 58,
  SpruceLeaves = 59,
  BirchLeaves = 60,
  JungleLeaves = 61,
  AcaciaLeaves = 62,
  DarkOakLeaves = 63,
  Sponge = 64,
  WetSponge = 65,
  Glass = 66,
  LapisOre = 67,
  LapisBlock = 68,
  Dispenser = 69,
  Sandstone = 70,
  ChiseledSandstone = 71,
  CutSandstone = 72,
  NoteBlock = 73,
  WhiteBed = 74,
  OrangeBed = 75,
  MagentaBed = 76,
  LightBlueBed = 77,
  YellowBed = 78,
  LimeBed = 79,
  PinkBed = 80,
  GrayBed = 81,
  LightGrayBed = 82,
  CyanBed = 83,
  PurpleBed = 84,
  BlueBed = 85,
  BrownBed = 86,
  GreenBed = 87,
  RedBed = 88,
  BlackBed = 89,
  PoweredRail = 90,
  DetectorRail = 91,
  StickyPiston = 92,
  Cobweb = 93,
  Grass = 94,
  Fern = 95,
  DeadBush = 96,
  Seagrass = 97,
  TallSeagrass = 98,
  Piston = 99,
  PistonHead = 100,
  WhiteWool = 101,
  OrangeWool = 102,
  MagentaWool = 103,
  LightBlueWool = 104,
  YellowWool = 105,
  LimeWool = 106,
  PinkWool = 107,
  GrayWool = 108,
  LightGrayWool = 109,
  CyanWool = 110,
  PurpleWool = 111,
  BlueWool = 112,
  BrownWool = 113,
  GreenWool = 114,
  RedWool = 115,
  BlackWool = 116,
  MovingPiston = 117,
  Dandelion = 118,
  Poppy = 119,
  BlueOrchid = 120,
  Allium = 121,
  AzureBluet = 122,
  RedTulip = 123,
  OrangeTulip = 124,
  WhiteTulip = 125,
  PinkTulip = 126,
  OxeyeDaisy = 127,
  Cornflower = 128,
  WitherRose = 129,
  LilyOfTheValley = 130,
  BrownMushroom = 131,
  RedMushroom = 132,
  GoldBlock = 133,
  IronBlock = 134,
  Bricks = 135,
  Tnt = 136,
  Bookshelf = 137,
  MossyCobblestone = 138,
  Obsidian = 139,
  Torch = 140,
  WallTorch = 141,
  Fire = 142,
  Spawner = 143,
  OakStairs = 144,
  Chest = 145,
  RedstoneWire = 146,
  DiamondOre = 147,
  DiamondBlock = 148,
  CraftingTable = 149,
  Wheat = 150,
  Farmland = 151,
  Furnace = 152,
  OakSign = 153,
  SpruceSign = 154,
  BirchSign = 155,
  AcaciaSign = 156,
  JungleSign = 157,
  DarkOakSign = 158,
  OakDoor = 159,
  Ladder = 160,
  Rail = 161,
  CobblestoneStairs = 162,
  OakWallSign = 163,
  SpruceWallSign = 164,
  BirchWallSign = 165,
  AcaciaWallSign = 166,
  JungleWallSign = 167,
  DarkOakWallSign = 168,
  Lever = 169,
  StonePressurePlate = 170,
  IronDoor = 171,
  OakPressurePlate = 172,
  SprucePressurePlate = 173,
  BirchPressurePlate = 174,
  JunglePressurePlate = 175,
  AcaciaPressurePlate = 176,
  DarkOakPressurePlate = 177,
  RedstoneOre = 178,
  RedstoneTorch = 179,
  RedstoneWallTorch = 180,
  StoneButton = 181,
  Snow = 182,
  Ice = 183,
  SnowBlock = 184,
  Cactus = 185,
  Clay = 186,
  SugarCane = 187,
  Jukebox = 188,
  OakFence = 189,
  Pumpkin = 190,
  Netherrack = 191,
  SoulSand = 192,
  Glowstone = 193,
  NetherPortal = 194,
  CarvedPumpkin = 195,
  JackOLantern = 196,
  Cake = 197,
  Repeater = 198,
  WhiteStainedGlass = 199,
  OrangeStainedGlass = 200,
  MagentaStainedGlass = 201,
  LightBlueStainedGlass = 202,
  YellowStainedGlass = 203,
  LimeStainedGlass = 204,
  PinkStainedGlass = 205,
  GrayStainedGlass = 206,
  LightGrayStainedGlass = 207,
  CyanStainedGlass = 208,
  PurpleStainedGlass = 209,
  BlueStainedGlass = 210,
  BrownStainedGlass = 211,
  GreenStainedGlass = 212,
  RedStainedGlass = 213,
  BlackStainedGlass = 214,
  OakTrapdoor = 215,
  SpruceTrapdoor = 216,
  BirchTrapdoor = 217,
  JungleTrapdoor = 218,
  AcaciaTrapdoor = 219,
  DarkOakTrapdoor = 220,
  StoneBricks = 221,
  MossyStoneBricks = 222,
  CrackedStoneBricks = 223,
  ChiseledStoneBricks = 224,
  InfestedStone = 225,
  InfestedCobblestone = 226,
  InfestedStoneBricks = 227,
  InfestedMossyStoneBricks = 228,
  InfestedCrackedStoneBricks = 229,
  InfestedChiseledStoneBricks = 230,
  BrownMushroomBlock = 231,
  RedMushroomBlock = 232,
  MushroomStem = 233,
  IronBars = 234,
  GlassPane = 235,
  Melon = 236,
  AttachedPumpkinStem = 237,
  AttachedMelonStem = 238,
  PumpkinStem = 239,
  MelonStem = 240,
  Vine = 241,
  OakFenceGate = 242,
  BrickStairs = 243,
  StoneBrickStairs = 244,
  Mycelium = 245,
  LilyPad = 246,
  NetherBricks = 247,
  NetherBrickFence = 248,
  NetherBrickStairs = 249,
  NetherWart = 250,
  EnchantingTable = 251,
  BrewingStand = 252,
  Cauldron = 253,
  EndPortal = 254,
  EndPortalFrame = 255,
  EndStone = 256,
  DragonEgg = 257,
  RedstoneLamp = 258,
  Cocoa = 259,
  SandstoneStairs = 260,
  EmeraldOre = 261,
  EnderChest = 262,
  TripwireHook = 263,
  Tripwire = 264,
  EmeraldBlock = 265,
  SpruceStairs = 266,
  BirchStairs = 267,
  JungleStairs = 268,
  CommandBlock = 269,
  Beacon = 270,
  CobblestoneWall = 271,
  MossyCobblestoneWall = 272,
  FlowerPot = 273,
  PottedOakSapling = 274,
  PottedSpruceSapling = 275,
  PottedBirchSapling = 276,
  PottedJungleSapling = 277,
  PottedAcaciaSapling = 278,
  PottedDarkOakSapling = 279,
  PottedFern = 280,
  PottedDandelion = 281,
  PottedPoppy = 282,
  PottedBlueOrchid = 283,
  PottedAllium = 284,
  PottedAzureBluet = 285,
  PottedRedTulip = 286,
  PottedOrangeTulip = 287,
  PottedWhiteTulip = 288,
  PottedPinkTulip = 289,
  PottedOxeyeDaisy = 290,
  PottedCornflower = 291,
  PottedLilyOfTheValley = 292,
  PottedWitherRose = 293,
  PottedRedMushroom = 294,
  PottedBrownMushroom = 295,
  PottedDeadBush = 296,
  PottedCactus = 297,
  Carrots = 298,
  Potatoes = 299,
  OakButton = 300,
  SpruceButton = 301,
  BirchButton = 302,
  JungleButton = 303,
  AcaciaButton = 304,
  DarkOakButton = 305,
  SkeletonSkull = 306,
  SkeletonWallSkull = 307,
  WitherSkeletonSkull = 308,
  WitherSkeletonWallSkull = 309,
  ZombieHead = 310,
  ZombieWallHead = 311,
  PlayerHead = 312,
  PlayerWallHead = 313,
  CreeperHead = 314,
  CreeperWallHead = 315,
  DragonHead = 316,
  DragonWallHead = 317,
  Anvil = 318,
  ChippedAnvil = 319,
  DamagedAnvil = 320,
  TrappedChest = 321,
  LightWeightedPressurePlate = 322,
  HeavyWeightedPressurePlate = 323,
  Comparator = 324,
  DaylightDetector = 325,
  RedstoneBlock = 326,
  NetherQuartzOre = 327,
  Hopper = 328,
  QuartzBlock = 329,
  ChiseledQuartzBlock = 330,
  QuartzPillar = 331,
  QuartzStairs = 332,
  ActivatorRail = 333,
  Dropper = 334,
  WhiteTerracotta = 335,
  OrangeTerracotta = 336,
  MagentaTerracotta = 337,
  LightBlueTerracotta = 338,
  YellowTerracotta = 339,
  LimeTerracotta = 340,
  PinkTerracotta = 341,
  GrayTerracotta = 342,
  LightGrayTerracotta = 343,
  CyanTerracotta = 344,
  PurpleTerracotta = 345,
  BlueTerracotta = 346,
  BrownTerracotta = 347,
  GreenTerracotta = 348,
  RedTerracotta = 349,
  BlackTerracotta = 350,
  WhiteStainedGlassPane = 351,
  OrangeStainedGlassPane = 352,
  MagentaStainedGlassPane = 353,
  LightBlueStainedGlassPane = 354,
  YellowStainedGlassPane = 355,
  LimeStainedGlassPane = 356,
  PinkStainedGlassPane = 357,
  GrayStainedGlassPane = 358,
  LightGrayStainedGlassPane = 359,
  CyanStainedGlassPane = 360,
  PurpleStainedGlassPane = 361,
  BlueStainedGlassPane = 362,
  BrownStainedGlassPane = 363,
  GreenStainedGlassPane = 364,
  RedStainedGlassPane = 365,
  BlackStainedGlassPane = 366,
  AcaciaStairs = 367,
  DarkOakStairs = 368,
  SlimeBlock = 369,
  Barrier = 370,
  IronTrapdoor = 371,
  Prismarine = 372,
  PrismarineBricks = 373,
  DarkPrismarine = 374,
  PrismarineStairs = 375,
  PrismarineBrickStairs = 376,
  DarkPrismarineStairs = 377,
  PrismarineSlab = 378,
  PrismarineBrickSlab = 379,
  DarkPrismarineSlab = 380,
  SeaLantern = 381,
  HayBlock = 382,
  WhiteCarpet = 383,
  OrangeCarpet = 384,
  MagentaCarpet = 385,
  LightBlueCarpet = 386,
  YellowCarpet = 387,
  LimeCarpet = 388,
  PinkCarpet = 389,
  GrayCarpet = 390,
  LightGrayCarpet = 391,
  CyanCarpet = 392,
  PurpleCarpet = 393,
  BlueCarpet = 394,
  BrownCarpet = 395,
  GreenCarpet = 396,
  RedCarpet = 397,
  BlackCarpet = 398,
  Terracotta = 399,
  CoalBlock = 400,
  PackedIce = 401,
  Sunflower = 402,
  Lilac = 403,
  RoseBush = 404,
  Peony = 405,
  TallGrass = 406,
  LargeFern = 407,
  WhiteBanner = 408,
  OrangeBanner = 409,
  MagentaBanner = 410,
  LightBlueBanner = 411,
  YellowBanner = 412,
  LimeBanner = 413,
  PinkBanner = 414,
  GrayBanner = 415,
  LightGrayBanner = 416,
  CyanBanner = 417,
  PurpleBanner = 418,
  BlueBanner = 419,
  BrownBanner = 420,
  GreenBanner = 421,
  RedBanner = 422,
  BlackBanner = 423,
  WhiteWallBanner = 424,
  OrangeWallBanner = 425,
  MagentaWallBanner = 426,
  LightBlueWallBanner = 427,
  YellowWallBanner = 428,
  LimeWallBanner = 429,
  PinkWallBanner = 430,
  GrayWallBanner = 431,
  LightGrayWallBanner = 432,
  CyanWallBanner = 433,
  PurpleWallBanner = 434,
  BlueWallBanner = 435,
  BrownWallBanner = 436,
  GreenWallBanner = 437,
  RedWallBanner = 438,
  BlackWallBanner = 439,
  RedSandstone = 440,
  ChiseledRedSandstone = 441,
  CutRedSandstone = 442,
  RedSandstoneStairs = 443,
  OakSlab = 444,
  SpruceSlab = 445,
  BirchSlab = 446,
  JungleSlab = 447,
  AcaciaSlab = 448,
  DarkOakSlab = 449,
  StoneSlab = 450,
  SmoothStoneSlab = 451,
  SandstoneSlab = 452,
  CutSandstoneSlab = 453,
  PetrifiedOakSlab = 454,
  CobblestoneSlab = 455,
  BrickSlab = 456,
  StoneBrickSlab = 457,
  NetherBrickSlab = 458,
  QuartzSlab = 459,
  RedSandstoneSlab = 460,
  CutRedSandstoneSlab = 461,
  PurpurSlab = 462,
  SmoothStone = 463,
  SmoothSandstone = 464,
  SmoothQuartz = 465,
  SmoothRedSandstone = 466,
  SpruceFenceGate = 467,
  BirchFenceGate = 468,
  JungleFenceGate = 469,
  AcaciaFenceGate = 470,
  DarkOakFenceGate = 471,
  SpruceFence = 472,
  BirchFence = 473,
  JungleFence = 474,
  AcaciaFence = 475,
  DarkOakFence = 476,
  SpruceDoor = 477,
  BirchDoor = 478,
  JungleDoor = 479,
  AcaciaDoor = 480,
  DarkOakDoor = 481,
  EndRod = 482,
  ChorusPlant = 483,
  ChorusFlower = 484,
  PurpurBlock = 485,
  PurpurPillar = 486,
  PurpurStairs = 487,
  EndStoneBricks = 488,
  Beetroots = 489,
  GrassPath = 490,
  EndGateway = 491,
  RepeatingCommandBlock = 492,
  ChainCommandBlock = 493,
  FrostedIce = 494,
  MagmaBlock = 495,
  NetherWartBlock = 496,
  RedNetherBricks = 497,
  BoneBlock = 498,
  StructureVoid = 499,
  Observer = 500,
  ShulkerBox = 501,
  WhiteShulkerBox = 502,
  OrangeShulkerBox = 503,
  MagentaShulkerBox = 504,
  LightBlueShulkerBox = 505,
  YellowShulkerBox = 506,
  LimeShulkerBox = 507,
  PinkShulkerBox = 508,
  GrayShulkerBox = 509,
  LightGrayShulkerBox = 510,
  CyanShulkerBox = 511,
  PurpleShulkerBox = 512,
  BlueShulkerBox = 513,
  BrownShulkerBox = 514,
  GreenShulkerBox = 515,
  RedShulkerBox = 516,
  BlackShulkerBox = 517,
  WhiteGlazedTerracotta = 518,
  OrangeGlazedTerracotta = 519,
  MagentaGlazedTerracotta = 520,
  LightBlueGlazedTerracotta = 521,
  YellowGlazedTerracotta = 522,
  LimeGlazedTerracotta = 523,
  PinkGlazedTerracotta = 524,
  GrayGlazedTerracotta = 525,
  LightGrayGlazedTerracotta = 526,
  CyanGlazedTerracotta = 527,
  PurpleGlazedTerracotta = 528,
  BlueGlazedTerracotta = 529,
  BrownGlazedTerracotta = 530,
  GreenGlazedTerracotta = 531,
  RedGlazedTerracotta = 532,
  BlackGlazedTerracotta = 533,
  WhiteConcrete = 534,
  OrangeConcrete = 535,
  MagentaConcrete = 536,
  LightBlueConcrete = 537,
  YellowConcrete = 538,
  LimeConcrete = 539,
  PinkConcrete = 540,
  GrayConcrete = 541,
  LightGrayConcrete = 542,
  CyanConcrete = 543,
  PurpleConcrete = 544,
  BlueConcrete = 545,
  BrownConcrete = 546,
  GreenConcrete = 547,
  RedConcrete = 548,
  BlackConcrete = 549,
  WhiteConcretePowder = 550,
  OrangeConcretePowder = 551,
  MagentaConcretePowder = 552,
  LightBlueConcretePowder = 553,
  YellowConcretePowder = 554,
  LimeConcretePowder = 555,
  PinkConcretePowder = 556,
  GrayConcretePowder = 557,
  LightGrayConcretePowder = 558,
  CyanConcretePowder = 559,
  PurpleConcretePowder = 560,
  BlueConcretePowder = 561,
  BrownConcretePowder = 562,
  GreenConcretePowder = 563,
  RedConcretePowder = 564,
  BlackConcretePowder = 565,
  Kelp = 566,
  KelpPlant = 567,
  DriedKelpBlock = 568,
  TurtleEgg = 569,
  DeadTubeCoralBlock = 570,
  DeadBrainCoralBlock = 571,
  DeadBubbleCoralBlock = 572,
  DeadFireCoralBlock = 573,
  DeadHornCoralBlock = 574,
  TubeCoralBlock = 575,
  BrainCoralBlock = 576,
  BubbleCoralBlock = 577,
  FireCoralBlock = 578,
  HornCoralBlock = 579,
  DeadTubeCoral = 580,
  DeadBrainCoral = 581,
  DeadBubbleCoral = 582,
  DeadFireCoral = 583,
  DeadHornCoral = 584,
  TubeCoral = 585,
  BrainCoral = 586,
  BubbleCoral = 587,
  FireCoral = 588,
  HornCoral = 589,
  DeadTubeCoralFan = 590,
  DeadBrainCoralFan = 591,
  DeadBubbleCoralFan = 592,
  DeadFireCoralFan = 593,
  DeadHornCoralFan = 594,
  TubeCoralFan = 595,
  BrainCoralFan = 596,
  BubbleCoralFan = 597,
  FireCoralFan = 598,
  HornCoralFan = 599,
  DeadTubeCoralWallFan = 600,
  DeadBrainCoralWallFan = 601,
  DeadBubbleCoralWallFan = 602,
  DeadFireCoralWallFan = 603,
  DeadHornCoralWallFan = 604,
  TubeCoralWallFan = 605,
  BrainCoralWallFan = 606,
  BubbleCoralWallFan = 607,
  FireCoralWallFan = 608,
  HornCoralWallFan = 609,
  SeaPickle = 610,
  BlueIce = 611,
  Conduit = 612,
  BambooSapling = 613,
  Bamboo = 614,
  PottedBamboo = 615,
  VoidAir = 616,
  CaveAir = 617,
  BubbleColumn = 618,
  PolishedGraniteStairs = 619,
  SmoothRedSandstoneStairs = 620,
  MossyStoneBrickStairs = 621,
  PolishedDioriteStairs = 622,
  MossyCobblestoneStairs = 623,
  EndStoneBrickStairs = 624,
  StoneStairs = 625,
  SmoothSandstoneStairs = 626,
  SmoothQuartzStairs = 627,
  GraniteStairs = 628,
  AndesiteStairs = 629,
  RedNetherBrickStairs = 630,
  PolishedAndesiteStairs = 631,
  DioriteStairs = 632,
  PolishedGraniteSlab = 633,
  SmoothRedSandstoneSlab = 634,
  MossyStoneBrickSlab = 635,
  PolishedDioriteSlab = 636,
  MossyCobblestoneSlab = 637,
  EndStoneBrickSlab = 638,
  SmoothSandstoneSlab = 639,
  SmoothQuartzSlab = 640,
  GraniteSlab = 641,
  AndesiteSlab = 642,
  RedNetherBrickSlab = 643,
  PolishedAndesiteSlab = 644,
  DioriteSlab = 645,
  BrickWall = 646,
  PrismarineWall = 647,
  RedSandstoneWall = 648,
  MossyStoneBrickWall = 649,
  GraniteWall = 650,
  StoneBrickWall = 651,
  NetherBrickWall = 652,
  AndesiteWall = 653,
  RedNetherBrickWall = 654,
  SandstoneWall = 655,
  EndStoneBrickWall = 656,
  DioriteWall = 657,
  Scaffolding = 658,
  Loom = 659,
  Barrel = 660,
  Smoker = 661,
  BlastFurnace = 662,
  CartographyTable = 663,
  FletchingTable = 664,
  Grindstone = 665,
  Lectern = 666,
  SmithingTable = 667,
  Stonecutter = 668,
  Bell = 669,
  Lantern = 670,
  Campfire = 671,
  SweetBerryBush = 672,
  StructureBlock = 673,
  Jigsaw = 674,
  Composter = 675,
  BeeNest = 676,
  Beehive = 677,
  HoneyBlock = 678,
  HoneycombBlock = 679,
}
impl Block {
  pub const ID: usize = 3;
}
impl Registry for Block {
  fn get_registry_key(&self) -> NamespacedKey {
    NamespacedKey::new(crate::helpers::MINECRAFT_NAMESPACE, match self {
      Self::Air => "air",
      Self::Stone => "stone",
      Self::Granite => "granite",
      Self::PolishedGranite => "polished_granite",
      Self::Diorite => "diorite",
      Self::PolishedDiorite => "polished_diorite",
      Self::Andesite => "andesite",
      Self::PolishedAndesite => "polished_andesite",
      Self::GrassBlock => "grass_block",
      Self::Dirt => "dirt",
      Self::CoarseDirt => "coarse_dirt",
      Self::Podzol => "podzol",
      Self::Cobblestone => "cobblestone",
      Self::OakPlanks => "oak_planks",
      Self::SprucePlanks => "spruce_planks",
      Self::BirchPlanks => "birch_planks",
      Self::JunglePlanks => "jungle_planks",
      Self::AcaciaPlanks => "acacia_planks",
      Self::DarkOakPlanks => "dark_oak_planks",
      Self::OakSapling => "oak_sapling",
      Self::SpruceSapling => "spruce_sapling",
      Self::BirchSapling => "birch_sapling",
      Self::JungleSapling => "jungle_sapling",
      Self::AcaciaSapling => "acacia_sapling",
      Self::DarkOakSapling => "dark_oak_sapling",
      Self::Bedrock => "bedrock",
      Self::Water => "water",
      Self::Lava => "lava",
      Self::Sand => "sand",
      Self::RedSand => "red_sand",
      Self::Gravel => "gravel",
      Self::GoldOre => "gold_ore",
      Self::IronOre => "iron_ore",
      Self::CoalOre => "coal_ore",
      Self::OakLog => "oak_log",
      Self::SpruceLog => "spruce_log",
      Self::BirchLog => "birch_log",
      Self::JungleLog => "jungle_log",
      Self::AcaciaLog => "acacia_log",
      Self::DarkOakLog => "dark_oak_log",
      Self::StrippedSpruceLog => "stripped_spruce_log",
      Self::StrippedBirchLog => "stripped_birch_log",
      Self::StrippedJungleLog => "stripped_jungle_log",
      Self::StrippedAcaciaLog => "stripped_acacia_log",
      Self::StrippedDarkOakLog => "stripped_dark_oak_log",
      Self::StrippedOakLog => "stripped_oak_log",
      Self::OakWood => "oak_wood",
      Self::SpruceWood => "spruce_wood",
      Self::BirchWood => "birch_wood",
      Self::JungleWood => "jungle_wood",
      Self::AcaciaWood => "acacia_wood",
      Self::DarkOakWood => "dark_oak_wood",
      Self::StrippedOakWood => "stripped_oak_wood",
      Self::StrippedSpruceWood => "stripped_spruce_wood",
      Self::StrippedBirchWood => "stripped_birch_wood",
      Self::StrippedJungleWood => "stripped_jungle_wood",
      Self::StrippedAcaciaWood => "stripped_acacia_wood",
      Self::StrippedDarkOakWood => "stripped_dark_oak_wood",
      Self::OakLeaves => "oak_leaves",
      Self::SpruceLeaves => "spruce_leaves",
      Self::BirchLeaves => "birch_leaves",
      Self::JungleLeaves => "jungle_leaves",
      Self::AcaciaLeaves => "acacia_leaves",
      Self::DarkOakLeaves => "dark_oak_leaves",
      Self::Sponge => "sponge",
      Self::WetSponge => "wet_sponge",
      Self::Glass => "glass",
      Self::LapisOre => "lapis_ore",
      Self::LapisBlock => "lapis_block",
      Self::Dispenser => "dispenser",
      Self::Sandstone => "sandstone",
      Self::ChiseledSandstone => "chiseled_sandstone",
      Self::CutSandstone => "cut_sandstone",
      Self::NoteBlock => "note_block",
      Self::WhiteBed => "white_bed",
      Self::OrangeBed => "orange_bed",
      Self::MagentaBed => "magenta_bed",
      Self::LightBlueBed => "light_blue_bed",
      Self::YellowBed => "yellow_bed",
      Self::LimeBed => "lime_bed",
      Self::PinkBed => "pink_bed",
      Self::GrayBed => "gray_bed",
      Self::LightGrayBed => "light_gray_bed",
      Self::CyanBed => "cyan_bed",
      Self::PurpleBed => "purple_bed",
      Self::BlueBed => "blue_bed",
      Self::BrownBed => "brown_bed",
      Self::GreenBed => "green_bed",
      Self::RedBed => "red_bed",
      Self::BlackBed => "black_bed",
      Self::PoweredRail => "powered_rail",
      Self::DetectorRail => "detector_rail",
      Self::StickyPiston => "sticky_piston",
      Self::Cobweb => "cobweb",
      Self::Grass => "grass",
      Self::Fern => "fern",
      Self::DeadBush => "dead_bush",
      Self::Seagrass => "seagrass",
      Self::TallSeagrass => "tall_seagrass",
      Self::Piston => "piston",
      Self::PistonHead => "piston_head",
      Self::WhiteWool => "white_wool",
      Self::OrangeWool => "orange_wool",
      Self::MagentaWool => "magenta_wool",
      Self::LightBlueWool => "light_blue_wool",
      Self::YellowWool => "yellow_wool",
      Self::LimeWool => "lime_wool",
      Self::PinkWool => "pink_wool",
      Self::GrayWool => "gray_wool",
      Self::LightGrayWool => "light_gray_wool",
      Self::CyanWool => "cyan_wool",
      Self::PurpleWool => "purple_wool",
      Self::BlueWool => "blue_wool",
      Self::BrownWool => "brown_wool",
      Self::GreenWool => "green_wool",
      Self::RedWool => "red_wool",
      Self::BlackWool => "black_wool",
      Self::MovingPiston => "moving_piston",
      Self::Dandelion => "dandelion",
      Self::Poppy => "poppy",
      Self::BlueOrchid => "blue_orchid",
      Self::Allium => "allium",
      Self::AzureBluet => "azure_bluet",
      Self::RedTulip => "red_tulip",
      Self::OrangeTulip => "orange_tulip",
      Self::WhiteTulip => "white_tulip",
      Self::PinkTulip => "pink_tulip",
      Self::OxeyeDaisy => "oxeye_daisy",
      Self::Cornflower => "cornflower",
      Self::WitherRose => "wither_rose",
      Self::LilyOfTheValley => "lily_of_the_valley",
      Self::BrownMushroom => "brown_mushroom",
      Self::RedMushroom => "red_mushroom",
      Self::GoldBlock => "gold_block",
      Self::IronBlock => "iron_block",
      Self::Bricks => "bricks",
      Self::Tnt => "tnt",
      Self::Bookshelf => "bookshelf",
      Self::MossyCobblestone => "mossy_cobblestone",
      Self::Obsidian => "obsidian",
      Self::Torch => "torch",
      Self::WallTorch => "wall_torch",
      Self::Fire => "fire",
      Self::Spawner => "spawner",
      Self::OakStairs => "oak_stairs",
      Self::Chest => "chest",
      Self::RedstoneWire => "redstone_wire",
      Self::DiamondOre => "diamond_ore",
      Self::DiamondBlock => "diamond_block",
      Self::CraftingTable => "crafting_table",
      Self::Wheat => "wheat",
      Self::Farmland => "farmland",
      Self::Furnace => "furnace",
      Self::OakSign => "oak_sign",
      Self::SpruceSign => "spruce_sign",
      Self::BirchSign => "birch_sign",
      Self::AcaciaSign => "acacia_sign",
      Self::JungleSign => "jungle_sign",
      Self::DarkOakSign => "dark_oak_sign",
      Self::OakDoor => "oak_door",
      Self::Ladder => "ladder",
      Self::Rail => "rail",
      Self::CobblestoneStairs => "cobblestone_stairs",
      Self::OakWallSign => "oak_wall_sign",
      Self::SpruceWallSign => "spruce_wall_sign",
      Self::BirchWallSign => "birch_wall_sign",
      Self::AcaciaWallSign => "acacia_wall_sign",
      Self::JungleWallSign => "jungle_wall_sign",
      Self::DarkOakWallSign => "dark_oak_wall_sign",
      Self::Lever => "lever",
      Self::StonePressurePlate => "stone_pressure_plate",
      Self::IronDoor => "iron_door",
      Self::OakPressurePlate => "oak_pressure_plate",
      Self::SprucePressurePlate => "spruce_pressure_plate",
      Self::BirchPressurePlate => "birch_pressure_plate",
      Self::JunglePressurePlate => "jungle_pressure_plate",
      Self::AcaciaPressurePlate => "acacia_pressure_plate",
      Self::DarkOakPressurePlate => "dark_oak_pressure_plate",
      Self::RedstoneOre => "redstone_ore",
      Self::RedstoneTorch => "redstone_torch",
      Self::RedstoneWallTorch => "redstone_wall_torch",
      Self::StoneButton => "stone_button",
      Self::Snow => "snow",
      Self::Ice => "ice",
      Self::SnowBlock => "snow_block",
      Self::Cactus => "cactus",
      Self::Clay => "clay",
      Self::SugarCane => "sugar_cane",
      Self::Jukebox => "jukebox",
      Self::OakFence => "oak_fence",
      Self::Pumpkin => "pumpkin",
      Self::Netherrack => "netherrack",
      Self::SoulSand => "soul_sand",
      Self::Glowstone => "glowstone",
      Self::NetherPortal => "nether_portal",
      Self::CarvedPumpkin => "carved_pumpkin",
      Self::JackOLantern => "jack_o_lantern",
      Self::Cake => "cake",
      Self::Repeater => "repeater",
      Self::WhiteStainedGlass => "white_stained_glass",
      Self::OrangeStainedGlass => "orange_stained_glass",
      Self::MagentaStainedGlass => "magenta_stained_glass",
      Self::LightBlueStainedGlass => "light_blue_stained_glass",
      Self::YellowStainedGlass => "yellow_stained_glass",
      Self::LimeStainedGlass => "lime_stained_glass",
      Self::PinkStainedGlass => "pink_stained_glass",
      Self::GrayStainedGlass => "gray_stained_glass",
      Self::LightGrayStainedGlass => "light_gray_stained_glass",
      Self::CyanStainedGlass => "cyan_stained_glass",
      Self::PurpleStainedGlass => "purple_stained_glass",
      Self::BlueStainedGlass => "blue_stained_glass",
      Self::BrownStainedGlass => "brown_stained_glass",
      Self::GreenStainedGlass => "green_stained_glass",
      Self::RedStainedGlass => "red_stained_glass",
      Self::BlackStainedGlass => "black_stained_glass",
      Self::OakTrapdoor => "oak_trapdoor",
      Self::SpruceTrapdoor => "spruce_trapdoor",
      Self::BirchTrapdoor => "birch_trapdoor",
      Self::JungleTrapdoor => "jungle_trapdoor",
      Self::AcaciaTrapdoor => "acacia_trapdoor",
      Self::DarkOakTrapdoor => "dark_oak_trapdoor",
      Self::StoneBricks => "stone_bricks",
      Self::MossyStoneBricks => "mossy_stone_bricks",
      Self::CrackedStoneBricks => "cracked_stone_bricks",
      Self::ChiseledStoneBricks => "chiseled_stone_bricks",
      Self::InfestedStone => "infested_stone",
      Self::InfestedCobblestone => "infested_cobblestone",
      Self::InfestedStoneBricks => "infested_stone_bricks",
      Self::InfestedMossyStoneBricks => "infested_mossy_stone_bricks",
      Self::InfestedCrackedStoneBricks => "infested_cracked_stone_bricks",
      Self::InfestedChiseledStoneBricks => "infested_chiseled_stone_bricks",
      Self::BrownMushroomBlock => "brown_mushroom_block",
      Self::RedMushroomBlock => "red_mushroom_block",
      Self::MushroomStem => "mushroom_stem",
      Self::IronBars => "iron_bars",
      Self::GlassPane => "glass_pane",
      Self::Melon => "melon",
      Self::AttachedPumpkinStem => "attached_pumpkin_stem",
      Self::AttachedMelonStem => "attached_melon_stem",
      Self::PumpkinStem => "pumpkin_stem",
      Self::MelonStem => "melon_stem",
      Self::Vine => "vine",
      Self::OakFenceGate => "oak_fence_gate",
      Self::BrickStairs => "brick_stairs",
      Self::StoneBrickStairs => "stone_brick_stairs",
      Self::Mycelium => "mycelium",
      Self::LilyPad => "lily_pad",
      Self::NetherBricks => "nether_bricks",
      Self::NetherBrickFence => "nether_brick_fence",
      Self::NetherBrickStairs => "nether_brick_stairs",
      Self::NetherWart => "nether_wart",
      Self::EnchantingTable => "enchanting_table",
      Self::BrewingStand => "brewing_stand",
      Self::Cauldron => "cauldron",
      Self::EndPortal => "end_portal",
      Self::EndPortalFrame => "end_portal_frame",
      Self::EndStone => "end_stone",
      Self::DragonEgg => "dragon_egg",
      Self::RedstoneLamp => "redstone_lamp",
      Self::Cocoa => "cocoa",
      Self::SandstoneStairs => "sandstone_stairs",
      Self::EmeraldOre => "emerald_ore",
      Self::EnderChest => "ender_chest",
      Self::TripwireHook => "tripwire_hook",
      Self::Tripwire => "tripwire",
      Self::EmeraldBlock => "emerald_block",
      Self::SpruceStairs => "spruce_stairs",
      Self::BirchStairs => "birch_stairs",
      Self::JungleStairs => "jungle_stairs",
      Self::CommandBlock => "command_block",
      Self::Beacon => "beacon",
      Self::CobblestoneWall => "cobblestone_wall",
      Self::MossyCobblestoneWall => "mossy_cobblestone_wall",
      Self::FlowerPot => "flower_pot",
      Self::PottedOakSapling => "potted_oak_sapling",
      Self::PottedSpruceSapling => "potted_spruce_sapling",
      Self::PottedBirchSapling => "potted_birch_sapling",
      Self::PottedJungleSapling => "potted_jungle_sapling",
      Self::PottedAcaciaSapling => "potted_acacia_sapling",
      Self::PottedDarkOakSapling => "potted_dark_oak_sapling",
      Self::PottedFern => "potted_fern",
      Self::PottedDandelion => "potted_dandelion",
      Self::PottedPoppy => "potted_poppy",
      Self::PottedBlueOrchid => "potted_blue_orchid",
      Self::PottedAllium => "potted_allium",
      Self::PottedAzureBluet => "potted_azure_bluet",
      Self::PottedRedTulip => "potted_red_tulip",
      Self::PottedOrangeTulip => "potted_orange_tulip",
      Self::PottedWhiteTulip => "potted_white_tulip",
      Self::PottedPinkTulip => "potted_pink_tulip",
      Self::PottedOxeyeDaisy => "potted_oxeye_daisy",
      Self::PottedCornflower => "potted_cornflower",
      Self::PottedLilyOfTheValley => "potted_lily_of_the_valley",
      Self::PottedWitherRose => "potted_wither_rose",
      Self::PottedRedMushroom => "potted_red_mushroom",
      Self::PottedBrownMushroom => "potted_brown_mushroom",
      Self::PottedDeadBush => "potted_dead_bush",
      Self::PottedCactus => "potted_cactus",
      Self::Carrots => "carrots",
      Self::Potatoes => "potatoes",
      Self::OakButton => "oak_button",
      Self::SpruceButton => "spruce_button",
      Self::BirchButton => "birch_button",
      Self::JungleButton => "jungle_button",
      Self::AcaciaButton => "acacia_button",
      Self::DarkOakButton => "dark_oak_button",
      Self::SkeletonSkull => "skeleton_skull",
      Self::SkeletonWallSkull => "skeleton_wall_skull",
      Self::WitherSkeletonSkull => "wither_skeleton_skull",
      Self::WitherSkeletonWallSkull => "wither_skeleton_wall_skull",
      Self::ZombieHead => "zombie_head",
      Self::ZombieWallHead => "zombie_wall_head",
      Self::PlayerHead => "player_head",
      Self::PlayerWallHead => "player_wall_head",
      Self::CreeperHead => "creeper_head",
      Self::CreeperWallHead => "creeper_wall_head",
      Self::DragonHead => "dragon_head",
      Self::DragonWallHead => "dragon_wall_head",
      Self::Anvil => "anvil",
      Self::ChippedAnvil => "chipped_anvil",
      Self::DamagedAnvil => "damaged_anvil",
      Self::TrappedChest => "trapped_chest",
      Self::LightWeightedPressurePlate => "light_weighted_pressure_plate",
      Self::HeavyWeightedPressurePlate => "heavy_weighted_pressure_plate",
      Self::Comparator => "comparator",
      Self::DaylightDetector => "daylight_detector",
      Self::RedstoneBlock => "redstone_block",
      Self::NetherQuartzOre => "nether_quartz_ore",
      Self::Hopper => "hopper",
      Self::QuartzBlock => "quartz_block",
      Self::ChiseledQuartzBlock => "chiseled_quartz_block",
      Self::QuartzPillar => "quartz_pillar",
      Self::QuartzStairs => "quartz_stairs",
      Self::ActivatorRail => "activator_rail",
      Self::Dropper => "dropper",
      Self::WhiteTerracotta => "white_terracotta",
      Self::OrangeTerracotta => "orange_terracotta",
      Self::MagentaTerracotta => "magenta_terracotta",
      Self::LightBlueTerracotta => "light_blue_terracotta",
      Self::YellowTerracotta => "yellow_terracotta",
      Self::LimeTerracotta => "lime_terracotta",
      Self::PinkTerracotta => "pink_terracotta",
      Self::GrayTerracotta => "gray_terracotta",
      Self::LightGrayTerracotta => "light_gray_terracotta",
      Self::CyanTerracotta => "cyan_terracotta",
      Self::PurpleTerracotta => "purple_terracotta",
      Self::BlueTerracotta => "blue_terracotta",
      Self::BrownTerracotta => "brown_terracotta",
      Self::GreenTerracotta => "green_terracotta",
      Self::RedTerracotta => "red_terracotta",
      Self::BlackTerracotta => "black_terracotta",
      Self::WhiteStainedGlassPane => "white_stained_glass_pane",
      Self::OrangeStainedGlassPane => "orange_stained_glass_pane",
      Self::MagentaStainedGlassPane => "magenta_stained_glass_pane",
      Self::LightBlueStainedGlassPane => "light_blue_stained_glass_pane",
      Self::YellowStainedGlassPane => "yellow_stained_glass_pane",
      Self::LimeStainedGlassPane => "lime_stained_glass_pane",
      Self::PinkStainedGlassPane => "pink_stained_glass_pane",
      Self::GrayStainedGlassPane => "gray_stained_glass_pane",
      Self::LightGrayStainedGlassPane => "light_gray_stained_glass_pane",
      Self::CyanStainedGlassPane => "cyan_stained_glass_pane",
      Self::PurpleStainedGlassPane => "purple_stained_glass_pane",
      Self::BlueStainedGlassPane => "blue_stained_glass_pane",
      Self::BrownStainedGlassPane => "brown_stained_glass_pane",
      Self::GreenStainedGlassPane => "green_stained_glass_pane",
      Self::RedStainedGlassPane => "red_stained_glass_pane",
      Self::BlackStainedGlassPane => "black_stained_glass_pane",
      Self::AcaciaStairs => "acacia_stairs",
      Self::DarkOakStairs => "dark_oak_stairs",
      Self::SlimeBlock => "slime_block",
      Self::Barrier => "barrier",
      Self::IronTrapdoor => "iron_trapdoor",
      Self::Prismarine => "prismarine",
      Self::PrismarineBricks => "prismarine_bricks",
      Self::DarkPrismarine => "dark_prismarine",
      Self::PrismarineStairs => "prismarine_stairs",
      Self::PrismarineBrickStairs => "prismarine_brick_stairs",
      Self::DarkPrismarineStairs => "dark_prismarine_stairs",
      Self::PrismarineSlab => "prismarine_slab",
      Self::PrismarineBrickSlab => "prismarine_brick_slab",
      Self::DarkPrismarineSlab => "dark_prismarine_slab",
      Self::SeaLantern => "sea_lantern",
      Self::HayBlock => "hay_block",
      Self::WhiteCarpet => "white_carpet",
      Self::OrangeCarpet => "orange_carpet",
      Self::MagentaCarpet => "magenta_carpet",
      Self::LightBlueCarpet => "light_blue_carpet",
      Self::YellowCarpet => "yellow_carpet",
      Self::LimeCarpet => "lime_carpet",
      Self::PinkCarpet => "pink_carpet",
      Self::GrayCarpet => "gray_carpet",
      Self::LightGrayCarpet => "light_gray_carpet",
      Self::CyanCarpet => "cyan_carpet",
      Self::PurpleCarpet => "purple_carpet",
      Self::BlueCarpet => "blue_carpet",
      Self::BrownCarpet => "brown_carpet",
      Self::GreenCarpet => "green_carpet",
      Self::RedCarpet => "red_carpet",
      Self::BlackCarpet => "black_carpet",
      Self::Terracotta => "terracotta",
      Self::CoalBlock => "coal_block",
      Self::PackedIce => "packed_ice",
      Self::Sunflower => "sunflower",
      Self::Lilac => "lilac",
      Self::RoseBush => "rose_bush",
      Self::Peony => "peony",
      Self::TallGrass => "tall_grass",
      Self::LargeFern => "large_fern",
      Self::WhiteBanner => "white_banner",
      Self::OrangeBanner => "orange_banner",
      Self::MagentaBanner => "magenta_banner",
      Self::LightBlueBanner => "light_blue_banner",
      Self::YellowBanner => "yellow_banner",
      Self::LimeBanner => "lime_banner",
      Self::PinkBanner => "pink_banner",
      Self::GrayBanner => "gray_banner",
      Self::LightGrayBanner => "light_gray_banner",
      Self::CyanBanner => "cyan_banner",
      Self::PurpleBanner => "purple_banner",
      Self::BlueBanner => "blue_banner",
      Self::BrownBanner => "brown_banner",
      Self::GreenBanner => "green_banner",
      Self::RedBanner => "red_banner",
      Self::BlackBanner => "black_banner",
      Self::WhiteWallBanner => "white_wall_banner",
      Self::OrangeWallBanner => "orange_wall_banner",
      Self::MagentaWallBanner => "magenta_wall_banner",
      Self::LightBlueWallBanner => "light_blue_wall_banner",
      Self::YellowWallBanner => "yellow_wall_banner",
      Self::LimeWallBanner => "lime_wall_banner",
      Self::PinkWallBanner => "pink_wall_banner",
      Self::GrayWallBanner => "gray_wall_banner",
      Self::LightGrayWallBanner => "light_gray_wall_banner",
      Self::CyanWallBanner => "cyan_wall_banner",
      Self::PurpleWallBanner => "purple_wall_banner",
      Self::BlueWallBanner => "blue_wall_banner",
      Self::BrownWallBanner => "brown_wall_banner",
      Self::GreenWallBanner => "green_wall_banner",
      Self::RedWallBanner => "red_wall_banner",
      Self::BlackWallBanner => "black_wall_banner",
      Self::RedSandstone => "red_sandstone",
      Self::ChiseledRedSandstone => "chiseled_red_sandstone",
      Self::CutRedSandstone => "cut_red_sandstone",
      Self::RedSandstoneStairs => "red_sandstone_stairs",
      Self::OakSlab => "oak_slab",
      Self::SpruceSlab => "spruce_slab",
      Self::BirchSlab => "birch_slab",
      Self::JungleSlab => "jungle_slab",
      Self::AcaciaSlab => "acacia_slab",
      Self::DarkOakSlab => "dark_oak_slab",
      Self::StoneSlab => "stone_slab",
      Self::SmoothStoneSlab => "smooth_stone_slab",
      Self::SandstoneSlab => "sandstone_slab",
      Self::CutSandstoneSlab => "cut_sandstone_slab",
      Self::PetrifiedOakSlab => "petrified_oak_slab",
      Self::CobblestoneSlab => "cobblestone_slab",
      Self::BrickSlab => "brick_slab",
      Self::StoneBrickSlab => "stone_brick_slab",
      Self::NetherBrickSlab => "nether_brick_slab",
      Self::QuartzSlab => "quartz_slab",
      Self::RedSandstoneSlab => "red_sandstone_slab",
      Self::CutRedSandstoneSlab => "cut_red_sandstone_slab",
      Self::PurpurSlab => "purpur_slab",
      Self::SmoothStone => "smooth_stone",
      Self::SmoothSandstone => "smooth_sandstone",
      Self::SmoothQuartz => "smooth_quartz",
      Self::SmoothRedSandstone => "smooth_red_sandstone",
      Self::SpruceFenceGate => "spruce_fence_gate",
      Self::BirchFenceGate => "birch_fence_gate",
      Self::JungleFenceGate => "jungle_fence_gate",
      Self::AcaciaFenceGate => "acacia_fence_gate",
      Self::DarkOakFenceGate => "dark_oak_fence_gate",
      Self::SpruceFence => "spruce_fence",
      Self::BirchFence => "birch_fence",
      Self::JungleFence => "jungle_fence",
      Self::AcaciaFence => "acacia_fence",
      Self::DarkOakFence => "dark_oak_fence",
      Self::SpruceDoor => "spruce_door",
      Self::BirchDoor => "birch_door",
      Self::JungleDoor => "jungle_door",
      Self::AcaciaDoor => "acacia_door",
      Self::DarkOakDoor => "dark_oak_door",
      Self::EndRod => "end_rod",
      Self::ChorusPlant => "chorus_plant",
      Self::ChorusFlower => "chorus_flower",
      Self::PurpurBlock => "purpur_block",
      Self::PurpurPillar => "purpur_pillar",
      Self::PurpurStairs => "purpur_stairs",
      Self::EndStoneBricks => "end_stone_bricks",
      Self::Beetroots => "beetroots",
      Self::GrassPath => "grass_path",
      Self::EndGateway => "end_gateway",
      Self::RepeatingCommandBlock => "repeating_command_block",
      Self::ChainCommandBlock => "chain_command_block",
      Self::FrostedIce => "frosted_ice",
      Self::MagmaBlock => "magma_block",
      Self::NetherWartBlock => "nether_wart_block",
      Self::RedNetherBricks => "red_nether_bricks",
      Self::BoneBlock => "bone_block",
      Self::StructureVoid => "structure_void",
      Self::Observer => "observer",
      Self::ShulkerBox => "shulker_box",
      Self::WhiteShulkerBox => "white_shulker_box",
      Self::OrangeShulkerBox => "orange_shulker_box",
      Self::MagentaShulkerBox => "magenta_shulker_box",
      Self::LightBlueShulkerBox => "light_blue_shulker_box",
      Self::YellowShulkerBox => "yellow_shulker_box",
      Self::LimeShulkerBox => "lime_shulker_box",
      Self::PinkShulkerBox => "pink_shulker_box",
      Self::GrayShulkerBox => "gray_shulker_box",
      Self::LightGrayShulkerBox => "light_gray_shulker_box",
      Self::CyanShulkerBox => "cyan_shulker_box",
      Self::PurpleShulkerBox => "purple_shulker_box",
      Self::BlueShulkerBox => "blue_shulker_box",
      Self::BrownShulkerBox => "brown_shulker_box",
      Self::GreenShulkerBox => "green_shulker_box",
      Self::RedShulkerBox => "red_shulker_box",
      Self::BlackShulkerBox => "black_shulker_box",
      Self::WhiteGlazedTerracotta => "white_glazed_terracotta",
      Self::OrangeGlazedTerracotta => "orange_glazed_terracotta",
      Self::MagentaGlazedTerracotta => "magenta_glazed_terracotta",
      Self::LightBlueGlazedTerracotta => "light_blue_glazed_terracotta",
      Self::YellowGlazedTerracotta => "yellow_glazed_terracotta",
      Self::LimeGlazedTerracotta => "lime_glazed_terracotta",
      Self::PinkGlazedTerracotta => "pink_glazed_terracotta",
      Self::GrayGlazedTerracotta => "gray_glazed_terracotta",
      Self::LightGrayGlazedTerracotta => "light_gray_glazed_terracotta",
      Self::CyanGlazedTerracotta => "cyan_glazed_terracotta",
      Self::PurpleGlazedTerracotta => "purple_glazed_terracotta",
      Self::BlueGlazedTerracotta => "blue_glazed_terracotta",
      Self::BrownGlazedTerracotta => "brown_glazed_terracotta",
      Self::GreenGlazedTerracotta => "green_glazed_terracotta",
      Self::RedGlazedTerracotta => "red_glazed_terracotta",
      Self::BlackGlazedTerracotta => "black_glazed_terracotta",
      Self::WhiteConcrete => "white_concrete",
      Self::OrangeConcrete => "orange_concrete",
      Self::MagentaConcrete => "magenta_concrete",
      Self::LightBlueConcrete => "light_blue_concrete",
      Self::YellowConcrete => "yellow_concrete",
      Self::LimeConcrete => "lime_concrete",
      Self::PinkConcrete => "pink_concrete",
      Self::GrayConcrete => "gray_concrete",
      Self::LightGrayConcrete => "light_gray_concrete",
      Self::CyanConcrete => "cyan_concrete",
      Self::PurpleConcrete => "purple_concrete",
      Self::BlueConcrete => "blue_concrete",
      Self::BrownConcrete => "brown_concrete",
      Self::GreenConcrete => "green_concrete",
      Self::RedConcrete => "red_concrete",
      Self::BlackConcrete => "black_concrete",
      Self::WhiteConcretePowder => "white_concrete_powder",
      Self::OrangeConcretePowder => "orange_concrete_powder",
      Self::MagentaConcretePowder => "magenta_concrete_powder",
      Self::LightBlueConcretePowder => "light_blue_concrete_powder",
      Self::YellowConcretePowder => "yellow_concrete_powder",
      Self::LimeConcretePowder => "lime_concrete_powder",
      Self::PinkConcretePowder => "pink_concrete_powder",
      Self::GrayConcretePowder => "gray_concrete_powder",
      Self::LightGrayConcretePowder => "light_gray_concrete_powder",
      Self::CyanConcretePowder => "cyan_concrete_powder",
      Self::PurpleConcretePowder => "purple_concrete_powder",
      Self::BlueConcretePowder => "blue_concrete_powder",
      Self::BrownConcretePowder => "brown_concrete_powder",
      Self::GreenConcretePowder => "green_concrete_powder",
      Self::RedConcretePowder => "red_concrete_powder",
      Self::BlackConcretePowder => "black_concrete_powder",
      Self::Kelp => "kelp",
      Self::KelpPlant => "kelp_plant",
      Self::DriedKelpBlock => "dried_kelp_block",
      Self::TurtleEgg => "turtle_egg",
      Self::DeadTubeCoralBlock => "dead_tube_coral_block",
      Self::DeadBrainCoralBlock => "dead_brain_coral_block",
      Self::DeadBubbleCoralBlock => "dead_bubble_coral_block",
      Self::DeadFireCoralBlock => "dead_fire_coral_block",
      Self::DeadHornCoralBlock => "dead_horn_coral_block",
      Self::TubeCoralBlock => "tube_coral_block",
      Self::BrainCoralBlock => "brain_coral_block",
      Self::BubbleCoralBlock => "bubble_coral_block",
      Self::FireCoralBlock => "fire_coral_block",
      Self::HornCoralBlock => "horn_coral_block",
      Self::DeadTubeCoral => "dead_tube_coral",
      Self::DeadBrainCoral => "dead_brain_coral",
      Self::DeadBubbleCoral => "dead_bubble_coral",
      Self::DeadFireCoral => "dead_fire_coral",
      Self::DeadHornCoral => "dead_horn_coral",
      Self::TubeCoral => "tube_coral",
      Self::BrainCoral => "brain_coral",
      Self::BubbleCoral => "bubble_coral",
      Self::FireCoral => "fire_coral",
      Self::HornCoral => "horn_coral",
      Self::DeadTubeCoralFan => "dead_tube_coral_fan",
      Self::DeadBrainCoralFan => "dead_brain_coral_fan",
      Self::DeadBubbleCoralFan => "dead_bubble_coral_fan",
      Self::DeadFireCoralFan => "dead_fire_coral_fan",
      Self::DeadHornCoralFan => "dead_horn_coral_fan",
      Self::TubeCoralFan => "tube_coral_fan",
      Self::BrainCoralFan => "brain_coral_fan",
      Self::BubbleCoralFan => "bubble_coral_fan",
      Self::FireCoralFan => "fire_coral_fan",
      Self::HornCoralFan => "horn_coral_fan",
      Self::DeadTubeCoralWallFan => "dead_tube_coral_wall_fan",
      Self::DeadBrainCoralWallFan => "dead_brain_coral_wall_fan",
      Self::DeadBubbleCoralWallFan => "dead_bubble_coral_wall_fan",
      Self::DeadFireCoralWallFan => "dead_fire_coral_wall_fan",
      Self::DeadHornCoralWallFan => "dead_horn_coral_wall_fan",
      Self::TubeCoralWallFan => "tube_coral_wall_fan",
      Self::BrainCoralWallFan => "brain_coral_wall_fan",
      Self::BubbleCoralWallFan => "bubble_coral_wall_fan",
      Self::FireCoralWallFan => "fire_coral_wall_fan",
      Self::HornCoralWallFan => "horn_coral_wall_fan",
      Self::SeaPickle => "sea_pickle",
      Self::BlueIce => "blue_ice",
      Self::Conduit => "conduit",
      Self::BambooSapling => "bamboo_sapling",
      Self::Bamboo => "bamboo",
      Self::PottedBamboo => "potted_bamboo",
      Self::VoidAir => "void_air",
      Self::CaveAir => "cave_air",
      Self::BubbleColumn => "bubble_column",
      Self::PolishedGraniteStairs => "polished_granite_stairs",
      Self::SmoothRedSandstoneStairs => "smooth_red_sandstone_stairs",
      Self::MossyStoneBrickStairs => "mossy_stone_brick_stairs",
      Self::PolishedDioriteStairs => "polished_diorite_stairs",
      Self::MossyCobblestoneStairs => "mossy_cobblestone_stairs",
      Self::EndStoneBrickStairs => "end_stone_brick_stairs",
      Self::StoneStairs => "stone_stairs",
      Self::SmoothSandstoneStairs => "smooth_sandstone_stairs",
      Self::SmoothQuartzStairs => "smooth_quartz_stairs",
      Self::GraniteStairs => "granite_stairs",
      Self::AndesiteStairs => "andesite_stairs",
      Self::RedNetherBrickStairs => "red_nether_brick_stairs",
      Self::PolishedAndesiteStairs => "polished_andesite_stairs",
      Self::DioriteStairs => "diorite_stairs",
      Self::PolishedGraniteSlab => "polished_granite_slab",
      Self::SmoothRedSandstoneSlab => "smooth_red_sandstone_slab",
      Self::MossyStoneBrickSlab => "mossy_stone_brick_slab",
      Self::PolishedDioriteSlab => "polished_diorite_slab",
      Self::MossyCobblestoneSlab => "mossy_cobblestone_slab",
      Self::EndStoneBrickSlab => "end_stone_brick_slab",
      Self::SmoothSandstoneSlab => "smooth_sandstone_slab",
      Self::SmoothQuartzSlab => "smooth_quartz_slab",
      Self::GraniteSlab => "granite_slab",
      Self::AndesiteSlab => "andesite_slab",
      Self::RedNetherBrickSlab => "red_nether_brick_slab",
      Self::PolishedAndesiteSlab => "polished_andesite_slab",
      Self::DioriteSlab => "diorite_slab",
      Self::BrickWall => "brick_wall",
      Self::PrismarineWall => "prismarine_wall",
      Self::RedSandstoneWall => "red_sandstone_wall",
      Self::MossyStoneBrickWall => "mossy_stone_brick_wall",
      Self::GraniteWall => "granite_wall",
      Self::StoneBrickWall => "stone_brick_wall",
      Self::NetherBrickWall => "nether_brick_wall",
      Self::AndesiteWall => "andesite_wall",
      Self::RedNetherBrickWall => "red_nether_brick_wall",
      Self::SandstoneWall => "sandstone_wall",
      Self::EndStoneBrickWall => "end_stone_brick_wall",
      Self::DioriteWall => "diorite_wall",
      Self::Scaffolding => "scaffolding",
      Self::Loom => "loom",
      Self::Barrel => "barrel",
      Self::Smoker => "smoker",
      Self::BlastFurnace => "blast_furnace",
      Self::CartographyTable => "cartography_table",
      Self::FletchingTable => "fletching_table",
      Self::Grindstone => "grindstone",
      Self::Lectern => "lectern",
      Self::SmithingTable => "smithing_table",
      Self::Stonecutter => "stonecutter",
      Self::Bell => "bell",
      Self::Lantern => "lantern",
      Self::Campfire => "campfire",
      Self::SweetBerryBush => "sweet_berry_bush",
      Self::StructureBlock => "structure_block",
      Self::Jigsaw => "jigsaw",
      Self::Composter => "composter",
      Self::BeeNest => "bee_nest",
      Self::Beehive => "beehive",
      Self::HoneyBlock => "honey_block",
      Self::HoneycombBlock => "honeycomb_block",
    })
  }
  fn from_registry_key(key: &NamespacedKey) -> Option<Self> {
    if *key.namespace() != crate::helpers::MINECRAFT_NAMESPACE {return None;}
    Some(match &**key.key() {
      "air" => Self::Air,
      "stone" => Self::Stone,
      "granite" => Self::Granite,
      "polished_granite" => Self::PolishedGranite,
      "diorite" => Self::Diorite,
      "polished_diorite" => Self::PolishedDiorite,
      "andesite" => Self::Andesite,
      "polished_andesite" => Self::PolishedAndesite,
      "grass_block" => Self::GrassBlock,
      "dirt" => Self::Dirt,
      "coarse_dirt" => Self::CoarseDirt,
      "podzol" => Self::Podzol,
      "cobblestone" => Self::Cobblestone,
      "oak_planks" => Self::OakPlanks,
      "spruce_planks" => Self::SprucePlanks,
      "birch_planks" => Self::BirchPlanks,
      "jungle_planks" => Self::JunglePlanks,
      "acacia_planks" => Self::AcaciaPlanks,
      "dark_oak_planks" => Self::DarkOakPlanks,
      "oak_sapling" => Self::OakSapling,
      "spruce_sapling" => Self::SpruceSapling,
      "birch_sapling" => Self::BirchSapling,
      "jungle_sapling" => Self::JungleSapling,
      "acacia_sapling" => Self::AcaciaSapling,
      "dark_oak_sapling" => Self::DarkOakSapling,
      "bedrock" => Self::Bedrock,
      "water" => Self::Water,
      "lava" => Self::Lava,
      "sand" => Self::Sand,
      "red_sand" => Self::RedSand,
      "gravel" => Self::Gravel,
      "gold_ore" => Self::GoldOre,
      "iron_ore" => Self::IronOre,
      "coal_ore" => Self::CoalOre,
      "oak_log" => Self::OakLog,
      "spruce_log" => Self::SpruceLog,
      "birch_log" => Self::BirchLog,
      "jungle_log" => Self::JungleLog,
      "acacia_log" => Self::AcaciaLog,
      "dark_oak_log" => Self::DarkOakLog,
      "stripped_spruce_log" => Self::StrippedSpruceLog,
      "stripped_birch_log" => Self::StrippedBirchLog,
      "stripped_jungle_log" => Self::StrippedJungleLog,
      "stripped_acacia_log" => Self::StrippedAcaciaLog,
      "stripped_dark_oak_log" => Self::StrippedDarkOakLog,
      "stripped_oak_log" => Self::StrippedOakLog,
      "oak_wood" => Self::OakWood,
      "spruce_wood" => Self::SpruceWood,
      "birch_wood" => Self::BirchWood,
      "jungle_wood" => Self::JungleWood,
      "acacia_wood" => Self::AcaciaWood,
      "dark_oak_wood" => Self::DarkOakWood,
      "stripped_oak_wood" => Self::StrippedOakWood,
      "stripped_spruce_wood" => Self::StrippedSpruceWood,
      "stripped_birch_wood" => Self::StrippedBirchWood,
      "stripped_jungle_wood" => Self::StrippedJungleWood,
      "stripped_acacia_wood" => Self::StrippedAcaciaWood,
      "stripped_dark_oak_wood" => Self::StrippedDarkOakWood,
      "oak_leaves" => Self::OakLeaves,
      "spruce_leaves" => Self::SpruceLeaves,
      "birch_leaves" => Self::BirchLeaves,
      "jungle_leaves" => Self::JungleLeaves,
      "acacia_leaves" => Self::AcaciaLeaves,
      "dark_oak_leaves" => Self::DarkOakLeaves,
      "sponge" => Self::Sponge,
      "wet_sponge" => Self::WetSponge,
      "glass" => Self::Glass,
      "lapis_ore" => Self::LapisOre,
      "lapis_block" => Self::LapisBlock,
      "dispenser" => Self::Dispenser,
      "sandstone" => Self::Sandstone,
      "chiseled_sandstone" => Self::ChiseledSandstone,
      "cut_sandstone" => Self::CutSandstone,
      "note_block" => Self::NoteBlock,
      "white_bed" => Self::WhiteBed,
      "orange_bed" => Self::OrangeBed,
      "magenta_bed" => Self::MagentaBed,
      "light_blue_bed" => Self::LightBlueBed,
      "yellow_bed" => Self::YellowBed,
      "lime_bed" => Self::LimeBed,
      "pink_bed" => Self::PinkBed,
      "gray_bed" => Self::GrayBed,
      "light_gray_bed" => Self::LightGrayBed,
      "cyan_bed" => Self::CyanBed,
      "purple_bed" => Self::PurpleBed,
      "blue_bed" => Self::BlueBed,
      "brown_bed" => Self::BrownBed,
      "green_bed" => Self::GreenBed,
      "red_bed" => Self::RedBed,
      "black_bed" => Self::BlackBed,
      "powered_rail" => Self::PoweredRail,
      "detector_rail" => Self::DetectorRail,
      "sticky_piston" => Self::StickyPiston,
      "cobweb" => Self::Cobweb,
      "grass" => Self::Grass,
      "fern" => Self::Fern,
      "dead_bush" => Self::DeadBush,
      "seagrass" => Self::Seagrass,
      "tall_seagrass" => Self::TallSeagrass,
      "piston" => Self::Piston,
      "piston_head" => Self::PistonHead,
      "white_wool" => Self::WhiteWool,
      "orange_wool" => Self::OrangeWool,
      "magenta_wool" => Self::MagentaWool,
      "light_blue_wool" => Self::LightBlueWool,
      "yellow_wool" => Self::YellowWool,
      "lime_wool" => Self::LimeWool,
      "pink_wool" => Self::PinkWool,
      "gray_wool" => Self::GrayWool,
      "light_gray_wool" => Self::LightGrayWool,
      "cyan_wool" => Self::CyanWool,
      "purple_wool" => Self::PurpleWool,
      "blue_wool" => Self::BlueWool,
      "brown_wool" => Self::BrownWool,
      "green_wool" => Self::GreenWool,
      "red_wool" => Self::RedWool,
      "black_wool" => Self::BlackWool,
      "moving_piston" => Self::MovingPiston,
      "dandelion" => Self::Dandelion,
      "poppy" => Self::Poppy,
      "blue_orchid" => Self::BlueOrchid,
      "allium" => Self::Allium,
      "azure_bluet" => Self::AzureBluet,
      "red_tulip" => Self::RedTulip,
      "orange_tulip" => Self::OrangeTulip,
      "white_tulip" => Self::WhiteTulip,
      "pink_tulip" => Self::PinkTulip,
      "oxeye_daisy" => Self::OxeyeDaisy,
      "cornflower" => Self::Cornflower,
      "wither_rose" => Self::WitherRose,
      "lily_of_the_valley" => Self::LilyOfTheValley,
      "brown_mushroom" => Self::BrownMushroom,
      "red_mushroom" => Self::RedMushroom,
      "gold_block" => Self::GoldBlock,
      "iron_block" => Self::IronBlock,
      "bricks" => Self::Bricks,
      "tnt" => Self::Tnt,
      "bookshelf" => Self::Bookshelf,
      "mossy_cobblestone" => Self::MossyCobblestone,
      "obsidian" => Self::Obsidian,
      "torch" => Self::Torch,
      "wall_torch" => Self::WallTorch,
      "fire" => Self::Fire,
      "spawner" => Self::Spawner,
      "oak_stairs" => Self::OakStairs,
      "chest" => Self::Chest,
      "redstone_wire" => Self::RedstoneWire,
      "diamond_ore" => Self::DiamondOre,
      "diamond_block" => Self::DiamondBlock,
      "crafting_table" => Self::CraftingTable,
      "wheat" => Self::Wheat,
      "farmland" => Self::Farmland,
      "furnace" => Self::Furnace,
      "oak_sign" => Self::OakSign,
      "spruce_sign" => Self::SpruceSign,
      "birch_sign" => Self::BirchSign,
      "acacia_sign" => Self::AcaciaSign,
      "jungle_sign" => Self::JungleSign,
      "dark_oak_sign" => Self::DarkOakSign,
      "oak_door" => Self::OakDoor,
      "ladder" => Self::Ladder,
      "rail" => Self::Rail,
      "cobblestone_stairs" => Self::CobblestoneStairs,
      "oak_wall_sign" => Self::OakWallSign,
      "spruce_wall_sign" => Self::SpruceWallSign,
      "birch_wall_sign" => Self::BirchWallSign,
      "acacia_wall_sign" => Self::AcaciaWallSign,
      "jungle_wall_sign" => Self::JungleWallSign,
      "dark_oak_wall_sign" => Self::DarkOakWallSign,
      "lever" => Self::Lever,
      "stone_pressure_plate" => Self::StonePressurePlate,
      "iron_door" => Self::IronDoor,
      "oak_pressure_plate" => Self::OakPressurePlate,
      "spruce_pressure_plate" => Self::SprucePressurePlate,
      "birch_pressure_plate" => Self::BirchPressurePlate,
      "jungle_pressure_plate" => Self::JunglePressurePlate,
      "acacia_pressure_plate" => Self::AcaciaPressurePlate,
      "dark_oak_pressure_plate" => Self::DarkOakPressurePlate,
      "redstone_ore" => Self::RedstoneOre,
      "redstone_torch" => Self::RedstoneTorch,
      "redstone_wall_torch" => Self::RedstoneWallTorch,
      "stone_button" => Self::StoneButton,
      "snow" => Self::Snow,
      "ice" => Self::Ice,
      "snow_block" => Self::SnowBlock,
      "cactus" => Self::Cactus,
      "clay" => Self::Clay,
      "sugar_cane" => Self::SugarCane,
      "jukebox" => Self::Jukebox,
      "oak_fence" => Self::OakFence,
      "pumpkin" => Self::Pumpkin,
      "netherrack" => Self::Netherrack,
      "soul_sand" => Self::SoulSand,
      "glowstone" => Self::Glowstone,
      "nether_portal" => Self::NetherPortal,
      "carved_pumpkin" => Self::CarvedPumpkin,
      "jack_o_lantern" => Self::JackOLantern,
      "cake" => Self::Cake,
      "repeater" => Self::Repeater,
      "white_stained_glass" => Self::WhiteStainedGlass,
      "orange_stained_glass" => Self::OrangeStainedGlass,
      "magenta_stained_glass" => Self::MagentaStainedGlass,
      "light_blue_stained_glass" => Self::LightBlueStainedGlass,
      "yellow_stained_glass" => Self::YellowStainedGlass,
      "lime_stained_glass" => Self::LimeStainedGlass,
      "pink_stained_glass" => Self::PinkStainedGlass,
      "gray_stained_glass" => Self::GrayStainedGlass,
      "light_gray_stained_glass" => Self::LightGrayStainedGlass,
      "cyan_stained_glass" => Self::CyanStainedGlass,
      "purple_stained_glass" => Self::PurpleStainedGlass,
      "blue_stained_glass" => Self::BlueStainedGlass,
      "brown_stained_glass" => Self::BrownStainedGlass,
      "green_stained_glass" => Self::GreenStainedGlass,
      "red_stained_glass" => Self::RedStainedGlass,
      "black_stained_glass" => Self::BlackStainedGlass,
      "oak_trapdoor" => Self::OakTrapdoor,
      "spruce_trapdoor" => Self::SpruceTrapdoor,
      "birch_trapdoor" => Self::BirchTrapdoor,
      "jungle_trapdoor" => Self::JungleTrapdoor,
      "acacia_trapdoor" => Self::AcaciaTrapdoor,
      "dark_oak_trapdoor" => Self::DarkOakTrapdoor,
      "stone_bricks" => Self::StoneBricks,
      "mossy_stone_bricks" => Self::MossyStoneBricks,
      "cracked_stone_bricks" => Self::CrackedStoneBricks,
      "chiseled_stone_bricks" => Self::ChiseledStoneBricks,
      "infested_stone" => Self::InfestedStone,
      "infested_cobblestone" => Self::InfestedCobblestone,
      "infested_stone_bricks" => Self::InfestedStoneBricks,
      "infested_mossy_stone_bricks" => Self::InfestedMossyStoneBricks,
      "infested_cracked_stone_bricks" => Self::InfestedCrackedStoneBricks,
      "infested_chiseled_stone_bricks" => Self::InfestedChiseledStoneBricks,
      "brown_mushroom_block" => Self::BrownMushroomBlock,
      "red_mushroom_block" => Self::RedMushroomBlock,
      "mushroom_stem" => Self::MushroomStem,
      "iron_bars" => Self::IronBars,
      "glass_pane" => Self::GlassPane,
      "melon" => Self::Melon,
      "attached_pumpkin_stem" => Self::AttachedPumpkinStem,
      "attached_melon_stem" => Self::AttachedMelonStem,
      "pumpkin_stem" => Self::PumpkinStem,
      "melon_stem" => Self::MelonStem,
      "vine" => Self::Vine,
      "oak_fence_gate" => Self::OakFenceGate,
      "brick_stairs" => Self::BrickStairs,
      "stone_brick_stairs" => Self::StoneBrickStairs,
      "mycelium" => Self::Mycelium,
      "lily_pad" => Self::LilyPad,
      "nether_bricks" => Self::NetherBricks,
      "nether_brick_fence" => Self::NetherBrickFence,
      "nether_brick_stairs" => Self::NetherBrickStairs,
      "nether_wart" => Self::NetherWart,
      "enchanting_table" => Self::EnchantingTable,
      "brewing_stand" => Self::BrewingStand,
      "cauldron" => Self::Cauldron,
      "end_portal" => Self::EndPortal,
      "end_portal_frame" => Self::EndPortalFrame,
      "end_stone" => Self::EndStone,
      "dragon_egg" => Self::DragonEgg,
      "redstone_lamp" => Self::RedstoneLamp,
      "cocoa" => Self::Cocoa,
      "sandstone_stairs" => Self::SandstoneStairs,
      "emerald_ore" => Self::EmeraldOre,
      "ender_chest" => Self::EnderChest,
      "tripwire_hook" => Self::TripwireHook,
      "tripwire" => Self::Tripwire,
      "emerald_block" => Self::EmeraldBlock,
      "spruce_stairs" => Self::SpruceStairs,
      "birch_stairs" => Self::BirchStairs,
      "jungle_stairs" => Self::JungleStairs,
      "command_block" => Self::CommandBlock,
      "beacon" => Self::Beacon,
      "cobblestone_wall" => Self::CobblestoneWall,
      "mossy_cobblestone_wall" => Self::MossyCobblestoneWall,
      "flower_pot" => Self::FlowerPot,
      "potted_oak_sapling" => Self::PottedOakSapling,
      "potted_spruce_sapling" => Self::PottedSpruceSapling,
      "potted_birch_sapling" => Self::PottedBirchSapling,
      "potted_jungle_sapling" => Self::PottedJungleSapling,
      "potted_acacia_sapling" => Self::PottedAcaciaSapling,
      "potted_dark_oak_sapling" => Self::PottedDarkOakSapling,
      "potted_fern" => Self::PottedFern,
      "potted_dandelion" => Self::PottedDandelion,
      "potted_poppy" => Self::PottedPoppy,
      "potted_blue_orchid" => Self::PottedBlueOrchid,
      "potted_allium" => Self::PottedAllium,
      "potted_azure_bluet" => Self::PottedAzureBluet,
      "potted_red_tulip" => Self::PottedRedTulip,
      "potted_orange_tulip" => Self::PottedOrangeTulip,
      "potted_white_tulip" => Self::PottedWhiteTulip,
      "potted_pink_tulip" => Self::PottedPinkTulip,
      "potted_oxeye_daisy" => Self::PottedOxeyeDaisy,
      "potted_cornflower" => Self::PottedCornflower,
      "potted_lily_of_the_valley" => Self::PottedLilyOfTheValley,
      "potted_wither_rose" => Self::PottedWitherRose,
      "potted_red_mushroom" => Self::PottedRedMushroom,
      "potted_brown_mushroom" => Self::PottedBrownMushroom,
      "potted_dead_bush" => Self::PottedDeadBush,
      "potted_cactus" => Self::PottedCactus,
      "carrots" => Self::Carrots,
      "potatoes" => Self::Potatoes,
      "oak_button" => Self::OakButton,
      "spruce_button" => Self::SpruceButton,
      "birch_button" => Self::BirchButton,
      "jungle_button" => Self::JungleButton,
      "acacia_button" => Self::AcaciaButton,
      "dark_oak_button" => Self::DarkOakButton,
      "skeleton_skull" => Self::SkeletonSkull,
      "skeleton_wall_skull" => Self::SkeletonWallSkull,
      "wither_skeleton_skull" => Self::WitherSkeletonSkull,
      "wither_skeleton_wall_skull" => Self::WitherSkeletonWallSkull,
      "zombie_head" => Self::ZombieHead,
      "zombie_wall_head" => Self::ZombieWallHead,
      "player_head" => Self::PlayerHead,
      "player_wall_head" => Self::PlayerWallHead,
      "creeper_head" => Self::CreeperHead,
      "creeper_wall_head" => Self::CreeperWallHead,
      "dragon_head" => Self::DragonHead,
      "dragon_wall_head" => Self::DragonWallHead,
      "anvil" => Self::Anvil,
      "chipped_anvil" => Self::ChippedAnvil,
      "damaged_anvil" => Self::DamagedAnvil,
      "trapped_chest" => Self::TrappedChest,
      "light_weighted_pressure_plate" => Self::LightWeightedPressurePlate,
      "heavy_weighted_pressure_plate" => Self::HeavyWeightedPressurePlate,
      "comparator" => Self::Comparator,
      "daylight_detector" => Self::DaylightDetector,
      "redstone_block" => Self::RedstoneBlock,
      "nether_quartz_ore" => Self::NetherQuartzOre,
      "hopper" => Self::Hopper,
      "quartz_block" => Self::QuartzBlock,
      "chiseled_quartz_block" => Self::ChiseledQuartzBlock,
      "quartz_pillar" => Self::QuartzPillar,
      "quartz_stairs" => Self::QuartzStairs,
      "activator_rail" => Self::ActivatorRail,
      "dropper" => Self::Dropper,
      "white_terracotta" => Self::WhiteTerracotta,
      "orange_terracotta" => Self::OrangeTerracotta,
      "magenta_terracotta" => Self::MagentaTerracotta,
      "light_blue_terracotta" => Self::LightBlueTerracotta,
      "yellow_terracotta" => Self::YellowTerracotta,
      "lime_terracotta" => Self::LimeTerracotta,
      "pink_terracotta" => Self::PinkTerracotta,
      "gray_terracotta" => Self::GrayTerracotta,
      "light_gray_terracotta" => Self::LightGrayTerracotta,
      "cyan_terracotta" => Self::CyanTerracotta,
      "purple_terracotta" => Self::PurpleTerracotta,
      "blue_terracotta" => Self::BlueTerracotta,
      "brown_terracotta" => Self::BrownTerracotta,
      "green_terracotta" => Self::GreenTerracotta,
      "red_terracotta" => Self::RedTerracotta,
      "black_terracotta" => Self::BlackTerracotta,
      "white_stained_glass_pane" => Self::WhiteStainedGlassPane,
      "orange_stained_glass_pane" => Self::OrangeStainedGlassPane,
      "magenta_stained_glass_pane" => Self::MagentaStainedGlassPane,
      "light_blue_stained_glass_pane" => Self::LightBlueStainedGlassPane,
      "yellow_stained_glass_pane" => Self::YellowStainedGlassPane,
      "lime_stained_glass_pane" => Self::LimeStainedGlassPane,
      "pink_stained_glass_pane" => Self::PinkStainedGlassPane,
      "gray_stained_glass_pane" => Self::GrayStainedGlassPane,
      "light_gray_stained_glass_pane" => Self::LightGrayStainedGlassPane,
      "cyan_stained_glass_pane" => Self::CyanStainedGlassPane,
      "purple_stained_glass_pane" => Self::PurpleStainedGlassPane,
      "blue_stained_glass_pane" => Self::BlueStainedGlassPane,
      "brown_stained_glass_pane" => Self::BrownStainedGlassPane,
      "green_stained_glass_pane" => Self::GreenStainedGlassPane,
      "red_stained_glass_pane" => Self::RedStainedGlassPane,
      "black_stained_glass_pane" => Self::BlackStainedGlassPane,
      "acacia_stairs" => Self::AcaciaStairs,
      "dark_oak_stairs" => Self::DarkOakStairs,
      "slime_block" => Self::SlimeBlock,
      "barrier" => Self::Barrier,
      "iron_trapdoor" => Self::IronTrapdoor,
      "prismarine" => Self::Prismarine,
      "prismarine_bricks" => Self::PrismarineBricks,
      "dark_prismarine" => Self::DarkPrismarine,
      "prismarine_stairs" => Self::PrismarineStairs,
      "prismarine_brick_stairs" => Self::PrismarineBrickStairs,
      "dark_prismarine_stairs" => Self::DarkPrismarineStairs,
      "prismarine_slab" => Self::PrismarineSlab,
      "prismarine_brick_slab" => Self::PrismarineBrickSlab,
      "dark_prismarine_slab" => Self::DarkPrismarineSlab,
      "sea_lantern" => Self::SeaLantern,
      "hay_block" => Self::HayBlock,
      "white_carpet" => Self::WhiteCarpet,
      "orange_carpet" => Self::OrangeCarpet,
      "magenta_carpet" => Self::MagentaCarpet,
      "light_blue_carpet" => Self::LightBlueCarpet,
      "yellow_carpet" => Self::YellowCarpet,
      "lime_carpet" => Self::LimeCarpet,
      "pink_carpet" => Self::PinkCarpet,
      "gray_carpet" => Self::GrayCarpet,
      "light_gray_carpet" => Self::LightGrayCarpet,
      "cyan_carpet" => Self::CyanCarpet,
      "purple_carpet" => Self::PurpleCarpet,
      "blue_carpet" => Self::BlueCarpet,
      "brown_carpet" => Self::BrownCarpet,
      "green_carpet" => Self::GreenCarpet,
      "red_carpet" => Self::RedCarpet,
      "black_carpet" => Self::BlackCarpet,
      "terracotta" => Self::Terracotta,
      "coal_block" => Self::CoalBlock,
      "packed_ice" => Self::PackedIce,
      "sunflower" => Self::Sunflower,
      "lilac" => Self::Lilac,
      "rose_bush" => Self::RoseBush,
      "peony" => Self::Peony,
      "tall_grass" => Self::TallGrass,
      "large_fern" => Self::LargeFern,
      "white_banner" => Self::WhiteBanner,
      "orange_banner" => Self::OrangeBanner,
      "magenta_banner" => Self::MagentaBanner,
      "light_blue_banner" => Self::LightBlueBanner,
      "yellow_banner" => Self::YellowBanner,
      "lime_banner" => Self::LimeBanner,
      "pink_banner" => Self::PinkBanner,
      "gray_banner" => Self::GrayBanner,
      "light_gray_banner" => Self::LightGrayBanner,
      "cyan_banner" => Self::CyanBanner,
      "purple_banner" => Self::PurpleBanner,
      "blue_banner" => Self::BlueBanner,
      "brown_banner" => Self::BrownBanner,
      "green_banner" => Self::GreenBanner,
      "red_banner" => Self::RedBanner,
      "black_banner" => Self::BlackBanner,
      "white_wall_banner" => Self::WhiteWallBanner,
      "orange_wall_banner" => Self::OrangeWallBanner,
      "magenta_wall_banner" => Self::MagentaWallBanner,
      "light_blue_wall_banner" => Self::LightBlueWallBanner,
      "yellow_wall_banner" => Self::YellowWallBanner,
      "lime_wall_banner" => Self::LimeWallBanner,
      "pink_wall_banner" => Self::PinkWallBanner,
      "gray_wall_banner" => Self::GrayWallBanner,
      "light_gray_wall_banner" => Self::LightGrayWallBanner,
      "cyan_wall_banner" => Self::CyanWallBanner,
      "purple_wall_banner" => Self::PurpleWallBanner,
      "blue_wall_banner" => Self::BlueWallBanner,
      "brown_wall_banner" => Self::BrownWallBanner,
      "green_wall_banner" => Self::GreenWallBanner,
      "red_wall_banner" => Self::RedWallBanner,
      "black_wall_banner" => Self::BlackWallBanner,
      "red_sandstone" => Self::RedSandstone,
      "chiseled_red_sandstone" => Self::ChiseledRedSandstone,
      "cut_red_sandstone" => Self::CutRedSandstone,
      "red_sandstone_stairs" => Self::RedSandstoneStairs,
      "oak_slab" => Self::OakSlab,
      "spruce_slab" => Self::SpruceSlab,
      "birch_slab" => Self::BirchSlab,
      "jungle_slab" => Self::JungleSlab,
      "acacia_slab" => Self::AcaciaSlab,
      "dark_oak_slab" => Self::DarkOakSlab,
      "stone_slab" => Self::StoneSlab,
      "smooth_stone_slab" => Self::SmoothStoneSlab,
      "sandstone_slab" => Self::SandstoneSlab,
      "cut_sandstone_slab" => Self::CutSandstoneSlab,
      "petrified_oak_slab" => Self::PetrifiedOakSlab,
      "cobblestone_slab" => Self::CobblestoneSlab,
      "brick_slab" => Self::BrickSlab,
      "stone_brick_slab" => Self::StoneBrickSlab,
      "nether_brick_slab" => Self::NetherBrickSlab,
      "quartz_slab" => Self::QuartzSlab,
      "red_sandstone_slab" => Self::RedSandstoneSlab,
      "cut_red_sandstone_slab" => Self::CutRedSandstoneSlab,
      "purpur_slab" => Self::PurpurSlab,
      "smooth_stone" => Self::SmoothStone,
      "smooth_sandstone" => Self::SmoothSandstone,
      "smooth_quartz" => Self::SmoothQuartz,
      "smooth_red_sandstone" => Self::SmoothRedSandstone,
      "spruce_fence_gate" => Self::SpruceFenceGate,
      "birch_fence_gate" => Self::BirchFenceGate,
      "jungle_fence_gate" => Self::JungleFenceGate,
      "acacia_fence_gate" => Self::AcaciaFenceGate,
      "dark_oak_fence_gate" => Self::DarkOakFenceGate,
      "spruce_fence" => Self::SpruceFence,
      "birch_fence" => Self::BirchFence,
      "jungle_fence" => Self::JungleFence,
      "acacia_fence" => Self::AcaciaFence,
      "dark_oak_fence" => Self::DarkOakFence,
      "spruce_door" => Self::SpruceDoor,
      "birch_door" => Self::BirchDoor,
      "jungle_door" => Self::JungleDoor,
      "acacia_door" => Self::AcaciaDoor,
      "dark_oak_door" => Self::DarkOakDoor,
      "end_rod" => Self::EndRod,
      "chorus_plant" => Self::ChorusPlant,
      "chorus_flower" => Self::ChorusFlower,
      "purpur_block" => Self::PurpurBlock,
      "purpur_pillar" => Self::PurpurPillar,
      "purpur_stairs" => Self::PurpurStairs,
      "end_stone_bricks" => Self::EndStoneBricks,
      "beetroots" => Self::Beetroots,
      "grass_path" => Self::GrassPath,
      "end_gateway" => Self::EndGateway,
      "repeating_command_block" => Self::RepeatingCommandBlock,
      "chain_command_block" => Self::ChainCommandBlock,
      "frosted_ice" => Self::FrostedIce,
      "magma_block" => Self::MagmaBlock,
      "nether_wart_block" => Self::NetherWartBlock,
      "red_nether_bricks" => Self::RedNetherBricks,
      "bone_block" => Self::BoneBlock,
      "structure_void" => Self::StructureVoid,
      "observer" => Self::Observer,
      "shulker_box" => Self::ShulkerBox,
      "white_shulker_box" => Self::WhiteShulkerBox,
      "orange_shulker_box" => Self::OrangeShulkerBox,
      "magenta_shulker_box" => Self::MagentaShulkerBox,
      "light_blue_shulker_box" => Self::LightBlueShulkerBox,
      "yellow_shulker_box" => Self::YellowShulkerBox,
      "lime_shulker_box" => Self::LimeShulkerBox,
      "pink_shulker_box" => Self::PinkShulkerBox,
      "gray_shulker_box" => Self::GrayShulkerBox,
      "light_gray_shulker_box" => Self::LightGrayShulkerBox,
      "cyan_shulker_box" => Self::CyanShulkerBox,
      "purple_shulker_box" => Self::PurpleShulkerBox,
      "blue_shulker_box" => Self::BlueShulkerBox,
      "brown_shulker_box" => Self::BrownShulkerBox,
      "green_shulker_box" => Self::GreenShulkerBox,
      "red_shulker_box" => Self::RedShulkerBox,
      "black_shulker_box" => Self::BlackShulkerBox,
      "white_glazed_terracotta" => Self::WhiteGlazedTerracotta,
      "orange_glazed_terracotta" => Self::OrangeGlazedTerracotta,
      "magenta_glazed_terracotta" => Self::MagentaGlazedTerracotta,
      "light_blue_glazed_terracotta" => Self::LightBlueGlazedTerracotta,
      "yellow_glazed_terracotta" => Self::YellowGlazedTerracotta,
      "lime_glazed_terracotta" => Self::LimeGlazedTerracotta,
      "pink_glazed_terracotta" => Self::PinkGlazedTerracotta,
      "gray_glazed_terracotta" => Self::GrayGlazedTerracotta,
      "light_gray_glazed_terracotta" => Self::LightGrayGlazedTerracotta,
      "cyan_glazed_terracotta" => Self::CyanGlazedTerracotta,
      "purple_glazed_terracotta" => Self::PurpleGlazedTerracotta,
      "blue_glazed_terracotta" => Self::BlueGlazedTerracotta,
      "brown_glazed_terracotta" => Self::BrownGlazedTerracotta,
      "green_glazed_terracotta" => Self::GreenGlazedTerracotta,
      "red_glazed_terracotta" => Self::RedGlazedTerracotta,
      "black_glazed_terracotta" => Self::BlackGlazedTerracotta,
      "white_concrete" => Self::WhiteConcrete,
      "orange_concrete" => Self::OrangeConcrete,
      "magenta_concrete" => Self::MagentaConcrete,
      "light_blue_concrete" => Self::LightBlueConcrete,
      "yellow_concrete" => Self::YellowConcrete,
      "lime_concrete" => Self::LimeConcrete,
      "pink_concrete" => Self::PinkConcrete,
      "gray_concrete" => Self::GrayConcrete,
      "light_gray_concrete" => Self::LightGrayConcrete,
      "cyan_concrete" => Self::CyanConcrete,
      "purple_concrete" => Self::PurpleConcrete,
      "blue_concrete" => Self::BlueConcrete,
      "brown_concrete" => Self::BrownConcrete,
      "green_concrete" => Self::GreenConcrete,
      "red_concrete" => Self::RedConcrete,
      "black_concrete" => Self::BlackConcrete,
      "white_concrete_powder" => Self::WhiteConcretePowder,
      "orange_concrete_powder" => Self::OrangeConcretePowder,
      "magenta_concrete_powder" => Self::MagentaConcretePowder,
      "light_blue_concrete_powder" => Self::LightBlueConcretePowder,
      "yellow_concrete_powder" => Self::YellowConcretePowder,
      "lime_concrete_powder" => Self::LimeConcretePowder,
      "pink_concrete_powder" => Self::PinkConcretePowder,
      "gray_concrete_powder" => Self::GrayConcretePowder,
      "light_gray_concrete_powder" => Self::LightGrayConcretePowder,
      "cyan_concrete_powder" => Self::CyanConcretePowder,
      "purple_concrete_powder" => Self::PurpleConcretePowder,
      "blue_concrete_powder" => Self::BlueConcretePowder,
      "brown_concrete_powder" => Self::BrownConcretePowder,
      "green_concrete_powder" => Self::GreenConcretePowder,
      "red_concrete_powder" => Self::RedConcretePowder,
      "black_concrete_powder" => Self::BlackConcretePowder,
      "kelp" => Self::Kelp,
      "kelp_plant" => Self::KelpPlant,
      "dried_kelp_block" => Self::DriedKelpBlock,
      "turtle_egg" => Self::TurtleEgg,
      "dead_tube_coral_block" => Self::DeadTubeCoralBlock,
      "dead_brain_coral_block" => Self::DeadBrainCoralBlock,
      "dead_bubble_coral_block" => Self::DeadBubbleCoralBlock,
      "dead_fire_coral_block" => Self::DeadFireCoralBlock,
      "dead_horn_coral_block" => Self::DeadHornCoralBlock,
      "tube_coral_block" => Self::TubeCoralBlock,
      "brain_coral_block" => Self::BrainCoralBlock,
      "bubble_coral_block" => Self::BubbleCoralBlock,
      "fire_coral_block" => Self::FireCoralBlock,
      "horn_coral_block" => Self::HornCoralBlock,
      "dead_tube_coral" => Self::DeadTubeCoral,
      "dead_brain_coral" => Self::DeadBrainCoral,
      "dead_bubble_coral" => Self::DeadBubbleCoral,
      "dead_fire_coral" => Self::DeadFireCoral,
      "dead_horn_coral" => Self::DeadHornCoral,
      "tube_coral" => Self::TubeCoral,
      "brain_coral" => Self::BrainCoral,
      "bubble_coral" => Self::BubbleCoral,
      "fire_coral" => Self::FireCoral,
      "horn_coral" => Self::HornCoral,
      "dead_tube_coral_fan" => Self::DeadTubeCoralFan,
      "dead_brain_coral_fan" => Self::DeadBrainCoralFan,
      "dead_bubble_coral_fan" => Self::DeadBubbleCoralFan,
      "dead_fire_coral_fan" => Self::DeadFireCoralFan,
      "dead_horn_coral_fan" => Self::DeadHornCoralFan,
      "tube_coral_fan" => Self::TubeCoralFan,
      "brain_coral_fan" => Self::BrainCoralFan,
      "bubble_coral_fan" => Self::BubbleCoralFan,
      "fire_coral_fan" => Self::FireCoralFan,
      "horn_coral_fan" => Self::HornCoralFan,
      "dead_tube_coral_wall_fan" => Self::DeadTubeCoralWallFan,
      "dead_brain_coral_wall_fan" => Self::DeadBrainCoralWallFan,
      "dead_bubble_coral_wall_fan" => Self::DeadBubbleCoralWallFan,
      "dead_fire_coral_wall_fan" => Self::DeadFireCoralWallFan,
      "dead_horn_coral_wall_fan" => Self::DeadHornCoralWallFan,
      "tube_coral_wall_fan" => Self::TubeCoralWallFan,
      "brain_coral_wall_fan" => Self::BrainCoralWallFan,
      "bubble_coral_wall_fan" => Self::BubbleCoralWallFan,
      "fire_coral_wall_fan" => Self::FireCoralWallFan,
      "horn_coral_wall_fan" => Self::HornCoralWallFan,
      "sea_pickle" => Self::SeaPickle,
      "blue_ice" => Self::BlueIce,
      "conduit" => Self::Conduit,
      "bamboo_sapling" => Self::BambooSapling,
      "bamboo" => Self::Bamboo,
      "potted_bamboo" => Self::PottedBamboo,
      "void_air" => Self::VoidAir,
      "cave_air" => Self::CaveAir,
      "bubble_column" => Self::BubbleColumn,
      "polished_granite_stairs" => Self::PolishedGraniteStairs,
      "smooth_red_sandstone_stairs" => Self::SmoothRedSandstoneStairs,
      "mossy_stone_brick_stairs" => Self::MossyStoneBrickStairs,
      "polished_diorite_stairs" => Self::PolishedDioriteStairs,
      "mossy_cobblestone_stairs" => Self::MossyCobblestoneStairs,
      "end_stone_brick_stairs" => Self::EndStoneBrickStairs,
      "stone_stairs" => Self::StoneStairs,
      "smooth_sandstone_stairs" => Self::SmoothSandstoneStairs,
      "smooth_quartz_stairs" => Self::SmoothQuartzStairs,
      "granite_stairs" => Self::GraniteStairs,
      "andesite_stairs" => Self::AndesiteStairs,
      "red_nether_brick_stairs" => Self::RedNetherBrickStairs,
      "polished_andesite_stairs" => Self::PolishedAndesiteStairs,
      "diorite_stairs" => Self::DioriteStairs,
      "polished_granite_slab" => Self::PolishedGraniteSlab,
      "smooth_red_sandstone_slab" => Self::SmoothRedSandstoneSlab,
      "mossy_stone_brick_slab" => Self::MossyStoneBrickSlab,
      "polished_diorite_slab" => Self::PolishedDioriteSlab,
      "mossy_cobblestone_slab" => Self::MossyCobblestoneSlab,
      "end_stone_brick_slab" => Self::EndStoneBrickSlab,
      "smooth_sandstone_slab" => Self::SmoothSandstoneSlab,
      "smooth_quartz_slab" => Self::SmoothQuartzSlab,
      "granite_slab" => Self::GraniteSlab,
      "andesite_slab" => Self::AndesiteSlab,
      "red_nether_brick_slab" => Self::RedNetherBrickSlab,
      "polished_andesite_slab" => Self::PolishedAndesiteSlab,
      "diorite_slab" => Self::DioriteSlab,
      "brick_wall" => Self::BrickWall,
      "prismarine_wall" => Self::PrismarineWall,
      "red_sandstone_wall" => Self::RedSandstoneWall,
      "mossy_stone_brick_wall" => Self::MossyStoneBrickWall,
      "granite_wall" => Self::GraniteWall,
      "stone_brick_wall" => Self::StoneBrickWall,
      "nether_brick_wall" => Self::NetherBrickWall,
      "andesite_wall" => Self::AndesiteWall,
      "red_nether_brick_wall" => Self::RedNetherBrickWall,
      "sandstone_wall" => Self::SandstoneWall,
      "end_stone_brick_wall" => Self::EndStoneBrickWall,
      "diorite_wall" => Self::DioriteWall,
      "scaffolding" => Self::Scaffolding,
      "loom" => Self::Loom,
      "barrel" => Self::Barrel,
      "smoker" => Self::Smoker,
      "blast_furnace" => Self::BlastFurnace,
      "cartography_table" => Self::CartographyTable,
      "fletching_table" => Self::FletchingTable,
      "grindstone" => Self::Grindstone,
      "lectern" => Self::Lectern,
      "smithing_table" => Self::SmithingTable,
      "stonecutter" => Self::Stonecutter,
      "bell" => Self::Bell,
      "lantern" => Self::Lantern,
      "campfire" => Self::Campfire,
      "sweet_berry_bush" => Self::SweetBerryBush,
      "structure_block" => Self::StructureBlock,
      "jigsaw" => Self::Jigsaw,
      "composter" => Self::Composter,
      "bee_nest" => Self::BeeNest,
      "beehive" => Self::Beehive,
      "honey_block" => Self::HoneyBlock,
      "honeycomb_block" => Self::HoneycombBlock,
      _ => {return None;},
    })
  }
  fn get_id(&self) -> usize {
    *self as usize
  }
  fn from_id(id: usize) -> Option<Self> {
    FromPrimitive::from_usize(id)
  }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, FromPrimitive)]
#[allow(non_camel_case_types)]
/// Key: `minecraft:enchantment`
pub enum Enchantment {
  Protection = 0,
  FireProtection = 1,
  FeatherFalling = 2,
  BlastProtection = 3,
  ProjectileProtection = 4,
  Respiration = 5,
  AquaAffinity = 6,
  Thorns = 7,
  DepthStrider = 8,
  FrostWalker = 9,
  BindingCurse = 10,
  Sharpness = 11,
  Smite = 12,
  BaneOfArthropods = 13,
  Knockback = 14,
  FireAspect = 15,
  Looting = 16,
  Sweeping = 17,
  Efficiency = 18,
  SilkTouch = 19,
  Unbreaking = 20,
  Fortune = 21,
  Power = 22,
  Punch = 23,
  Flame = 24,
  Infinity = 25,
  LuckOfTheSea = 26,
  Lure = 27,
  Loyalty = 28,
  Impaling = 29,
  Riptide = 30,
  Channeling = 31,
  Multishot = 32,
  QuickCharge = 33,
  Piercing = 34,
  Mending = 35,
  VanishingCurse = 36,
}
impl Enchantment {
  pub const ID: usize = 4;
}
impl Registry for Enchantment {
  fn get_registry_key(&self) -> NamespacedKey {
    NamespacedKey::new(crate::helpers::MINECRAFT_NAMESPACE, match self {
      Self::Protection => "protection",
      Self::FireProtection => "fire_protection",
      Self::FeatherFalling => "feather_falling",
      Self::BlastProtection => "blast_protection",
      Self::ProjectileProtection => "projectile_protection",
      Self::Respiration => "respiration",
      Self::AquaAffinity => "aqua_affinity",
      Self::Thorns => "thorns",
      Self::DepthStrider => "depth_strider",
      Self::FrostWalker => "frost_walker",
      Self::BindingCurse => "binding_curse",
      Self::Sharpness => "sharpness",
      Self::Smite => "smite",
      Self::BaneOfArthropods => "bane_of_arthropods",
      Self::Knockback => "knockback",
      Self::FireAspect => "fire_aspect",
      Self::Looting => "looting",
      Self::Sweeping => "sweeping",
      Self::Efficiency => "efficiency",
      Self::SilkTouch => "silk_touch",
      Self::Unbreaking => "unbreaking",
      Self::Fortune => "fortune",
      Self::Power => "power",
      Self::Punch => "punch",
      Self::Flame => "flame",
      Self::Infinity => "infinity",
      Self::LuckOfTheSea => "luck_of_the_sea",
      Self::Lure => "lure",
      Self::Loyalty => "loyalty",
      Self::Impaling => "impaling",
      Self::Riptide => "riptide",
      Self::Channeling => "channeling",
      Self::Multishot => "multishot",
      Self::QuickCharge => "quick_charge",
      Self::Piercing => "piercing",
      Self::Mending => "mending",
      Self::VanishingCurse => "vanishing_curse",
    })
  }
  fn from_registry_key(key: &NamespacedKey) -> Option<Self> {
    if *key.namespace() != crate::helpers::MINECRAFT_NAMESPACE {return None;}
    Some(match &**key.key() {
      "protection" => Self::Protection,
      "fire_protection" => Self::FireProtection,
      "feather_falling" => Self::FeatherFalling,
      "blast_protection" => Self::BlastProtection,
      "projectile_protection" => Self::ProjectileProtection,
      "respiration" => Self::Respiration,
      "aqua_affinity" => Self::AquaAffinity,
      "thorns" => Self::Thorns,
      "depth_strider" => Self::DepthStrider,
      "frost_walker" => Self::FrostWalker,
      "binding_curse" => Self::BindingCurse,
      "sharpness" => Self::Sharpness,
      "smite" => Self::Smite,
      "bane_of_arthropods" => Self::BaneOfArthropods,
      "knockback" => Self::Knockback,
      "fire_aspect" => Self::FireAspect,
      "looting" => Self::Looting,
      "sweeping" => Self::Sweeping,
      "efficiency" => Self::Efficiency,
      "silk_touch" => Self::SilkTouch,
      "unbreaking" => Self::Unbreaking,
      "fortune" => Self::Fortune,
      "power" => Self::Power,
      "punch" => Self::Punch,
      "flame" => Self::Flame,
      "infinity" => Self::Infinity,
      "luck_of_the_sea" => Self::LuckOfTheSea,
      "lure" => Self::Lure,
      "loyalty" => Self::Loyalty,
      "impaling" => Self::Impaling,
      "riptide" => Self::Riptide,
      "channeling" => Self::Channeling,
      "multishot" => Self::Multishot,
      "quick_charge" => Self::QuickCharge,
      "piercing" => Self::Piercing,
      "mending" => Self::Mending,
      "vanishing_curse" => Self::VanishingCurse,
      _ => {return None;},
    })
  }
  fn get_id(&self) -> usize {
    *self as usize
  }
  fn from_id(id: usize) -> Option<Self> {
    FromPrimitive::from_usize(id)
  }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, FromPrimitive)]
#[allow(non_camel_case_types)]
/// Key: `minecraft:entity_type`
pub enum EntityType {
  AreaEffectCloud = 0,
  ArmorStand = 1,
  Arrow = 2,
  Bat = 3,
  Bee = 4,
  Blaze = 5,
  Boat = 6,
  Cat = 7,
  CaveSpider = 8,
  Chicken = 9,
  Cod = 10,
  Cow = 11,
  Creeper = 12,
  Donkey = 13,
  Dolphin = 14,
  DragonFireball = 15,
  Drowned = 16,
  ElderGuardian = 17,
  EndCrystal = 18,
  EnderDragon = 19,
  Enderman = 20,
  Endermite = 21,
  EvokerFangs = 22,
  Evoker = 23,
  ExperienceOrb = 24,
  EyeOfEnder = 25,
  FallingBlock = 26,
  FireworkRocket = 27,
  Fox = 28,
  Ghast = 29,
  Giant = 30,
  Guardian = 31,
  Horse = 32,
  Husk = 33,
  Illusioner = 34,
  Item = 35,
  ItemFrame = 36,
  Fireball = 37,
  LeashKnot = 38,
  Llama = 39,
  LlamaSpit = 40,
  MagmaCube = 41,
  Minecart = 42,
  ChestMinecart = 43,
  CommandBlockMinecart = 44,
  FurnaceMinecart = 45,
  HopperMinecart = 46,
  SpawnerMinecart = 47,
  TntMinecart = 48,
  Mule = 49,
  Mooshroom = 50,
  Ocelot = 51,
  Painting = 52,
  Panda = 53,
  Parrot = 54,
  Pig = 55,
  Pufferfish = 56,
  ZombiePigman = 57,
  PolarBear = 58,
  Tnt = 59,
  Rabbit = 60,
  Salmon = 61,
  Sheep = 62,
  Shulker = 63,
  ShulkerBullet = 64,
  Silverfish = 65,
  Skeleton = 66,
  SkeletonHorse = 67,
  Slime = 68,
  SmallFireball = 69,
  SnowGolem = 70,
  Snowball = 71,
  SpectralArrow = 72,
  Spider = 73,
  Squid = 74,
  Stray = 75,
  TraderLlama = 76,
  TropicalFish = 77,
  Turtle = 78,
  Egg = 79,
  EnderPearl = 80,
  ExperienceBottle = 81,
  Potion = 82,
  Trident = 83,
  Vex = 84,
  Villager = 85,
  IronGolem = 86,
  Vindicator = 87,
  Pillager = 88,
  WanderingTrader = 89,
  Witch = 90,
  Wither = 91,
  WitherSkeleton = 92,
  WitherSkull = 93,
  Wolf = 94,
  Zombie = 95,
  ZombieHorse = 96,
  ZombieVillager = 97,
  Phantom = 98,
  Ravager = 99,
  LightningBolt = 100,
  Player = 101,
  FishingBobber = 102,
}
impl EntityType {
  pub const ID: usize = 5;
}
impl Registry for EntityType {
  fn get_registry_key(&self) -> NamespacedKey {
    NamespacedKey::new(crate::helpers::MINECRAFT_NAMESPACE, match self {
      Self::AreaEffectCloud => "area_effect_cloud",
      Self::ArmorStand => "armor_stand",
      Self::Arrow => "arrow",
      Self::Bat => "bat",
      Self::Bee => "bee",
      Self::Blaze => "blaze",
      Self::Boat => "boat",
      Self::Cat => "cat",
      Self::CaveSpider => "cave_spider",
      Self::Chicken => "chicken",
      Self::Cod => "cod",
      Self::Cow => "cow",
      Self::Creeper => "creeper",
      Self::Donkey => "donkey",
      Self::Dolphin => "dolphin",
      Self::DragonFireball => "dragon_fireball",
      Self::Drowned => "drowned",
      Self::ElderGuardian => "elder_guardian",
      Self::EndCrystal => "end_crystal",
      Self::EnderDragon => "ender_dragon",
      Self::Enderman => "enderman",
      Self::Endermite => "endermite",
      Self::EvokerFangs => "evoker_fangs",
      Self::Evoker => "evoker",
      Self::ExperienceOrb => "experience_orb",
      Self::EyeOfEnder => "eye_of_ender",
      Self::FallingBlock => "falling_block",
      Self::FireworkRocket => "firework_rocket",
      Self::Fox => "fox",
      Self::Ghast => "ghast",
      Self::Giant => "giant",
      Self::Guardian => "guardian",
      Self::Horse => "horse",
      Self::Husk => "husk",
      Self::Illusioner => "illusioner",
      Self::Item => "item",
      Self::ItemFrame => "item_frame",
      Self::Fireball => "fireball",
      Self::LeashKnot => "leash_knot",
      Self::Llama => "llama",
      Self::LlamaSpit => "llama_spit",
      Self::MagmaCube => "magma_cube",
      Self::Minecart => "minecart",
      Self::ChestMinecart => "chest_minecart",
      Self::CommandBlockMinecart => "command_block_minecart",
      Self::FurnaceMinecart => "furnace_minecart",
      Self::HopperMinecart => "hopper_minecart",
      Self::SpawnerMinecart => "spawner_minecart",
      Self::TntMinecart => "tnt_minecart",
      Self::Mule => "mule",
      Self::Mooshroom => "mooshroom",
      Self::Ocelot => "ocelot",
      Self::Painting => "painting",
      Self::Panda => "panda",
      Self::Parrot => "parrot",
      Self::Pig => "pig",
      Self::Pufferfish => "pufferfish",
      Self::ZombiePigman => "zombie_pigman",
      Self::PolarBear => "polar_bear",
      Self::Tnt => "tnt",
      Self::Rabbit => "rabbit",
      Self::Salmon => "salmon",
      Self::Sheep => "sheep",
      Self::Shulker => "shulker",
      Self::ShulkerBullet => "shulker_bullet",
      Self::Silverfish => "silverfish",
      Self::Skeleton => "skeleton",
      Self::SkeletonHorse => "skeleton_horse",
      Self::Slime => "slime",
      Self::SmallFireball => "small_fireball",
      Self::SnowGolem => "snow_golem",
      Self::Snowball => "snowball",
      Self::SpectralArrow => "spectral_arrow",
      Self::Spider => "spider",
      Self::Squid => "squid",
      Self::Stray => "stray",
      Self::TraderLlama => "trader_llama",
      Self::TropicalFish => "tropical_fish",
      Self::Turtle => "turtle",
      Self::Egg => "egg",
      Self::EnderPearl => "ender_pearl",
      Self::ExperienceBottle => "experience_bottle",
      Self::Potion => "potion",
      Self::Trident => "trident",
      Self::Vex => "vex",
      Self::Villager => "villager",
      Self::IronGolem => "iron_golem",
      Self::Vindicator => "vindicator",
      Self::Pillager => "pillager",
      Self::WanderingTrader => "wandering_trader",
      Self::Witch => "witch",
      Self::Wither => "wither",
      Self::WitherSkeleton => "wither_skeleton",
      Self::WitherSkull => "wither_skull",
      Self::Wolf => "wolf",
      Self::Zombie => "zombie",
      Self::ZombieHorse => "zombie_horse",
      Self::ZombieVillager => "zombie_villager",
      Self::Phantom => "phantom",
      Self::Ravager => "ravager",
      Self::LightningBolt => "lightning_bolt",
      Self::Player => "player",
      Self::FishingBobber => "fishing_bobber",
    })
  }
  fn from_registry_key(key: &NamespacedKey) -> Option<Self> {
    if *key.namespace() != crate::helpers::MINECRAFT_NAMESPACE {return None;}
    Some(match &**key.key() {
      "area_effect_cloud" => Self::AreaEffectCloud,
      "armor_stand" => Self::ArmorStand,
      "arrow" => Self::Arrow,
      "bat" => Self::Bat,
      "bee" => Self::Bee,
      "blaze" => Self::Blaze,
      "boat" => Self::Boat,
      "cat" => Self::Cat,
      "cave_spider" => Self::CaveSpider,
      "chicken" => Self::Chicken,
      "cod" => Self::Cod,
      "cow" => Self::Cow,
      "creeper" => Self::Creeper,
      "donkey" => Self::Donkey,
      "dolphin" => Self::Dolphin,
      "dragon_fireball" => Self::DragonFireball,
      "drowned" => Self::Drowned,
      "elder_guardian" => Self::ElderGuardian,
      "end_crystal" => Self::EndCrystal,
      "ender_dragon" => Self::EnderDragon,
      "enderman" => Self::Enderman,
      "endermite" => Self::Endermite,
      "evoker_fangs" => Self::EvokerFangs,
      "evoker" => Self::Evoker,
      "experience_orb" => Self::ExperienceOrb,
      "eye_of_ender" => Self::EyeOfEnder,
      "falling_block" => Self::FallingBlock,
      "firework_rocket" => Self::FireworkRocket,
      "fox" => Self::Fox,
      "ghast" => Self::Ghast,
      "giant" => Self::Giant,
      "guardian" => Self::Guardian,
      "horse" => Self::Horse,
      "husk" => Self::Husk,
      "illusioner" => Self::Illusioner,
      "item" => Self::Item,
      "item_frame" => Self::ItemFrame,
      "fireball" => Self::Fireball,
      "leash_knot" => Self::LeashKnot,
      "llama" => Self::Llama,
      "llama_spit" => Self::LlamaSpit,
      "magma_cube" => Self::MagmaCube,
      "minecart" => Self::Minecart,
      "chest_minecart" => Self::ChestMinecart,
      "command_block_minecart" => Self::CommandBlockMinecart,
      "furnace_minecart" => Self::FurnaceMinecart,
      "hopper_minecart" => Self::HopperMinecart,
      "spawner_minecart" => Self::SpawnerMinecart,
      "tnt_minecart" => Self::TntMinecart,
      "mule" => Self::Mule,
      "mooshroom" => Self::Mooshroom,
      "ocelot" => Self::Ocelot,
      "painting" => Self::Painting,
      "panda" => Self::Panda,
      "parrot" => Self::Parrot,
      "pig" => Self::Pig,
      "pufferfish" => Self::Pufferfish,
      "zombie_pigman" => Self::ZombiePigman,
      "polar_bear" => Self::PolarBear,
      "tnt" => Self::Tnt,
      "rabbit" => Self::Rabbit,
      "salmon" => Self::Salmon,
      "sheep" => Self::Sheep,
      "shulker" => Self::Shulker,
      "shulker_bullet" => Self::ShulkerBullet,
      "silverfish" => Self::Silverfish,
      "skeleton" => Self::Skeleton,
      "skeleton_horse" => Self::SkeletonHorse,
      "slime" => Self::Slime,
      "small_fireball" => Self::SmallFireball,
      "snow_golem" => Self::SnowGolem,
      "snowball" => Self::Snowball,
      "spectral_arrow" => Self::SpectralArrow,
      "spider" => Self::Spider,
      "squid" => Self::Squid,
      "stray" => Self::Stray,
      "trader_llama" => Self::TraderLlama,
      "tropical_fish" => Self::TropicalFish,
      "turtle" => Self::Turtle,
      "egg" => Self::Egg,
      "ender_pearl" => Self::EnderPearl,
      "experience_bottle" => Self::ExperienceBottle,
      "potion" => Self::Potion,
      "trident" => Self::Trident,
      "vex" => Self::Vex,
      "villager" => Self::Villager,
      "iron_golem" => Self::IronGolem,
      "vindicator" => Self::Vindicator,
      "pillager" => Self::Pillager,
      "wandering_trader" => Self::WanderingTrader,
      "witch" => Self::Witch,
      "wither" => Self::Wither,
      "wither_skeleton" => Self::WitherSkeleton,
      "wither_skull" => Self::WitherSkull,
      "wolf" => Self::Wolf,
      "zombie" => Self::Zombie,
      "zombie_horse" => Self::ZombieHorse,
      "zombie_villager" => Self::ZombieVillager,
      "phantom" => Self::Phantom,
      "ravager" => Self::Ravager,
      "lightning_bolt" => Self::LightningBolt,
      "player" => Self::Player,
      "fishing_bobber" => Self::FishingBobber,
      _ => {return None;},
    })
  }
  fn get_id(&self) -> usize {
    *self as usize
  }
  fn from_id(id: usize) -> Option<Self> {
    FromPrimitive::from_usize(id)
  }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, FromPrimitive)]
#[allow(non_camel_case_types)]
/// Key: `minecraft:item`
pub enum Item {
  Air = 0,
  Stone = 1,
  Granite = 2,
  PolishedGranite = 3,
  Diorite = 4,
  PolishedDiorite = 5,
  Andesite = 6,
  PolishedAndesite = 7,
  GrassBlock = 8,
  Dirt = 9,
  CoarseDirt = 10,
  Podzol = 11,
  Cobblestone = 12,
  OakPlanks = 13,
  SprucePlanks = 14,
  BirchPlanks = 15,
  JunglePlanks = 16,
  AcaciaPlanks = 17,
  DarkOakPlanks = 18,
  OakSapling = 19,
  SpruceSapling = 20,
  BirchSapling = 21,
  JungleSapling = 22,
  AcaciaSapling = 23,
  DarkOakSapling = 24,
  Bedrock = 25,
  Sand = 26,
  RedSand = 27,
  Gravel = 28,
  GoldOre = 29,
  IronOre = 30,
  CoalOre = 31,
  OakLog = 32,
  SpruceLog = 33,
  BirchLog = 34,
  JungleLog = 35,
  AcaciaLog = 36,
  DarkOakLog = 37,
  StrippedOakLog = 38,
  StrippedSpruceLog = 39,
  StrippedBirchLog = 40,
  StrippedJungleLog = 41,
  StrippedAcaciaLog = 42,
  StrippedDarkOakLog = 43,
  StrippedOakWood = 44,
  StrippedSpruceWood = 45,
  StrippedBirchWood = 46,
  StrippedJungleWood = 47,
  StrippedAcaciaWood = 48,
  StrippedDarkOakWood = 49,
  OakWood = 50,
  SpruceWood = 51,
  BirchWood = 52,
  JungleWood = 53,
  AcaciaWood = 54,
  DarkOakWood = 55,
  OakLeaves = 56,
  SpruceLeaves = 57,
  BirchLeaves = 58,
  JungleLeaves = 59,
  AcaciaLeaves = 60,
  DarkOakLeaves = 61,
  Sponge = 62,
  WetSponge = 63,
  Glass = 64,
  LapisOre = 65,
  LapisBlock = 66,
  Dispenser = 67,
  Sandstone = 68,
  ChiseledSandstone = 69,
  CutSandstone = 70,
  NoteBlock = 71,
  PoweredRail = 72,
  DetectorRail = 73,
  StickyPiston = 74,
  Cobweb = 75,
  Grass = 76,
  Fern = 77,
  DeadBush = 78,
  Seagrass = 79,
  SeaPickle = 80,
  Piston = 81,
  WhiteWool = 82,
  OrangeWool = 83,
  MagentaWool = 84,
  LightBlueWool = 85,
  YellowWool = 86,
  LimeWool = 87,
  PinkWool = 88,
  GrayWool = 89,
  LightGrayWool = 90,
  CyanWool = 91,
  PurpleWool = 92,
  BlueWool = 93,
  BrownWool = 94,
  GreenWool = 95,
  RedWool = 96,
  BlackWool = 97,
  Dandelion = 98,
  Poppy = 99,
  BlueOrchid = 100,
  Allium = 101,
  AzureBluet = 102,
  RedTulip = 103,
  OrangeTulip = 104,
  WhiteTulip = 105,
  PinkTulip = 106,
  OxeyeDaisy = 107,
  Cornflower = 108,
  LilyOfTheValley = 109,
  WitherRose = 110,
  BrownMushroom = 111,
  RedMushroom = 112,
  GoldBlock = 113,
  IronBlock = 114,
  OakSlab = 115,
  SpruceSlab = 116,
  BirchSlab = 117,
  JungleSlab = 118,
  AcaciaSlab = 119,
  DarkOakSlab = 120,
  StoneSlab = 121,
  SmoothStoneSlab = 122,
  SandstoneSlab = 123,
  CutSandstoneSlab = 124,
  PetrifiedOakSlab = 125,
  CobblestoneSlab = 126,
  BrickSlab = 127,
  StoneBrickSlab = 128,
  NetherBrickSlab = 129,
  QuartzSlab = 130,
  RedSandstoneSlab = 131,
  CutRedSandstoneSlab = 132,
  PurpurSlab = 133,
  PrismarineSlab = 134,
  PrismarineBrickSlab = 135,
  DarkPrismarineSlab = 136,
  SmoothQuartz = 137,
  SmoothRedSandstone = 138,
  SmoothSandstone = 139,
  SmoothStone = 140,
  Bricks = 141,
  Tnt = 142,
  Bookshelf = 143,
  MossyCobblestone = 144,
  Obsidian = 145,
  Torch = 146,
  EndRod = 147,
  ChorusPlant = 148,
  ChorusFlower = 149,
  PurpurBlock = 150,
  PurpurPillar = 151,
  PurpurStairs = 152,
  Spawner = 153,
  OakStairs = 154,
  Chest = 155,
  DiamondOre = 156,
  DiamondBlock = 157,
  CraftingTable = 158,
  Farmland = 159,
  Furnace = 160,
  Ladder = 161,
  Rail = 162,
  CobblestoneStairs = 163,
  Lever = 164,
  StonePressurePlate = 165,
  OakPressurePlate = 166,
  SprucePressurePlate = 167,
  BirchPressurePlate = 168,
  JunglePressurePlate = 169,
  AcaciaPressurePlate = 170,
  DarkOakPressurePlate = 171,
  RedstoneOre = 172,
  RedstoneTorch = 173,
  StoneButton = 174,
  Snow = 175,
  Ice = 176,
  SnowBlock = 177,
  Cactus = 178,
  Clay = 179,
  Jukebox = 180,
  OakFence = 181,
  SpruceFence = 182,
  BirchFence = 183,
  JungleFence = 184,
  AcaciaFence = 185,
  DarkOakFence = 186,
  Pumpkin = 187,
  CarvedPumpkin = 188,
  Netherrack = 189,
  SoulSand = 190,
  Glowstone = 191,
  JackOLantern = 192,
  OakTrapdoor = 193,
  SpruceTrapdoor = 194,
  BirchTrapdoor = 195,
  JungleTrapdoor = 196,
  AcaciaTrapdoor = 197,
  DarkOakTrapdoor = 198,
  InfestedStone = 199,
  InfestedCobblestone = 200,
  InfestedStoneBricks = 201,
  InfestedMossyStoneBricks = 202,
  InfestedCrackedStoneBricks = 203,
  InfestedChiseledStoneBricks = 204,
  StoneBricks = 205,
  MossyStoneBricks = 206,
  CrackedStoneBricks = 207,
  ChiseledStoneBricks = 208,
  BrownMushroomBlock = 209,
  RedMushroomBlock = 210,
  MushroomStem = 211,
  IronBars = 212,
  GlassPane = 213,
  Melon = 214,
  Vine = 215,
  OakFenceGate = 216,
  SpruceFenceGate = 217,
  BirchFenceGate = 218,
  JungleFenceGate = 219,
  AcaciaFenceGate = 220,
  DarkOakFenceGate = 221,
  BrickStairs = 222,
  StoneBrickStairs = 223,
  Mycelium = 224,
  LilyPad = 225,
  NetherBricks = 226,
  NetherBrickFence = 227,
  NetherBrickStairs = 228,
  EnchantingTable = 229,
  EndPortalFrame = 230,
  EndStone = 231,
  EndStoneBricks = 232,
  DragonEgg = 233,
  RedstoneLamp = 234,
  SandstoneStairs = 235,
  EmeraldOre = 236,
  EnderChest = 237,
  TripwireHook = 238,
  EmeraldBlock = 239,
  SpruceStairs = 240,
  BirchStairs = 241,
  JungleStairs = 242,
  CommandBlock = 243,
  Beacon = 244,
  CobblestoneWall = 245,
  MossyCobblestoneWall = 246,
  BrickWall = 247,
  PrismarineWall = 248,
  RedSandstoneWall = 249,
  MossyStoneBrickWall = 250,
  GraniteWall = 251,
  StoneBrickWall = 252,
  NetherBrickWall = 253,
  AndesiteWall = 254,
  RedNetherBrickWall = 255,
  SandstoneWall = 256,
  EndStoneBrickWall = 257,
  DioriteWall = 258,
  OakButton = 259,
  SpruceButton = 260,
  BirchButton = 261,
  JungleButton = 262,
  AcaciaButton = 263,
  DarkOakButton = 264,
  Anvil = 265,
  ChippedAnvil = 266,
  DamagedAnvil = 267,
  TrappedChest = 268,
  LightWeightedPressurePlate = 269,
  HeavyWeightedPressurePlate = 270,
  DaylightDetector = 271,
  RedstoneBlock = 272,
  NetherQuartzOre = 273,
  Hopper = 274,
  ChiseledQuartzBlock = 275,
  QuartzBlock = 276,
  QuartzPillar = 277,
  QuartzStairs = 278,
  ActivatorRail = 279,
  Dropper = 280,
  WhiteTerracotta = 281,
  OrangeTerracotta = 282,
  MagentaTerracotta = 283,
  LightBlueTerracotta = 284,
  YellowTerracotta = 285,
  LimeTerracotta = 286,
  PinkTerracotta = 287,
  GrayTerracotta = 288,
  LightGrayTerracotta = 289,
  CyanTerracotta = 290,
  PurpleTerracotta = 291,
  BlueTerracotta = 292,
  BrownTerracotta = 293,
  GreenTerracotta = 294,
  RedTerracotta = 295,
  BlackTerracotta = 296,
  Barrier = 297,
  IronTrapdoor = 298,
  HayBlock = 299,
  WhiteCarpet = 300,
  OrangeCarpet = 301,
  MagentaCarpet = 302,
  LightBlueCarpet = 303,
  YellowCarpet = 304,
  LimeCarpet = 305,
  PinkCarpet = 306,
  GrayCarpet = 307,
  LightGrayCarpet = 308,
  CyanCarpet = 309,
  PurpleCarpet = 310,
  BlueCarpet = 311,
  BrownCarpet = 312,
  GreenCarpet = 313,
  RedCarpet = 314,
  BlackCarpet = 315,
  Terracotta = 316,
  CoalBlock = 317,
  PackedIce = 318,
  AcaciaStairs = 319,
  DarkOakStairs = 320,
  SlimeBlock = 321,
  GrassPath = 322,
  Sunflower = 323,
  Lilac = 324,
  RoseBush = 325,
  Peony = 326,
  TallGrass = 327,
  LargeFern = 328,
  WhiteStainedGlass = 329,
  OrangeStainedGlass = 330,
  MagentaStainedGlass = 331,
  LightBlueStainedGlass = 332,
  YellowStainedGlass = 333,
  LimeStainedGlass = 334,
  PinkStainedGlass = 335,
  GrayStainedGlass = 336,
  LightGrayStainedGlass = 337,
  CyanStainedGlass = 338,
  PurpleStainedGlass = 339,
  BlueStainedGlass = 340,
  BrownStainedGlass = 341,
  GreenStainedGlass = 342,
  RedStainedGlass = 343,
  BlackStainedGlass = 344,
  WhiteStainedGlassPane = 345,
  OrangeStainedGlassPane = 346,
  MagentaStainedGlassPane = 347,
  LightBlueStainedGlassPane = 348,
  YellowStainedGlassPane = 349,
  LimeStainedGlassPane = 350,
  PinkStainedGlassPane = 351,
  GrayStainedGlassPane = 352,
  LightGrayStainedGlassPane = 353,
  CyanStainedGlassPane = 354,
  PurpleStainedGlassPane = 355,
  BlueStainedGlassPane = 356,
  BrownStainedGlassPane = 357,
  GreenStainedGlassPane = 358,
  RedStainedGlassPane = 359,
  BlackStainedGlassPane = 360,
  Prismarine = 361,
  PrismarineBricks = 362,
  DarkPrismarine = 363,
  PrismarineStairs = 364,
  PrismarineBrickStairs = 365,
  DarkPrismarineStairs = 366,
  SeaLantern = 367,
  RedSandstone = 368,
  ChiseledRedSandstone = 369,
  CutRedSandstone = 370,
  RedSandstoneStairs = 371,
  RepeatingCommandBlock = 372,
  ChainCommandBlock = 373,
  MagmaBlock = 374,
  NetherWartBlock = 375,
  RedNetherBricks = 376,
  BoneBlock = 377,
  StructureVoid = 378,
  Observer = 379,
  ShulkerBox = 380,
  WhiteShulkerBox = 381,
  OrangeShulkerBox = 382,
  MagentaShulkerBox = 383,
  LightBlueShulkerBox = 384,
  YellowShulkerBox = 385,
  LimeShulkerBox = 386,
  PinkShulkerBox = 387,
  GrayShulkerBox = 388,
  LightGrayShulkerBox = 389,
  CyanShulkerBox = 390,
  PurpleShulkerBox = 391,
  BlueShulkerBox = 392,
  BrownShulkerBox = 393,
  GreenShulkerBox = 394,
  RedShulkerBox = 395,
  BlackShulkerBox = 396,
  WhiteGlazedTerracotta = 397,
  OrangeGlazedTerracotta = 398,
  MagentaGlazedTerracotta = 399,
  LightBlueGlazedTerracotta = 400,
  YellowGlazedTerracotta = 401,
  LimeGlazedTerracotta = 402,
  PinkGlazedTerracotta = 403,
  GrayGlazedTerracotta = 404,
  LightGrayGlazedTerracotta = 405,
  CyanGlazedTerracotta = 406,
  PurpleGlazedTerracotta = 407,
  BlueGlazedTerracotta = 408,
  BrownGlazedTerracotta = 409,
  GreenGlazedTerracotta = 410,
  RedGlazedTerracotta = 411,
  BlackGlazedTerracotta = 412,
  WhiteConcrete = 413,
  OrangeConcrete = 414,
  MagentaConcrete = 415,
  LightBlueConcrete = 416,
  YellowConcrete = 417,
  LimeConcrete = 418,
  PinkConcrete = 419,
  GrayConcrete = 420,
  LightGrayConcrete = 421,
  CyanConcrete = 422,
  PurpleConcrete = 423,
  BlueConcrete = 424,
  BrownConcrete = 425,
  GreenConcrete = 426,
  RedConcrete = 427,
  BlackConcrete = 428,
  WhiteConcretePowder = 429,
  OrangeConcretePowder = 430,
  MagentaConcretePowder = 431,
  LightBlueConcretePowder = 432,
  YellowConcretePowder = 433,
  LimeConcretePowder = 434,
  PinkConcretePowder = 435,
  GrayConcretePowder = 436,
  LightGrayConcretePowder = 437,
  CyanConcretePowder = 438,
  PurpleConcretePowder = 439,
  BlueConcretePowder = 440,
  BrownConcretePowder = 441,
  GreenConcretePowder = 442,
  RedConcretePowder = 443,
  BlackConcretePowder = 444,
  TurtleEgg = 445,
  DeadTubeCoralBlock = 446,
  DeadBrainCoralBlock = 447,
  DeadBubbleCoralBlock = 448,
  DeadFireCoralBlock = 449,
  DeadHornCoralBlock = 450,
  TubeCoralBlock = 451,
  BrainCoralBlock = 452,
  BubbleCoralBlock = 453,
  FireCoralBlock = 454,
  HornCoralBlock = 455,
  TubeCoral = 456,
  BrainCoral = 457,
  BubbleCoral = 458,
  FireCoral = 459,
  HornCoral = 460,
  DeadBrainCoral = 461,
  DeadBubbleCoral = 462,
  DeadFireCoral = 463,
  DeadHornCoral = 464,
  DeadTubeCoral = 465,
  TubeCoralFan = 466,
  BrainCoralFan = 467,
  BubbleCoralFan = 468,
  FireCoralFan = 469,
  HornCoralFan = 470,
  DeadTubeCoralFan = 471,
  DeadBrainCoralFan = 472,
  DeadBubbleCoralFan = 473,
  DeadFireCoralFan = 474,
  DeadHornCoralFan = 475,
  BlueIce = 476,
  Conduit = 477,
  PolishedGraniteStairs = 478,
  SmoothRedSandstoneStairs = 479,
  MossyStoneBrickStairs = 480,
  PolishedDioriteStairs = 481,
  MossyCobblestoneStairs = 482,
  EndStoneBrickStairs = 483,
  StoneStairs = 484,
  SmoothSandstoneStairs = 485,
  SmoothQuartzStairs = 486,
  GraniteStairs = 487,
  AndesiteStairs = 488,
  RedNetherBrickStairs = 489,
  PolishedAndesiteStairs = 490,
  DioriteStairs = 491,
  PolishedGraniteSlab = 492,
  SmoothRedSandstoneSlab = 493,
  MossyStoneBrickSlab = 494,
  PolishedDioriteSlab = 495,
  MossyCobblestoneSlab = 496,
  EndStoneBrickSlab = 497,
  SmoothSandstoneSlab = 498,
  SmoothQuartzSlab = 499,
  GraniteSlab = 500,
  AndesiteSlab = 501,
  RedNetherBrickSlab = 502,
  PolishedAndesiteSlab = 503,
  DioriteSlab = 504,
  Scaffolding = 505,
  IronDoor = 506,
  OakDoor = 507,
  SpruceDoor = 508,
  BirchDoor = 509,
  JungleDoor = 510,
  AcaciaDoor = 511,
  DarkOakDoor = 512,
  Repeater = 513,
  Comparator = 514,
  StructureBlock = 515,
  Jigsaw = 516,
  Composter = 517,
  TurtleHelmet = 518,
  Scute = 519,
  IronShovel = 520,
  IronPickaxe = 521,
  IronAxe = 522,
  FlintAndSteel = 523,
  Apple = 524,
  Bow = 525,
  Arrow = 526,
  Coal = 527,
  Charcoal = 528,
  Diamond = 529,
  IronIngot = 530,
  GoldIngot = 531,
  IronSword = 532,
  WoodenSword = 533,
  WoodenShovel = 534,
  WoodenPickaxe = 535,
  WoodenAxe = 536,
  StoneSword = 537,
  StoneShovel = 538,
  StonePickaxe = 539,
  StoneAxe = 540,
  DiamondSword = 541,
  DiamondShovel = 542,
  DiamondPickaxe = 543,
  DiamondAxe = 544,
  Stick = 545,
  Bowl = 546,
  MushroomStew = 547,
  GoldenSword = 548,
  GoldenShovel = 549,
  GoldenPickaxe = 550,
  GoldenAxe = 551,
  String = 552,
  Feather = 553,
  Gunpowder = 554,
  WoodenHoe = 555,
  StoneHoe = 556,
  IronHoe = 557,
  DiamondHoe = 558,
  GoldenHoe = 559,
  WheatSeeds = 560,
  Wheat = 561,
  Bread = 562,
  LeatherHelmet = 563,
  LeatherChestplate = 564,
  LeatherLeggings = 565,
  LeatherBoots = 566,
  ChainmailHelmet = 567,
  ChainmailChestplate = 568,
  ChainmailLeggings = 569,
  ChainmailBoots = 570,
  IronHelmet = 571,
  IronChestplate = 572,
  IronLeggings = 573,
  IronBoots = 574,
  DiamondHelmet = 575,
  DiamondChestplate = 576,
  DiamondLeggings = 577,
  DiamondBoots = 578,
  GoldenHelmet = 579,
  GoldenChestplate = 580,
  GoldenLeggings = 581,
  GoldenBoots = 582,
  Flint = 583,
  Porkchop = 584,
  CookedPorkchop = 585,
  Painting = 586,
  GoldenApple = 587,
  EnchantedGoldenApple = 588,
  OakSign = 589,
  SpruceSign = 590,
  BirchSign = 591,
  JungleSign = 592,
  AcaciaSign = 593,
  DarkOakSign = 594,
  Bucket = 595,
  WaterBucket = 596,
  LavaBucket = 597,
  Minecart = 598,
  Saddle = 599,
  Redstone = 600,
  Snowball = 601,
  OakBoat = 602,
  Leather = 603,
  MilkBucket = 604,
  PufferfishBucket = 605,
  SalmonBucket = 606,
  CodBucket = 607,
  TropicalFishBucket = 608,
  Brick = 609,
  ClayBall = 610,
  SugarCane = 611,
  Kelp = 612,
  DriedKelpBlock = 613,
  Bamboo = 614,
  Paper = 615,
  Book = 616,
  SlimeBall = 617,
  ChestMinecart = 618,
  FurnaceMinecart = 619,
  Egg = 620,
  Compass = 621,
  FishingRod = 622,
  Clock = 623,
  GlowstoneDust = 624,
  Cod = 625,
  Salmon = 626,
  TropicalFish = 627,
  Pufferfish = 628,
  CookedCod = 629,
  CookedSalmon = 630,
  InkSac = 631,
  RedDye = 632,
  GreenDye = 633,
  CocoaBeans = 634,
  LapisLazuli = 635,
  PurpleDye = 636,
  CyanDye = 637,
  LightGrayDye = 638,
  GrayDye = 639,
  PinkDye = 640,
  LimeDye = 641,
  YellowDye = 642,
  LightBlueDye = 643,
  MagentaDye = 644,
  OrangeDye = 645,
  BoneMeal = 646,
  BlueDye = 647,
  BrownDye = 648,
  BlackDye = 649,
  WhiteDye = 650,
  Bone = 651,
  Sugar = 652,
  Cake = 653,
  WhiteBed = 654,
  OrangeBed = 655,
  MagentaBed = 656,
  LightBlueBed = 657,
  YellowBed = 658,
  LimeBed = 659,
  PinkBed = 660,
  GrayBed = 661,
  LightGrayBed = 662,
  CyanBed = 663,
  PurpleBed = 664,
  BlueBed = 665,
  BrownBed = 666,
  GreenBed = 667,
  RedBed = 668,
  BlackBed = 669,
  Cookie = 670,
  FilledMap = 671,
  Shears = 672,
  MelonSlice = 673,
  DriedKelp = 674,
  PumpkinSeeds = 675,
  MelonSeeds = 676,
  Beef = 677,
  CookedBeef = 678,
  Chicken = 679,
  CookedChicken = 680,
  RottenFlesh = 681,
  EnderPearl = 682,
  BlazeRod = 683,
  GhastTear = 684,
  GoldNugget = 685,
  NetherWart = 686,
  Potion = 687,
  GlassBottle = 688,
  SpiderEye = 689,
  FermentedSpiderEye = 690,
  BlazePowder = 691,
  MagmaCream = 692,
  BrewingStand = 693,
  Cauldron = 694,
  EnderEye = 695,
  GlisteringMelonSlice = 696,
  BatSpawnEgg = 697,
  BeeSpawnEgg = 698,
  BlazeSpawnEgg = 699,
  CatSpawnEgg = 700,
  CaveSpiderSpawnEgg = 701,
  ChickenSpawnEgg = 702,
  CodSpawnEgg = 703,
  CowSpawnEgg = 704,
  CreeperSpawnEgg = 705,
  DolphinSpawnEgg = 706,
  DonkeySpawnEgg = 707,
  DrownedSpawnEgg = 708,
  ElderGuardianSpawnEgg = 709,
  EndermanSpawnEgg = 710,
  EndermiteSpawnEgg = 711,
  EvokerSpawnEgg = 712,
  FoxSpawnEgg = 713,
  GhastSpawnEgg = 714,
  GuardianSpawnEgg = 715,
  HorseSpawnEgg = 716,
  HuskSpawnEgg = 717,
  LlamaSpawnEgg = 718,
  MagmaCubeSpawnEgg = 719,
  MooshroomSpawnEgg = 720,
  MuleSpawnEgg = 721,
  OcelotSpawnEgg = 722,
  PandaSpawnEgg = 723,
  ParrotSpawnEgg = 724,
  PhantomSpawnEgg = 725,
  PigSpawnEgg = 726,
  PillagerSpawnEgg = 727,
  PolarBearSpawnEgg = 728,
  PufferfishSpawnEgg = 729,
  RabbitSpawnEgg = 730,
  RavagerSpawnEgg = 731,
  SalmonSpawnEgg = 732,
  SheepSpawnEgg = 733,
  ShulkerSpawnEgg = 734,
  SilverfishSpawnEgg = 735,
  SkeletonSpawnEgg = 736,
  SkeletonHorseSpawnEgg = 737,
  SlimeSpawnEgg = 738,
  SpiderSpawnEgg = 739,
  SquidSpawnEgg = 740,
  StraySpawnEgg = 741,
  TraderLlamaSpawnEgg = 742,
  TropicalFishSpawnEgg = 743,
  TurtleSpawnEgg = 744,
  VexSpawnEgg = 745,
  VillagerSpawnEgg = 746,
  VindicatorSpawnEgg = 747,
  WanderingTraderSpawnEgg = 748,
  WitchSpawnEgg = 749,
  WitherSkeletonSpawnEgg = 750,
  WolfSpawnEgg = 751,
  ZombieSpawnEgg = 752,
  ZombieHorseSpawnEgg = 753,
  ZombiePigmanSpawnEgg = 754,
  ZombieVillagerSpawnEgg = 755,
  ExperienceBottle = 756,
  FireCharge = 757,
  WritableBook = 758,
  WrittenBook = 759,
  Emerald = 760,
  ItemFrame = 761,
  FlowerPot = 762,
  Carrot = 763,
  Potato = 764,
  BakedPotato = 765,
  PoisonousPotato = 766,
  Map = 767,
  GoldenCarrot = 768,
  SkeletonSkull = 769,
  WitherSkeletonSkull = 770,
  PlayerHead = 771,
  ZombieHead = 772,
  CreeperHead = 773,
  DragonHead = 774,
  CarrotOnAStick = 775,
  NetherStar = 776,
  PumpkinPie = 777,
  FireworkRocket = 778,
  FireworkStar = 779,
  EnchantedBook = 780,
  NetherBrick = 781,
  Quartz = 782,
  TntMinecart = 783,
  HopperMinecart = 784,
  PrismarineShard = 785,
  PrismarineCrystals = 786,
  Rabbit = 787,
  CookedRabbit = 788,
  RabbitStew = 789,
  RabbitFoot = 790,
  RabbitHide = 791,
  ArmorStand = 792,
  IronHorseArmor = 793,
  GoldenHorseArmor = 794,
  DiamondHorseArmor = 795,
  LeatherHorseArmor = 796,
  Lead = 797,
  NameTag = 798,
  CommandBlockMinecart = 799,
  Mutton = 800,
  CookedMutton = 801,
  WhiteBanner = 802,
  OrangeBanner = 803,
  MagentaBanner = 804,
  LightBlueBanner = 805,
  YellowBanner = 806,
  LimeBanner = 807,
  PinkBanner = 808,
  GrayBanner = 809,
  LightGrayBanner = 810,
  CyanBanner = 811,
  PurpleBanner = 812,
  BlueBanner = 813,
  BrownBanner = 814,
  GreenBanner = 815,
  RedBanner = 816,
  BlackBanner = 817,
  EndCrystal = 818,
  ChorusFruit = 819,
  PoppedChorusFruit = 820,
  Beetroot = 821,
  BeetrootSeeds = 822,
  BeetrootSoup = 823,
  DragonBreath = 824,
  SplashPotion = 825,
  SpectralArrow = 826,
  TippedArrow = 827,
  LingeringPotion = 828,
  Shield = 829,
  Elytra = 830,
  SpruceBoat = 831,
  BirchBoat = 832,
  JungleBoat = 833,
  AcaciaBoat = 834,
  DarkOakBoat = 835,
  TotemOfUndying = 836,
  ShulkerShell = 837,
  IronNugget = 838,
  KnowledgeBook = 839,
  DebugStick = 840,
  MusicDisc13 = 841,
  MusicDiscCat = 842,
  MusicDiscBlocks = 843,
  MusicDiscChirp = 844,
  MusicDiscFar = 845,
  MusicDiscMall = 846,
  MusicDiscMellohi = 847,
  MusicDiscStal = 848,
  MusicDiscStrad = 849,
  MusicDiscWard = 850,
  MusicDisc11 = 851,
  MusicDiscWait = 852,
  Trident = 853,
  PhantomMembrane = 854,
  NautilusShell = 855,
  HeartOfTheSea = 856,
  Crossbow = 857,
  SuspiciousStew = 858,
  Loom = 859,
  FlowerBannerPattern = 860,
  CreeperBannerPattern = 861,
  SkullBannerPattern = 862,
  MojangBannerPattern = 863,
  GlobeBannerPattern = 864,
  Barrel = 865,
  Smoker = 866,
  BlastFurnace = 867,
  CartographyTable = 868,
  FletchingTable = 869,
  Grindstone = 870,
  Lectern = 871,
  SmithingTable = 872,
  Stonecutter = 873,
  Bell = 874,
  Lantern = 875,
  SweetBerries = 876,
  Campfire = 877,
  Honeycomb = 878,
  BeeNest = 879,
  Beehive = 880,
  HoneyBottle = 881,
  HoneyBlock = 882,
  HoneycombBlock = 883,
}
impl Item {
  pub const ID: usize = 6;
}
impl Registry for Item {
  fn get_registry_key(&self) -> NamespacedKey {
    NamespacedKey::new(crate::helpers::MINECRAFT_NAMESPACE, match self {
      Self::Air => "air",
      Self::Stone => "stone",
      Self::Granite => "granite",
      Self::PolishedGranite => "polished_granite",
      Self::Diorite => "diorite",
      Self::PolishedDiorite => "polished_diorite",
      Self::Andesite => "andesite",
      Self::PolishedAndesite => "polished_andesite",
      Self::GrassBlock => "grass_block",
      Self::Dirt => "dirt",
      Self::CoarseDirt => "coarse_dirt",
      Self::Podzol => "podzol",
      Self::Cobblestone => "cobblestone",
      Self::OakPlanks => "oak_planks",
      Self::SprucePlanks => "spruce_planks",
      Self::BirchPlanks => "birch_planks",
      Self::JunglePlanks => "jungle_planks",
      Self::AcaciaPlanks => "acacia_planks",
      Self::DarkOakPlanks => "dark_oak_planks",
      Self::OakSapling => "oak_sapling",
      Self::SpruceSapling => "spruce_sapling",
      Self::BirchSapling => "birch_sapling",
      Self::JungleSapling => "jungle_sapling",
      Self::AcaciaSapling => "acacia_sapling",
      Self::DarkOakSapling => "dark_oak_sapling",
      Self::Bedrock => "bedrock",
      Self::Sand => "sand",
      Self::RedSand => "red_sand",
      Self::Gravel => "gravel",
      Self::GoldOre => "gold_ore",
      Self::IronOre => "iron_ore",
      Self::CoalOre => "coal_ore",
      Self::OakLog => "oak_log",
      Self::SpruceLog => "spruce_log",
      Self::BirchLog => "birch_log",
      Self::JungleLog => "jungle_log",
      Self::AcaciaLog => "acacia_log",
      Self::DarkOakLog => "dark_oak_log",
      Self::StrippedOakLog => "stripped_oak_log",
      Self::StrippedSpruceLog => "stripped_spruce_log",
      Self::StrippedBirchLog => "stripped_birch_log",
      Self::StrippedJungleLog => "stripped_jungle_log",
      Self::StrippedAcaciaLog => "stripped_acacia_log",
      Self::StrippedDarkOakLog => "stripped_dark_oak_log",
      Self::StrippedOakWood => "stripped_oak_wood",
      Self::StrippedSpruceWood => "stripped_spruce_wood",
      Self::StrippedBirchWood => "stripped_birch_wood",
      Self::StrippedJungleWood => "stripped_jungle_wood",
      Self::StrippedAcaciaWood => "stripped_acacia_wood",
      Self::StrippedDarkOakWood => "stripped_dark_oak_wood",
      Self::OakWood => "oak_wood",
      Self::SpruceWood => "spruce_wood",
      Self::BirchWood => "birch_wood",
      Self::JungleWood => "jungle_wood",
      Self::AcaciaWood => "acacia_wood",
      Self::DarkOakWood => "dark_oak_wood",
      Self::OakLeaves => "oak_leaves",
      Self::SpruceLeaves => "spruce_leaves",
      Self::BirchLeaves => "birch_leaves",
      Self::JungleLeaves => "jungle_leaves",
      Self::AcaciaLeaves => "acacia_leaves",
      Self::DarkOakLeaves => "dark_oak_leaves",
      Self::Sponge => "sponge",
      Self::WetSponge => "wet_sponge",
      Self::Glass => "glass",
      Self::LapisOre => "lapis_ore",
      Self::LapisBlock => "lapis_block",
      Self::Dispenser => "dispenser",
      Self::Sandstone => "sandstone",
      Self::ChiseledSandstone => "chiseled_sandstone",
      Self::CutSandstone => "cut_sandstone",
      Self::NoteBlock => "note_block",
      Self::PoweredRail => "powered_rail",
      Self::DetectorRail => "detector_rail",
      Self::StickyPiston => "sticky_piston",
      Self::Cobweb => "cobweb",
      Self::Grass => "grass",
      Self::Fern => "fern",
      Self::DeadBush => "dead_bush",
      Self::Seagrass => "seagrass",
      Self::SeaPickle => "sea_pickle",
      Self::Piston => "piston",
      Self::WhiteWool => "white_wool",
      Self::OrangeWool => "orange_wool",
      Self::MagentaWool => "magenta_wool",
      Self::LightBlueWool => "light_blue_wool",
      Self::YellowWool => "yellow_wool",
      Self::LimeWool => "lime_wool",
      Self::PinkWool => "pink_wool",
      Self::GrayWool => "gray_wool",
      Self::LightGrayWool => "light_gray_wool",
      Self::CyanWool => "cyan_wool",
      Self::PurpleWool => "purple_wool",
      Self::BlueWool => "blue_wool",
      Self::BrownWool => "brown_wool",
      Self::GreenWool => "green_wool",
      Self::RedWool => "red_wool",
      Self::BlackWool => "black_wool",
      Self::Dandelion => "dandelion",
      Self::Poppy => "poppy",
      Self::BlueOrchid => "blue_orchid",
      Self::Allium => "allium",
      Self::AzureBluet => "azure_bluet",
      Self::RedTulip => "red_tulip",
      Self::OrangeTulip => "orange_tulip",
      Self::WhiteTulip => "white_tulip",
      Self::PinkTulip => "pink_tulip",
      Self::OxeyeDaisy => "oxeye_daisy",
      Self::Cornflower => "cornflower",
      Self::LilyOfTheValley => "lily_of_the_valley",
      Self::WitherRose => "wither_rose",
      Self::BrownMushroom => "brown_mushroom",
      Self::RedMushroom => "red_mushroom",
      Self::GoldBlock => "gold_block",
      Self::IronBlock => "iron_block",
      Self::OakSlab => "oak_slab",
      Self::SpruceSlab => "spruce_slab",
      Self::BirchSlab => "birch_slab",
      Self::JungleSlab => "jungle_slab",
      Self::AcaciaSlab => "acacia_slab",
      Self::DarkOakSlab => "dark_oak_slab",
      Self::StoneSlab => "stone_slab",
      Self::SmoothStoneSlab => "smooth_stone_slab",
      Self::SandstoneSlab => "sandstone_slab",
      Self::CutSandstoneSlab => "cut_sandstone_slab",
      Self::PetrifiedOakSlab => "petrified_oak_slab",
      Self::CobblestoneSlab => "cobblestone_slab",
      Self::BrickSlab => "brick_slab",
      Self::StoneBrickSlab => "stone_brick_slab",
      Self::NetherBrickSlab => "nether_brick_slab",
      Self::QuartzSlab => "quartz_slab",
      Self::RedSandstoneSlab => "red_sandstone_slab",
      Self::CutRedSandstoneSlab => "cut_red_sandstone_slab",
      Self::PurpurSlab => "purpur_slab",
      Self::PrismarineSlab => "prismarine_slab",
      Self::PrismarineBrickSlab => "prismarine_brick_slab",
      Self::DarkPrismarineSlab => "dark_prismarine_slab",
      Self::SmoothQuartz => "smooth_quartz",
      Self::SmoothRedSandstone => "smooth_red_sandstone",
      Self::SmoothSandstone => "smooth_sandstone",
      Self::SmoothStone => "smooth_stone",
      Self::Bricks => "bricks",
      Self::Tnt => "tnt",
      Self::Bookshelf => "bookshelf",
      Self::MossyCobblestone => "mossy_cobblestone",
      Self::Obsidian => "obsidian",
      Self::Torch => "torch",
      Self::EndRod => "end_rod",
      Self::ChorusPlant => "chorus_plant",
      Self::ChorusFlower => "chorus_flower",
      Self::PurpurBlock => "purpur_block",
      Self::PurpurPillar => "purpur_pillar",
      Self::PurpurStairs => "purpur_stairs",
      Self::Spawner => "spawner",
      Self::OakStairs => "oak_stairs",
      Self::Chest => "chest",
      Self::DiamondOre => "diamond_ore",
      Self::DiamondBlock => "diamond_block",
      Self::CraftingTable => "crafting_table",
      Self::Farmland => "farmland",
      Self::Furnace => "furnace",
      Self::Ladder => "ladder",
      Self::Rail => "rail",
      Self::CobblestoneStairs => "cobblestone_stairs",
      Self::Lever => "lever",
      Self::StonePressurePlate => "stone_pressure_plate",
      Self::OakPressurePlate => "oak_pressure_plate",
      Self::SprucePressurePlate => "spruce_pressure_plate",
      Self::BirchPressurePlate => "birch_pressure_plate",
      Self::JunglePressurePlate => "jungle_pressure_plate",
      Self::AcaciaPressurePlate => "acacia_pressure_plate",
      Self::DarkOakPressurePlate => "dark_oak_pressure_plate",
      Self::RedstoneOre => "redstone_ore",
      Self::RedstoneTorch => "redstone_torch",
      Self::StoneButton => "stone_button",
      Self::Snow => "snow",
      Self::Ice => "ice",
      Self::SnowBlock => "snow_block",
      Self::Cactus => "cactus",
      Self::Clay => "clay",
      Self::Jukebox => "jukebox",
      Self::OakFence => "oak_fence",
      Self::SpruceFence => "spruce_fence",
      Self::BirchFence => "birch_fence",
      Self::JungleFence => "jungle_fence",
      Self::AcaciaFence => "acacia_fence",
      Self::DarkOakFence => "dark_oak_fence",
      Self::Pumpkin => "pumpkin",
      Self::CarvedPumpkin => "carved_pumpkin",
      Self::Netherrack => "netherrack",
      Self::SoulSand => "soul_sand",
      Self::Glowstone => "glowstone",
      Self::JackOLantern => "jack_o_lantern",
      Self::OakTrapdoor => "oak_trapdoor",
      Self::SpruceTrapdoor => "spruce_trapdoor",
      Self::BirchTrapdoor => "birch_trapdoor",
      Self::JungleTrapdoor => "jungle_trapdoor",
      Self::AcaciaTrapdoor => "acacia_trapdoor",
      Self::DarkOakTrapdoor => "dark_oak_trapdoor",
      Self::InfestedStone => "infested_stone",
      Self::InfestedCobblestone => "infested_cobblestone",
      Self::InfestedStoneBricks => "infested_stone_bricks",
      Self::InfestedMossyStoneBricks => "infested_mossy_stone_bricks",
      Self::InfestedCrackedStoneBricks => "infested_cracked_stone_bricks",
      Self::InfestedChiseledStoneBricks => "infested_chiseled_stone_bricks",
      Self::StoneBricks => "stone_bricks",
      Self::MossyStoneBricks => "mossy_stone_bricks",
      Self::CrackedStoneBricks => "cracked_stone_bricks",
      Self::ChiseledStoneBricks => "chiseled_stone_bricks",
      Self::BrownMushroomBlock => "brown_mushroom_block",
      Self::RedMushroomBlock => "red_mushroom_block",
      Self::MushroomStem => "mushroom_stem",
      Self::IronBars => "iron_bars",
      Self::GlassPane => "glass_pane",
      Self::Melon => "melon",
      Self::Vine => "vine",
      Self::OakFenceGate => "oak_fence_gate",
      Self::SpruceFenceGate => "spruce_fence_gate",
      Self::BirchFenceGate => "birch_fence_gate",
      Self::JungleFenceGate => "jungle_fence_gate",
      Self::AcaciaFenceGate => "acacia_fence_gate",
      Self::DarkOakFenceGate => "dark_oak_fence_gate",
      Self::BrickStairs => "brick_stairs",
      Self::StoneBrickStairs => "stone_brick_stairs",
      Self::Mycelium => "mycelium",
      Self::LilyPad => "lily_pad",
      Self::NetherBricks => "nether_bricks",
      Self::NetherBrickFence => "nether_brick_fence",
      Self::NetherBrickStairs => "nether_brick_stairs",
      Self::EnchantingTable => "enchanting_table",
      Self::EndPortalFrame => "end_portal_frame",
      Self::EndStone => "end_stone",
      Self::EndStoneBricks => "end_stone_bricks",
      Self::DragonEgg => "dragon_egg",
      Self::RedstoneLamp => "redstone_lamp",
      Self::SandstoneStairs => "sandstone_stairs",
      Self::EmeraldOre => "emerald_ore",
      Self::EnderChest => "ender_chest",
      Self::TripwireHook => "tripwire_hook",
      Self::EmeraldBlock => "emerald_block",
      Self::SpruceStairs => "spruce_stairs",
      Self::BirchStairs => "birch_stairs",
      Self::JungleStairs => "jungle_stairs",
      Self::CommandBlock => "command_block",
      Self::Beacon => "beacon",
      Self::CobblestoneWall => "cobblestone_wall",
      Self::MossyCobblestoneWall => "mossy_cobblestone_wall",
      Self::BrickWall => "brick_wall",
      Self::PrismarineWall => "prismarine_wall",
      Self::RedSandstoneWall => "red_sandstone_wall",
      Self::MossyStoneBrickWall => "mossy_stone_brick_wall",
      Self::GraniteWall => "granite_wall",
      Self::StoneBrickWall => "stone_brick_wall",
      Self::NetherBrickWall => "nether_brick_wall",
      Self::AndesiteWall => "andesite_wall",
      Self::RedNetherBrickWall => "red_nether_brick_wall",
      Self::SandstoneWall => "sandstone_wall",
      Self::EndStoneBrickWall => "end_stone_brick_wall",
      Self::DioriteWall => "diorite_wall",
      Self::OakButton => "oak_button",
      Self::SpruceButton => "spruce_button",
      Self::BirchButton => "birch_button",
      Self::JungleButton => "jungle_button",
      Self::AcaciaButton => "acacia_button",
      Self::DarkOakButton => "dark_oak_button",
      Self::Anvil => "anvil",
      Self::ChippedAnvil => "chipped_anvil",
      Self::DamagedAnvil => "damaged_anvil",
      Self::TrappedChest => "trapped_chest",
      Self::LightWeightedPressurePlate => "light_weighted_pressure_plate",
      Self::HeavyWeightedPressurePlate => "heavy_weighted_pressure_plate",
      Self::DaylightDetector => "daylight_detector",
      Self::RedstoneBlock => "redstone_block",
      Self::NetherQuartzOre => "nether_quartz_ore",
      Self::Hopper => "hopper",
      Self::ChiseledQuartzBlock => "chiseled_quartz_block",
      Self::QuartzBlock => "quartz_block",
      Self::QuartzPillar => "quartz_pillar",
      Self::QuartzStairs => "quartz_stairs",
      Self::ActivatorRail => "activator_rail",
      Self::Dropper => "dropper",
      Self::WhiteTerracotta => "white_terracotta",
      Self::OrangeTerracotta => "orange_terracotta",
      Self::MagentaTerracotta => "magenta_terracotta",
      Self::LightBlueTerracotta => "light_blue_terracotta",
      Self::YellowTerracotta => "yellow_terracotta",
      Self::LimeTerracotta => "lime_terracotta",
      Self::PinkTerracotta => "pink_terracotta",
      Self::GrayTerracotta => "gray_terracotta",
      Self::LightGrayTerracotta => "light_gray_terracotta",
      Self::CyanTerracotta => "cyan_terracotta",
      Self::PurpleTerracotta => "purple_terracotta",
      Self::BlueTerracotta => "blue_terracotta",
      Self::BrownTerracotta => "brown_terracotta",
      Self::GreenTerracotta => "green_terracotta",
      Self::RedTerracotta => "red_terracotta",
      Self::BlackTerracotta => "black_terracotta",
      Self::Barrier => "barrier",
      Self::IronTrapdoor => "iron_trapdoor",
      Self::HayBlock => "hay_block",
      Self::WhiteCarpet => "white_carpet",
      Self::OrangeCarpet => "orange_carpet",
      Self::MagentaCarpet => "magenta_carpet",
      Self::LightBlueCarpet => "light_blue_carpet",
      Self::YellowCarpet => "yellow_carpet",
      Self::LimeCarpet => "lime_carpet",
      Self::PinkCarpet => "pink_carpet",
      Self::GrayCarpet => "gray_carpet",
      Self::LightGrayCarpet => "light_gray_carpet",
      Self::CyanCarpet => "cyan_carpet",
      Self::PurpleCarpet => "purple_carpet",
      Self::BlueCarpet => "blue_carpet",
      Self::BrownCarpet => "brown_carpet",
      Self::GreenCarpet => "green_carpet",
      Self::RedCarpet => "red_carpet",
      Self::BlackCarpet => "black_carpet",
      Self::Terracotta => "terracotta",
      Self::CoalBlock => "coal_block",
      Self::PackedIce => "packed_ice",
      Self::AcaciaStairs => "acacia_stairs",
      Self::DarkOakStairs => "dark_oak_stairs",
      Self::SlimeBlock => "slime_block",
      Self::GrassPath => "grass_path",
      Self::Sunflower => "sunflower",
      Self::Lilac => "lilac",
      Self::RoseBush => "rose_bush",
      Self::Peony => "peony",
      Self::TallGrass => "tall_grass",
      Self::LargeFern => "large_fern",
      Self::WhiteStainedGlass => "white_stained_glass",
      Self::OrangeStainedGlass => "orange_stained_glass",
      Self::MagentaStainedGlass => "magenta_stained_glass",
      Self::LightBlueStainedGlass => "light_blue_stained_glass",
      Self::YellowStainedGlass => "yellow_stained_glass",
      Self::LimeStainedGlass => "lime_stained_glass",
      Self::PinkStainedGlass => "pink_stained_glass",
      Self::GrayStainedGlass => "gray_stained_glass",
      Self::LightGrayStainedGlass => "light_gray_stained_glass",
      Self::CyanStainedGlass => "cyan_stained_glass",
      Self::PurpleStainedGlass => "purple_stained_glass",
      Self::BlueStainedGlass => "blue_stained_glass",
      Self::BrownStainedGlass => "brown_stained_glass",
      Self::GreenStainedGlass => "green_stained_glass",
      Self::RedStainedGlass => "red_stained_glass",
      Self::BlackStainedGlass => "black_stained_glass",
      Self::WhiteStainedGlassPane => "white_stained_glass_pane",
      Self::OrangeStainedGlassPane => "orange_stained_glass_pane",
      Self::MagentaStainedGlassPane => "magenta_stained_glass_pane",
      Self::LightBlueStainedGlassPane => "light_blue_stained_glass_pane",
      Self::YellowStainedGlassPane => "yellow_stained_glass_pane",
      Self::LimeStainedGlassPane => "lime_stained_glass_pane",
      Self::PinkStainedGlassPane => "pink_stained_glass_pane",
      Self::GrayStainedGlassPane => "gray_stained_glass_pane",
      Self::LightGrayStainedGlassPane => "light_gray_stained_glass_pane",
      Self::CyanStainedGlassPane => "cyan_stained_glass_pane",
      Self::PurpleStainedGlassPane => "purple_stained_glass_pane",
      Self::BlueStainedGlassPane => "blue_stained_glass_pane",
      Self::BrownStainedGlassPane => "brown_stained_glass_pane",
      Self::GreenStainedGlassPane => "green_stained_glass_pane",
      Self::RedStainedGlassPane => "red_stained_glass_pane",
      Self::BlackStainedGlassPane => "black_stained_glass_pane",
      Self::Prismarine => "prismarine",
      Self::PrismarineBricks => "prismarine_bricks",
      Self::DarkPrismarine => "dark_prismarine",
      Self::PrismarineStairs => "prismarine_stairs",
      Self::PrismarineBrickStairs => "prismarine_brick_stairs",
      Self::DarkPrismarineStairs => "dark_prismarine_stairs",
      Self::SeaLantern => "sea_lantern",
      Self::RedSandstone => "red_sandstone",
      Self::ChiseledRedSandstone => "chiseled_red_sandstone",
      Self::CutRedSandstone => "cut_red_sandstone",
      Self::RedSandstoneStairs => "red_sandstone_stairs",
      Self::RepeatingCommandBlock => "repeating_command_block",
      Self::ChainCommandBlock => "chain_command_block",
      Self::MagmaBlock => "magma_block",
      Self::NetherWartBlock => "nether_wart_block",
      Self::RedNetherBricks => "red_nether_bricks",
      Self::BoneBlock => "bone_block",
      Self::StructureVoid => "structure_void",
      Self::Observer => "observer",
      Self::ShulkerBox => "shulker_box",
      Self::WhiteShulkerBox => "white_shulker_box",
      Self::OrangeShulkerBox => "orange_shulker_box",
      Self::MagentaShulkerBox => "magenta_shulker_box",
      Self::LightBlueShulkerBox => "light_blue_shulker_box",
      Self::YellowShulkerBox => "yellow_shulker_box",
      Self::LimeShulkerBox => "lime_shulker_box",
      Self::PinkShulkerBox => "pink_shulker_box",
      Self::GrayShulkerBox => "gray_shulker_box",
      Self::LightGrayShulkerBox => "light_gray_shulker_box",
      Self::CyanShulkerBox => "cyan_shulker_box",
      Self::PurpleShulkerBox => "purple_shulker_box",
      Self::BlueShulkerBox => "blue_shulker_box",
      Self::BrownShulkerBox => "brown_shulker_box",
      Self::GreenShulkerBox => "green_shulker_box",
      Self::RedShulkerBox => "red_shulker_box",
      Self::BlackShulkerBox => "black_shulker_box",
      Self::WhiteGlazedTerracotta => "white_glazed_terracotta",
      Self::OrangeGlazedTerracotta => "orange_glazed_terracotta",
      Self::MagentaGlazedTerracotta => "magenta_glazed_terracotta",
      Self::LightBlueGlazedTerracotta => "light_blue_glazed_terracotta",
      Self::YellowGlazedTerracotta => "yellow_glazed_terracotta",
      Self::LimeGlazedTerracotta => "lime_glazed_terracotta",
      Self::PinkGlazedTerracotta => "pink_glazed_terracotta",
      Self::GrayGlazedTerracotta => "gray_glazed_terracotta",
      Self::LightGrayGlazedTerracotta => "light_gray_glazed_terracotta",
      Self::CyanGlazedTerracotta => "cyan_glazed_terracotta",
      Self::PurpleGlazedTerracotta => "purple_glazed_terracotta",
      Self::BlueGlazedTerracotta => "blue_glazed_terracotta",
      Self::BrownGlazedTerracotta => "brown_glazed_terracotta",
      Self::GreenGlazedTerracotta => "green_glazed_terracotta",
      Self::RedGlazedTerracotta => "red_glazed_terracotta",
      Self::BlackGlazedTerracotta => "black_glazed_terracotta",
      Self::WhiteConcrete => "white_concrete",
      Self::OrangeConcrete => "orange_concrete",
      Self::MagentaConcrete => "magenta_concrete",
      Self::LightBlueConcrete => "light_blue_concrete",
      Self::YellowConcrete => "yellow_concrete",
      Self::LimeConcrete => "lime_concrete",
      Self::PinkConcrete => "pink_concrete",
      Self::GrayConcrete => "gray_concrete",
      Self::LightGrayConcrete => "light_gray_concrete",
      Self::CyanConcrete => "cyan_concrete",
      Self::PurpleConcrete => "purple_concrete",
      Self::BlueConcrete => "blue_concrete",
      Self::BrownConcrete => "brown_concrete",
      Self::GreenConcrete => "green_concrete",
      Self::RedConcrete => "red_concrete",
      Self::BlackConcrete => "black_concrete",
      Self::WhiteConcretePowder => "white_concrete_powder",
      Self::OrangeConcretePowder => "orange_concrete_powder",
      Self::MagentaConcretePowder => "magenta_concrete_powder",
      Self::LightBlueConcretePowder => "light_blue_concrete_powder",
      Self::YellowConcretePowder => "yellow_concrete_powder",
      Self::LimeConcretePowder => "lime_concrete_powder",
      Self::PinkConcretePowder => "pink_concrete_powder",
      Self::GrayConcretePowder => "gray_concrete_powder",
      Self::LightGrayConcretePowder => "light_gray_concrete_powder",
      Self::CyanConcretePowder => "cyan_concrete_powder",
      Self::PurpleConcretePowder => "purple_concrete_powder",
      Self::BlueConcretePowder => "blue_concrete_powder",
      Self::BrownConcretePowder => "brown_concrete_powder",
      Self::GreenConcretePowder => "green_concrete_powder",
      Self::RedConcretePowder => "red_concrete_powder",
      Self::BlackConcretePowder => "black_concrete_powder",
      Self::TurtleEgg => "turtle_egg",
      Self::DeadTubeCoralBlock => "dead_tube_coral_block",
      Self::DeadBrainCoralBlock => "dead_brain_coral_block",
      Self::DeadBubbleCoralBlock => "dead_bubble_coral_block",
      Self::DeadFireCoralBlock => "dead_fire_coral_block",
      Self::DeadHornCoralBlock => "dead_horn_coral_block",
      Self::TubeCoralBlock => "tube_coral_block",
      Self::BrainCoralBlock => "brain_coral_block",
      Self::BubbleCoralBlock => "bubble_coral_block",
      Self::FireCoralBlock => "fire_coral_block",
      Self::HornCoralBlock => "horn_coral_block",
      Self::TubeCoral => "tube_coral",
      Self::BrainCoral => "brain_coral",
      Self::BubbleCoral => "bubble_coral",
      Self::FireCoral => "fire_coral",
      Self::HornCoral => "horn_coral",
      Self::DeadBrainCoral => "dead_brain_coral",
      Self::DeadBubbleCoral => "dead_bubble_coral",
      Self::DeadFireCoral => "dead_fire_coral",
      Self::DeadHornCoral => "dead_horn_coral",
      Self::DeadTubeCoral => "dead_tube_coral",
      Self::TubeCoralFan => "tube_coral_fan",
      Self::BrainCoralFan => "brain_coral_fan",
      Self::BubbleCoralFan => "bubble_coral_fan",
      Self::FireCoralFan => "fire_coral_fan",
      Self::HornCoralFan => "horn_coral_fan",
      Self::DeadTubeCoralFan => "dead_tube_coral_fan",
      Self::DeadBrainCoralFan => "dead_brain_coral_fan",
      Self::DeadBubbleCoralFan => "dead_bubble_coral_fan",
      Self::DeadFireCoralFan => "dead_fire_coral_fan",
      Self::DeadHornCoralFan => "dead_horn_coral_fan",
      Self::BlueIce => "blue_ice",
      Self::Conduit => "conduit",
      Self::PolishedGraniteStairs => "polished_granite_stairs",
      Self::SmoothRedSandstoneStairs => "smooth_red_sandstone_stairs",
      Self::MossyStoneBrickStairs => "mossy_stone_brick_stairs",
      Self::PolishedDioriteStairs => "polished_diorite_stairs",
      Self::MossyCobblestoneStairs => "mossy_cobblestone_stairs",
      Self::EndStoneBrickStairs => "end_stone_brick_stairs",
      Self::StoneStairs => "stone_stairs",
      Self::SmoothSandstoneStairs => "smooth_sandstone_stairs",
      Self::SmoothQuartzStairs => "smooth_quartz_stairs",
      Self::GraniteStairs => "granite_stairs",
      Self::AndesiteStairs => "andesite_stairs",
      Self::RedNetherBrickStairs => "red_nether_brick_stairs",
      Self::PolishedAndesiteStairs => "polished_andesite_stairs",
      Self::DioriteStairs => "diorite_stairs",
      Self::PolishedGraniteSlab => "polished_granite_slab",
      Self::SmoothRedSandstoneSlab => "smooth_red_sandstone_slab",
      Self::MossyStoneBrickSlab => "mossy_stone_brick_slab",
      Self::PolishedDioriteSlab => "polished_diorite_slab",
      Self::MossyCobblestoneSlab => "mossy_cobblestone_slab",
      Self::EndStoneBrickSlab => "end_stone_brick_slab",
      Self::SmoothSandstoneSlab => "smooth_sandstone_slab",
      Self::SmoothQuartzSlab => "smooth_quartz_slab",
      Self::GraniteSlab => "granite_slab",
      Self::AndesiteSlab => "andesite_slab",
      Self::RedNetherBrickSlab => "red_nether_brick_slab",
      Self::PolishedAndesiteSlab => "polished_andesite_slab",
      Self::DioriteSlab => "diorite_slab",
      Self::Scaffolding => "scaffolding",
      Self::IronDoor => "iron_door",
      Self::OakDoor => "oak_door",
      Self::SpruceDoor => "spruce_door",
      Self::BirchDoor => "birch_door",
      Self::JungleDoor => "jungle_door",
      Self::AcaciaDoor => "acacia_door",
      Self::DarkOakDoor => "dark_oak_door",
      Self::Repeater => "repeater",
      Self::Comparator => "comparator",
      Self::StructureBlock => "structure_block",
      Self::Jigsaw => "jigsaw",
      Self::Composter => "composter",
      Self::TurtleHelmet => "turtle_helmet",
      Self::Scute => "scute",
      Self::IronShovel => "iron_shovel",
      Self::IronPickaxe => "iron_pickaxe",
      Self::IronAxe => "iron_axe",
      Self::FlintAndSteel => "flint_and_steel",
      Self::Apple => "apple",
      Self::Bow => "bow",
      Self::Arrow => "arrow",
      Self::Coal => "coal",
      Self::Charcoal => "charcoal",
      Self::Diamond => "diamond",
      Self::IronIngot => "iron_ingot",
      Self::GoldIngot => "gold_ingot",
      Self::IronSword => "iron_sword",
      Self::WoodenSword => "wooden_sword",
      Self::WoodenShovel => "wooden_shovel",
      Self::WoodenPickaxe => "wooden_pickaxe",
      Self::WoodenAxe => "wooden_axe",
      Self::StoneSword => "stone_sword",
      Self::StoneShovel => "stone_shovel",
      Self::StonePickaxe => "stone_pickaxe",
      Self::StoneAxe => "stone_axe",
      Self::DiamondSword => "diamond_sword",
      Self::DiamondShovel => "diamond_shovel",
      Self::DiamondPickaxe => "diamond_pickaxe",
      Self::DiamondAxe => "diamond_axe",
      Self::Stick => "stick",
      Self::Bowl => "bowl",
      Self::MushroomStew => "mushroom_stew",
      Self::GoldenSword => "golden_sword",
      Self::GoldenShovel => "golden_shovel",
      Self::GoldenPickaxe => "golden_pickaxe",
      Self::GoldenAxe => "golden_axe",
      Self::String => "string",
      Self::Feather => "feather",
      Self::Gunpowder => "gunpowder",
      Self::WoodenHoe => "wooden_hoe",
      Self::StoneHoe => "stone_hoe",
      Self::IronHoe => "iron_hoe",
      Self::DiamondHoe => "diamond_hoe",
      Self::GoldenHoe => "golden_hoe",
      Self::WheatSeeds => "wheat_seeds",
      Self::Wheat => "wheat",
      Self::Bread => "bread",
      Self::LeatherHelmet => "leather_helmet",
      Self::LeatherChestplate => "leather_chestplate",
      Self::LeatherLeggings => "leather_leggings",
      Self::LeatherBoots => "leather_boots",
      Self::ChainmailHelmet => "chainmail_helmet",
      Self::ChainmailChestplate => "chainmail_chestplate",
      Self::ChainmailLeggings => "chainmail_leggings",
      Self::ChainmailBoots => "chainmail_boots",
      Self::IronHelmet => "iron_helmet",
      Self::IronChestplate => "iron_chestplate",
      Self::IronLeggings => "iron_leggings",
      Self::IronBoots => "iron_boots",
      Self::DiamondHelmet => "diamond_helmet",
      Self::DiamondChestplate => "diamond_chestplate",
      Self::DiamondLeggings => "diamond_leggings",
      Self::DiamondBoots => "diamond_boots",
      Self::GoldenHelmet => "golden_helmet",
      Self::GoldenChestplate => "golden_chestplate",
      Self::GoldenLeggings => "golden_leggings",
      Self::GoldenBoots => "golden_boots",
      Self::Flint => "flint",
      Self::Porkchop => "porkchop",
      Self::CookedPorkchop => "cooked_porkchop",
      Self::Painting => "painting",
      Self::GoldenApple => "golden_apple",
      Self::EnchantedGoldenApple => "enchanted_golden_apple",
      Self::OakSign => "oak_sign",
      Self::SpruceSign => "spruce_sign",
      Self::BirchSign => "birch_sign",
      Self::JungleSign => "jungle_sign",
      Self::AcaciaSign => "acacia_sign",
      Self::DarkOakSign => "dark_oak_sign",
      Self::Bucket => "bucket",
      Self::WaterBucket => "water_bucket",
      Self::LavaBucket => "lava_bucket",
      Self::Minecart => "minecart",
      Self::Saddle => "saddle",
      Self::Redstone => "redstone",
      Self::Snowball => "snowball",
      Self::OakBoat => "oak_boat",
      Self::Leather => "leather",
      Self::MilkBucket => "milk_bucket",
      Self::PufferfishBucket => "pufferfish_bucket",
      Self::SalmonBucket => "salmon_bucket",
      Self::CodBucket => "cod_bucket",
      Self::TropicalFishBucket => "tropical_fish_bucket",
      Self::Brick => "brick",
      Self::ClayBall => "clay_ball",
      Self::SugarCane => "sugar_cane",
      Self::Kelp => "kelp",
      Self::DriedKelpBlock => "dried_kelp_block",
      Self::Bamboo => "bamboo",
      Self::Paper => "paper",
      Self::Book => "book",
      Self::SlimeBall => "slime_ball",
      Self::ChestMinecart => "chest_minecart",
      Self::FurnaceMinecart => "furnace_minecart",
      Self::Egg => "egg",
      Self::Compass => "compass",
      Self::FishingRod => "fishing_rod",
      Self::Clock => "clock",
      Self::GlowstoneDust => "glowstone_dust",
      Self::Cod => "cod",
      Self::Salmon => "salmon",
      Self::TropicalFish => "tropical_fish",
      Self::Pufferfish => "pufferfish",
      Self::CookedCod => "cooked_cod",
      Self::CookedSalmon => "cooked_salmon",
      Self::InkSac => "ink_sac",
      Self::RedDye => "red_dye",
      Self::GreenDye => "green_dye",
      Self::CocoaBeans => "cocoa_beans",
      Self::LapisLazuli => "lapis_lazuli",
      Self::PurpleDye => "purple_dye",
      Self::CyanDye => "cyan_dye",
      Self::LightGrayDye => "light_gray_dye",
      Self::GrayDye => "gray_dye",
      Self::PinkDye => "pink_dye",
      Self::LimeDye => "lime_dye",
      Self::YellowDye => "yellow_dye",
      Self::LightBlueDye => "light_blue_dye",
      Self::MagentaDye => "magenta_dye",
      Self::OrangeDye => "orange_dye",
      Self::BoneMeal => "bone_meal",
      Self::BlueDye => "blue_dye",
      Self::BrownDye => "brown_dye",
      Self::BlackDye => "black_dye",
      Self::WhiteDye => "white_dye",
      Self::Bone => "bone",
      Self::Sugar => "sugar",
      Self::Cake => "cake",
      Self::WhiteBed => "white_bed",
      Self::OrangeBed => "orange_bed",
      Self::MagentaBed => "magenta_bed",
      Self::LightBlueBed => "light_blue_bed",
      Self::YellowBed => "yellow_bed",
      Self::LimeBed => "lime_bed",
      Self::PinkBed => "pink_bed",
      Self::GrayBed => "gray_bed",
      Self::LightGrayBed => "light_gray_bed",
      Self::CyanBed => "cyan_bed",
      Self::PurpleBed => "purple_bed",
      Self::BlueBed => "blue_bed",
      Self::BrownBed => "brown_bed",
      Self::GreenBed => "green_bed",
      Self::RedBed => "red_bed",
      Self::BlackBed => "black_bed",
      Self::Cookie => "cookie",
      Self::FilledMap => "filled_map",
      Self::Shears => "shears",
      Self::MelonSlice => "melon_slice",
      Self::DriedKelp => "dried_kelp",
      Self::PumpkinSeeds => "pumpkin_seeds",
      Self::MelonSeeds => "melon_seeds",
      Self::Beef => "beef",
      Self::CookedBeef => "cooked_beef",
      Self::Chicken => "chicken",
      Self::CookedChicken => "cooked_chicken",
      Self::RottenFlesh => "rotten_flesh",
      Self::EnderPearl => "ender_pearl",
      Self::BlazeRod => "blaze_rod",
      Self::GhastTear => "ghast_tear",
      Self::GoldNugget => "gold_nugget",
      Self::NetherWart => "nether_wart",
      Self::Potion => "potion",
      Self::GlassBottle => "glass_bottle",
      Self::SpiderEye => "spider_eye",
      Self::FermentedSpiderEye => "fermented_spider_eye",
      Self::BlazePowder => "blaze_powder",
      Self::MagmaCream => "magma_cream",
      Self::BrewingStand => "brewing_stand",
      Self::Cauldron => "cauldron",
      Self::EnderEye => "ender_eye",
      Self::GlisteringMelonSlice => "glistering_melon_slice",
      Self::BatSpawnEgg => "bat_spawn_egg",
      Self::BeeSpawnEgg => "bee_spawn_egg",
      Self::BlazeSpawnEgg => "blaze_spawn_egg",
      Self::CatSpawnEgg => "cat_spawn_egg",
      Self::CaveSpiderSpawnEgg => "cave_spider_spawn_egg",
      Self::ChickenSpawnEgg => "chicken_spawn_egg",
      Self::CodSpawnEgg => "cod_spawn_egg",
      Self::CowSpawnEgg => "cow_spawn_egg",
      Self::CreeperSpawnEgg => "creeper_spawn_egg",
      Self::DolphinSpawnEgg => "dolphin_spawn_egg",
      Self::DonkeySpawnEgg => "donkey_spawn_egg",
      Self::DrownedSpawnEgg => "drowned_spawn_egg",
      Self::ElderGuardianSpawnEgg => "elder_guardian_spawn_egg",
      Self::EndermanSpawnEgg => "enderman_spawn_egg",
      Self::EndermiteSpawnEgg => "endermite_spawn_egg",
      Self::EvokerSpawnEgg => "evoker_spawn_egg",
      Self::FoxSpawnEgg => "fox_spawn_egg",
      Self::GhastSpawnEgg => "ghast_spawn_egg",
      Self::GuardianSpawnEgg => "guardian_spawn_egg",
      Self::HorseSpawnEgg => "horse_spawn_egg",
      Self::HuskSpawnEgg => "husk_spawn_egg",
      Self::LlamaSpawnEgg => "llama_spawn_egg",
      Self::MagmaCubeSpawnEgg => "magma_cube_spawn_egg",
      Self::MooshroomSpawnEgg => "mooshroom_spawn_egg",
      Self::MuleSpawnEgg => "mule_spawn_egg",
      Self::OcelotSpawnEgg => "ocelot_spawn_egg",
      Self::PandaSpawnEgg => "panda_spawn_egg",
      Self::ParrotSpawnEgg => "parrot_spawn_egg",
      Self::PhantomSpawnEgg => "phantom_spawn_egg",
      Self::PigSpawnEgg => "pig_spawn_egg",
      Self::PillagerSpawnEgg => "pillager_spawn_egg",
      Self::PolarBearSpawnEgg => "polar_bear_spawn_egg",
      Self::PufferfishSpawnEgg => "pufferfish_spawn_egg",
      Self::RabbitSpawnEgg => "rabbit_spawn_egg",
      Self::RavagerSpawnEgg => "ravager_spawn_egg",
      Self::SalmonSpawnEgg => "salmon_spawn_egg",
      Self::SheepSpawnEgg => "sheep_spawn_egg",
      Self::ShulkerSpawnEgg => "shulker_spawn_egg",
      Self::SilverfishSpawnEgg => "silverfish_spawn_egg",
      Self::SkeletonSpawnEgg => "skeleton_spawn_egg",
      Self::SkeletonHorseSpawnEgg => "skeleton_horse_spawn_egg",
      Self::SlimeSpawnEgg => "slime_spawn_egg",
      Self::SpiderSpawnEgg => "spider_spawn_egg",
      Self::SquidSpawnEgg => "squid_spawn_egg",
      Self::StraySpawnEgg => "stray_spawn_egg",
      Self::TraderLlamaSpawnEgg => "trader_llama_spawn_egg",
      Self::TropicalFishSpawnEgg => "tropical_fish_spawn_egg",
      Self::TurtleSpawnEgg => "turtle_spawn_egg",
      Self::VexSpawnEgg => "vex_spawn_egg",
      Self::VillagerSpawnEgg => "villager_spawn_egg",
      Self::VindicatorSpawnEgg => "vindicator_spawn_egg",
      Self::WanderingTraderSpawnEgg => "wandering_trader_spawn_egg",
      Self::WitchSpawnEgg => "witch_spawn_egg",
      Self::WitherSkeletonSpawnEgg => "wither_skeleton_spawn_egg",
      Self::WolfSpawnEgg => "wolf_spawn_egg",
      Self::ZombieSpawnEgg => "zombie_spawn_egg",
      Self::ZombieHorseSpawnEgg => "zombie_horse_spawn_egg",
      Self::ZombiePigmanSpawnEgg => "zombie_pigman_spawn_egg",
      Self::ZombieVillagerSpawnEgg => "zombie_villager_spawn_egg",
      Self::ExperienceBottle => "experience_bottle",
      Self::FireCharge => "fire_charge",
      Self::WritableBook => "writable_book",
      Self::WrittenBook => "written_book",
      Self::Emerald => "emerald",
      Self::ItemFrame => "item_frame",
      Self::FlowerPot => "flower_pot",
      Self::Carrot => "carrot",
      Self::Potato => "potato",
      Self::BakedPotato => "baked_potato",
      Self::PoisonousPotato => "poisonous_potato",
      Self::Map => "map",
      Self::GoldenCarrot => "golden_carrot",
      Self::SkeletonSkull => "skeleton_skull",
      Self::WitherSkeletonSkull => "wither_skeleton_skull",
      Self::PlayerHead => "player_head",
      Self::ZombieHead => "zombie_head",
      Self::CreeperHead => "creeper_head",
      Self::DragonHead => "dragon_head",
      Self::CarrotOnAStick => "carrot_on_a_stick",
      Self::NetherStar => "nether_star",
      Self::PumpkinPie => "pumpkin_pie",
      Self::FireworkRocket => "firework_rocket",
      Self::FireworkStar => "firework_star",
      Self::EnchantedBook => "enchanted_book",
      Self::NetherBrick => "nether_brick",
      Self::Quartz => "quartz",
      Self::TntMinecart => "tnt_minecart",
      Self::HopperMinecart => "hopper_minecart",
      Self::PrismarineShard => "prismarine_shard",
      Self::PrismarineCrystals => "prismarine_crystals",
      Self::Rabbit => "rabbit",
      Self::CookedRabbit => "cooked_rabbit",
      Self::RabbitStew => "rabbit_stew",
      Self::RabbitFoot => "rabbit_foot",
      Self::RabbitHide => "rabbit_hide",
      Self::ArmorStand => "armor_stand",
      Self::IronHorseArmor => "iron_horse_armor",
      Self::GoldenHorseArmor => "golden_horse_armor",
      Self::DiamondHorseArmor => "diamond_horse_armor",
      Self::LeatherHorseArmor => "leather_horse_armor",
      Self::Lead => "lead",
      Self::NameTag => "name_tag",
      Self::CommandBlockMinecart => "command_block_minecart",
      Self::Mutton => "mutton",
      Self::CookedMutton => "cooked_mutton",
      Self::WhiteBanner => "white_banner",
      Self::OrangeBanner => "orange_banner",
      Self::MagentaBanner => "magenta_banner",
      Self::LightBlueBanner => "light_blue_banner",
      Self::YellowBanner => "yellow_banner",
      Self::LimeBanner => "lime_banner",
      Self::PinkBanner => "pink_banner",
      Self::GrayBanner => "gray_banner",
      Self::LightGrayBanner => "light_gray_banner",
      Self::CyanBanner => "cyan_banner",
      Self::PurpleBanner => "purple_banner",
      Self::BlueBanner => "blue_banner",
      Self::BrownBanner => "brown_banner",
      Self::GreenBanner => "green_banner",
      Self::RedBanner => "red_banner",
      Self::BlackBanner => "black_banner",
      Self::EndCrystal => "end_crystal",
      Self::ChorusFruit => "chorus_fruit",
      Self::PoppedChorusFruit => "popped_chorus_fruit",
      Self::Beetroot => "beetroot",
      Self::BeetrootSeeds => "beetroot_seeds",
      Self::BeetrootSoup => "beetroot_soup",
      Self::DragonBreath => "dragon_breath",
      Self::SplashPotion => "splash_potion",
      Self::SpectralArrow => "spectral_arrow",
      Self::TippedArrow => "tipped_arrow",
      Self::LingeringPotion => "lingering_potion",
      Self::Shield => "shield",
      Self::Elytra => "elytra",
      Self::SpruceBoat => "spruce_boat",
      Self::BirchBoat => "birch_boat",
      Self::JungleBoat => "jungle_boat",
      Self::AcaciaBoat => "acacia_boat",
      Self::DarkOakBoat => "dark_oak_boat",
      Self::TotemOfUndying => "totem_of_undying",
      Self::ShulkerShell => "shulker_shell",
      Self::IronNugget => "iron_nugget",
      Self::KnowledgeBook => "knowledge_book",
      Self::DebugStick => "debug_stick",
      Self::MusicDisc13 => "music_disc_13",
      Self::MusicDiscCat => "music_disc_cat",
      Self::MusicDiscBlocks => "music_disc_blocks",
      Self::MusicDiscChirp => "music_disc_chirp",
      Self::MusicDiscFar => "music_disc_far",
      Self::MusicDiscMall => "music_disc_mall",
      Self::MusicDiscMellohi => "music_disc_mellohi",
      Self::MusicDiscStal => "music_disc_stal",
      Self::MusicDiscStrad => "music_disc_strad",
      Self::MusicDiscWard => "music_disc_ward",
      Self::MusicDisc11 => "music_disc_11",
      Self::MusicDiscWait => "music_disc_wait",
      Self::Trident => "trident",
      Self::PhantomMembrane => "phantom_membrane",
      Self::NautilusShell => "nautilus_shell",
      Self::HeartOfTheSea => "heart_of_the_sea",
      Self::Crossbow => "crossbow",
      Self::SuspiciousStew => "suspicious_stew",
      Self::Loom => "loom",
      Self::FlowerBannerPattern => "flower_banner_pattern",
      Self::CreeperBannerPattern => "creeper_banner_pattern",
      Self::SkullBannerPattern => "skull_banner_pattern",
      Self::MojangBannerPattern => "mojang_banner_pattern",
      Self::GlobeBannerPattern => "globe_banner_pattern",
      Self::Barrel => "barrel",
      Self::Smoker => "smoker",
      Self::BlastFurnace => "blast_furnace",
      Self::CartographyTable => "cartography_table",
      Self::FletchingTable => "fletching_table",
      Self::Grindstone => "grindstone",
      Self::Lectern => "lectern",
      Self::SmithingTable => "smithing_table",
      Self::Stonecutter => "stonecutter",
      Self::Bell => "bell",
      Self::Lantern => "lantern",
      Self::SweetBerries => "sweet_berries",
      Self::Campfire => "campfire",
      Self::Honeycomb => "honeycomb",
      Self::BeeNest => "bee_nest",
      Self::Beehive => "beehive",
      Self::HoneyBottle => "honey_bottle",
      Self::HoneyBlock => "honey_block",
      Self::HoneycombBlock => "honeycomb_block",
    })
  }
  fn from_registry_key(key: &NamespacedKey) -> Option<Self> {
    if *key.namespace() != crate::helpers::MINECRAFT_NAMESPACE {return None;}
    Some(match &**key.key() {
      "air" => Self::Air,
      "stone" => Self::Stone,
      "granite" => Self::Granite,
      "polished_granite" => Self::PolishedGranite,
      "diorite" => Self::Diorite,
      "polished_diorite" => Self::PolishedDiorite,
      "andesite" => Self::Andesite,
      "polished_andesite" => Self::PolishedAndesite,
      "grass_block" => Self::GrassBlock,
      "dirt" => Self::Dirt,
      "coarse_dirt" => Self::CoarseDirt,
      "podzol" => Self::Podzol,
      "cobblestone" => Self::Cobblestone,
      "oak_planks" => Self::OakPlanks,
      "spruce_planks" => Self::SprucePlanks,
      "birch_planks" => Self::BirchPlanks,
      "jungle_planks" => Self::JunglePlanks,
      "acacia_planks" => Self::AcaciaPlanks,
      "dark_oak_planks" => Self::DarkOakPlanks,
      "oak_sapling" => Self::OakSapling,
      "spruce_sapling" => Self::SpruceSapling,
      "birch_sapling" => Self::BirchSapling,
      "jungle_sapling" => Self::JungleSapling,
      "acacia_sapling" => Self::AcaciaSapling,
      "dark_oak_sapling" => Self::DarkOakSapling,
      "bedrock" => Self::Bedrock,
      "sand" => Self::Sand,
      "red_sand" => Self::RedSand,
      "gravel" => Self::Gravel,
      "gold_ore" => Self::GoldOre,
      "iron_ore" => Self::IronOre,
      "coal_ore" => Self::CoalOre,
      "oak_log" => Self::OakLog,
      "spruce_log" => Self::SpruceLog,
      "birch_log" => Self::BirchLog,
      "jungle_log" => Self::JungleLog,
      "acacia_log" => Self::AcaciaLog,
      "dark_oak_log" => Self::DarkOakLog,
      "stripped_oak_log" => Self::StrippedOakLog,
      "stripped_spruce_log" => Self::StrippedSpruceLog,
      "stripped_birch_log" => Self::StrippedBirchLog,
      "stripped_jungle_log" => Self::StrippedJungleLog,
      "stripped_acacia_log" => Self::StrippedAcaciaLog,
      "stripped_dark_oak_log" => Self::StrippedDarkOakLog,
      "stripped_oak_wood" => Self::StrippedOakWood,
      "stripped_spruce_wood" => Self::StrippedSpruceWood,
      "stripped_birch_wood" => Self::StrippedBirchWood,
      "stripped_jungle_wood" => Self::StrippedJungleWood,
      "stripped_acacia_wood" => Self::StrippedAcaciaWood,
      "stripped_dark_oak_wood" => Self::StrippedDarkOakWood,
      "oak_wood" => Self::OakWood,
      "spruce_wood" => Self::SpruceWood,
      "birch_wood" => Self::BirchWood,
      "jungle_wood" => Self::JungleWood,
      "acacia_wood" => Self::AcaciaWood,
      "dark_oak_wood" => Self::DarkOakWood,
      "oak_leaves" => Self::OakLeaves,
      "spruce_leaves" => Self::SpruceLeaves,
      "birch_leaves" => Self::BirchLeaves,
      "jungle_leaves" => Self::JungleLeaves,
      "acacia_leaves" => Self::AcaciaLeaves,
      "dark_oak_leaves" => Self::DarkOakLeaves,
      "sponge" => Self::Sponge,
      "wet_sponge" => Self::WetSponge,
      "glass" => Self::Glass,
      "lapis_ore" => Self::LapisOre,
      "lapis_block" => Self::LapisBlock,
      "dispenser" => Self::Dispenser,
      "sandstone" => Self::Sandstone,
      "chiseled_sandstone" => Self::ChiseledSandstone,
      "cut_sandstone" => Self::CutSandstone,
      "note_block" => Self::NoteBlock,
      "powered_rail" => Self::PoweredRail,
      "detector_rail" => Self::DetectorRail,
      "sticky_piston" => Self::StickyPiston,
      "cobweb" => Self::Cobweb,
      "grass" => Self::Grass,
      "fern" => Self::Fern,
      "dead_bush" => Self::DeadBush,
      "seagrass" => Self::Seagrass,
      "sea_pickle" => Self::SeaPickle,
      "piston" => Self::Piston,
      "white_wool" => Self::WhiteWool,
      "orange_wool" => Self::OrangeWool,
      "magenta_wool" => Self::MagentaWool,
      "light_blue_wool" => Self::LightBlueWool,
      "yellow_wool" => Self::YellowWool,
      "lime_wool" => Self::LimeWool,
      "pink_wool" => Self::PinkWool,
      "gray_wool" => Self::GrayWool,
      "light_gray_wool" => Self::LightGrayWool,
      "cyan_wool" => Self::CyanWool,
      "purple_wool" => Self::PurpleWool,
      "blue_wool" => Self::BlueWool,
      "brown_wool" => Self::BrownWool,
      "green_wool" => Self::GreenWool,
      "red_wool" => Self::RedWool,
      "black_wool" => Self::BlackWool,
      "dandelion" => Self::Dandelion,
      "poppy" => Self::Poppy,
      "blue_orchid" => Self::BlueOrchid,
      "allium" => Self::Allium,
      "azure_bluet" => Self::AzureBluet,
      "red_tulip" => Self::RedTulip,
      "orange_tulip" => Self::OrangeTulip,
      "white_tulip" => Self::WhiteTulip,
      "pink_tulip" => Self::PinkTulip,
      "oxeye_daisy" => Self::OxeyeDaisy,
      "cornflower" => Self::Cornflower,
      "lily_of_the_valley" => Self::LilyOfTheValley,
      "wither_rose" => Self::WitherRose,
      "brown_mushroom" => Self::BrownMushroom,
      "red_mushroom" => Self::RedMushroom,
      "gold_block" => Self::GoldBlock,
      "iron_block" => Self::IronBlock,
      "oak_slab" => Self::OakSlab,
      "spruce_slab" => Self::SpruceSlab,
      "birch_slab" => Self::BirchSlab,
      "jungle_slab" => Self::JungleSlab,
      "acacia_slab" => Self::AcaciaSlab,
      "dark_oak_slab" => Self::DarkOakSlab,
      "stone_slab" => Self::StoneSlab,
      "smooth_stone_slab" => Self::SmoothStoneSlab,
      "sandstone_slab" => Self::SandstoneSlab,
      "cut_sandstone_slab" => Self::CutSandstoneSlab,
      "petrified_oak_slab" => Self::PetrifiedOakSlab,
      "cobblestone_slab" => Self::CobblestoneSlab,
      "brick_slab" => Self::BrickSlab,
      "stone_brick_slab" => Self::StoneBrickSlab,
      "nether_brick_slab" => Self::NetherBrickSlab,
      "quartz_slab" => Self::QuartzSlab,
      "red_sandstone_slab" => Self::RedSandstoneSlab,
      "cut_red_sandstone_slab" => Self::CutRedSandstoneSlab,
      "purpur_slab" => Self::PurpurSlab,
      "prismarine_slab" => Self::PrismarineSlab,
      "prismarine_brick_slab" => Self::PrismarineBrickSlab,
      "dark_prismarine_slab" => Self::DarkPrismarineSlab,
      "smooth_quartz" => Self::SmoothQuartz,
      "smooth_red_sandstone" => Self::SmoothRedSandstone,
      "smooth_sandstone" => Self::SmoothSandstone,
      "smooth_stone" => Self::SmoothStone,
      "bricks" => Self::Bricks,
      "tnt" => Self::Tnt,
      "bookshelf" => Self::Bookshelf,
      "mossy_cobblestone" => Self::MossyCobblestone,
      "obsidian" => Self::Obsidian,
      "torch" => Self::Torch,
      "end_rod" => Self::EndRod,
      "chorus_plant" => Self::ChorusPlant,
      "chorus_flower" => Self::ChorusFlower,
      "purpur_block" => Self::PurpurBlock,
      "purpur_pillar" => Self::PurpurPillar,
      "purpur_stairs" => Self::PurpurStairs,
      "spawner" => Self::Spawner,
      "oak_stairs" => Self::OakStairs,
      "chest" => Self::Chest,
      "diamond_ore" => Self::DiamondOre,
      "diamond_block" => Self::DiamondBlock,
      "crafting_table" => Self::CraftingTable,
      "farmland" => Self::Farmland,
      "furnace" => Self::Furnace,
      "ladder" => Self::Ladder,
      "rail" => Self::Rail,
      "cobblestone_stairs" => Self::CobblestoneStairs,
      "lever" => Self::Lever,
      "stone_pressure_plate" => Self::StonePressurePlate,
      "oak_pressure_plate" => Self::OakPressurePlate,
      "spruce_pressure_plate" => Self::SprucePressurePlate,
      "birch_pressure_plate" => Self::BirchPressurePlate,
      "jungle_pressure_plate" => Self::JunglePressurePlate,
      "acacia_pressure_plate" => Self::AcaciaPressurePlate,
      "dark_oak_pressure_plate" => Self::DarkOakPressurePlate,
      "redstone_ore" => Self::RedstoneOre,
      "redstone_torch" => Self::RedstoneTorch,
      "stone_button" => Self::StoneButton,
      "snow" => Self::Snow,
      "ice" => Self::Ice,
      "snow_block" => Self::SnowBlock,
      "cactus" => Self::Cactus,
      "clay" => Self::Clay,
      "jukebox" => Self::Jukebox,
      "oak_fence" => Self::OakFence,
      "spruce_fence" => Self::SpruceFence,
      "birch_fence" => Self::BirchFence,
      "jungle_fence" => Self::JungleFence,
      "acacia_fence" => Self::AcaciaFence,
      "dark_oak_fence" => Self::DarkOakFence,
      "pumpkin" => Self::Pumpkin,
      "carved_pumpkin" => Self::CarvedPumpkin,
      "netherrack" => Self::Netherrack,
      "soul_sand" => Self::SoulSand,
      "glowstone" => Self::Glowstone,
      "jack_o_lantern" => Self::JackOLantern,
      "oak_trapdoor" => Self::OakTrapdoor,
      "spruce_trapdoor" => Self::SpruceTrapdoor,
      "birch_trapdoor" => Self::BirchTrapdoor,
      "jungle_trapdoor" => Self::JungleTrapdoor,
      "acacia_trapdoor" => Self::AcaciaTrapdoor,
      "dark_oak_trapdoor" => Self::DarkOakTrapdoor,
      "infested_stone" => Self::InfestedStone,
      "infested_cobblestone" => Self::InfestedCobblestone,
      "infested_stone_bricks" => Self::InfestedStoneBricks,
      "infested_mossy_stone_bricks" => Self::InfestedMossyStoneBricks,
      "infested_cracked_stone_bricks" => Self::InfestedCrackedStoneBricks,
      "infested_chiseled_stone_bricks" => Self::InfestedChiseledStoneBricks,
      "stone_bricks" => Self::StoneBricks,
      "mossy_stone_bricks" => Self::MossyStoneBricks,
      "cracked_stone_bricks" => Self::CrackedStoneBricks,
      "chiseled_stone_bricks" => Self::ChiseledStoneBricks,
      "brown_mushroom_block" => Self::BrownMushroomBlock,
      "red_mushroom_block" => Self::RedMushroomBlock,
      "mushroom_stem" => Self::MushroomStem,
      "iron_bars" => Self::IronBars,
      "glass_pane" => Self::GlassPane,
      "melon" => Self::Melon,
      "vine" => Self::Vine,
      "oak_fence_gate" => Self::OakFenceGate,
      "spruce_fence_gate" => Self::SpruceFenceGate,
      "birch_fence_gate" => Self::BirchFenceGate,
      "jungle_fence_gate" => Self::JungleFenceGate,
      "acacia_fence_gate" => Self::AcaciaFenceGate,
      "dark_oak_fence_gate" => Self::DarkOakFenceGate,
      "brick_stairs" => Self::BrickStairs,
      "stone_brick_stairs" => Self::StoneBrickStairs,
      "mycelium" => Self::Mycelium,
      "lily_pad" => Self::LilyPad,
      "nether_bricks" => Self::NetherBricks,
      "nether_brick_fence" => Self::NetherBrickFence,
      "nether_brick_stairs" => Self::NetherBrickStairs,
      "enchanting_table" => Self::EnchantingTable,
      "end_portal_frame" => Self::EndPortalFrame,
      "end_stone" => Self::EndStone,
      "end_stone_bricks" => Self::EndStoneBricks,
      "dragon_egg" => Self::DragonEgg,
      "redstone_lamp" => Self::RedstoneLamp,
      "sandstone_stairs" => Self::SandstoneStairs,
      "emerald_ore" => Self::EmeraldOre,
      "ender_chest" => Self::EnderChest,
      "tripwire_hook" => Self::TripwireHook,
      "emerald_block" => Self::EmeraldBlock,
      "spruce_stairs" => Self::SpruceStairs,
      "birch_stairs" => Self::BirchStairs,
      "jungle_stairs" => Self::JungleStairs,
      "command_block" => Self::CommandBlock,
      "beacon" => Self::Beacon,
      "cobblestone_wall" => Self::CobblestoneWall,
      "mossy_cobblestone_wall" => Self::MossyCobblestoneWall,
      "brick_wall" => Self::BrickWall,
      "prismarine_wall" => Self::PrismarineWall,
      "red_sandstone_wall" => Self::RedSandstoneWall,
      "mossy_stone_brick_wall" => Self::MossyStoneBrickWall,
      "granite_wall" => Self::GraniteWall,
      "stone_brick_wall" => Self::StoneBrickWall,
      "nether_brick_wall" => Self::NetherBrickWall,
      "andesite_wall" => Self::AndesiteWall,
      "red_nether_brick_wall" => Self::RedNetherBrickWall,
      "sandstone_wall" => Self::SandstoneWall,
      "end_stone_brick_wall" => Self::EndStoneBrickWall,
      "diorite_wall" => Self::DioriteWall,
      "oak_button" => Self::OakButton,
      "spruce_button" => Self::SpruceButton,
      "birch_button" => Self::BirchButton,
      "jungle_button" => Self::JungleButton,
      "acacia_button" => Self::AcaciaButton,
      "dark_oak_button" => Self::DarkOakButton,
      "anvil" => Self::Anvil,
      "chipped_anvil" => Self::ChippedAnvil,
      "damaged_anvil" => Self::DamagedAnvil,
      "trapped_chest" => Self::TrappedChest,
      "light_weighted_pressure_plate" => Self::LightWeightedPressurePlate,
      "heavy_weighted_pressure_plate" => Self::HeavyWeightedPressurePlate,
      "daylight_detector" => Self::DaylightDetector,
      "redstone_block" => Self::RedstoneBlock,
      "nether_quartz_ore" => Self::NetherQuartzOre,
      "hopper" => Self::Hopper,
      "chiseled_quartz_block" => Self::ChiseledQuartzBlock,
      "quartz_block" => Self::QuartzBlock,
      "quartz_pillar" => Self::QuartzPillar,
      "quartz_stairs" => Self::QuartzStairs,
      "activator_rail" => Self::ActivatorRail,
      "dropper" => Self::Dropper,
      "white_terracotta" => Self::WhiteTerracotta,
      "orange_terracotta" => Self::OrangeTerracotta,
      "magenta_terracotta" => Self::MagentaTerracotta,
      "light_blue_terracotta" => Self::LightBlueTerracotta,
      "yellow_terracotta" => Self::YellowTerracotta,
      "lime_terracotta" => Self::LimeTerracotta,
      "pink_terracotta" => Self::PinkTerracotta,
      "gray_terracotta" => Self::GrayTerracotta,
      "light_gray_terracotta" => Self::LightGrayTerracotta,
      "cyan_terracotta" => Self::CyanTerracotta,
      "purple_terracotta" => Self::PurpleTerracotta,
      "blue_terracotta" => Self::BlueTerracotta,
      "brown_terracotta" => Self::BrownTerracotta,
      "green_terracotta" => Self::GreenTerracotta,
      "red_terracotta" => Self::RedTerracotta,
      "black_terracotta" => Self::BlackTerracotta,
      "barrier" => Self::Barrier,
      "iron_trapdoor" => Self::IronTrapdoor,
      "hay_block" => Self::HayBlock,
      "white_carpet" => Self::WhiteCarpet,
      "orange_carpet" => Self::OrangeCarpet,
      "magenta_carpet" => Self::MagentaCarpet,
      "light_blue_carpet" => Self::LightBlueCarpet,
      "yellow_carpet" => Self::YellowCarpet,
      "lime_carpet" => Self::LimeCarpet,
      "pink_carpet" => Self::PinkCarpet,
      "gray_carpet" => Self::GrayCarpet,
      "light_gray_carpet" => Self::LightGrayCarpet,
      "cyan_carpet" => Self::CyanCarpet,
      "purple_carpet" => Self::PurpleCarpet,
      "blue_carpet" => Self::BlueCarpet,
      "brown_carpet" => Self::BrownCarpet,
      "green_carpet" => Self::GreenCarpet,
      "red_carpet" => Self::RedCarpet,
      "black_carpet" => Self::BlackCarpet,
      "terracotta" => Self::Terracotta,
      "coal_block" => Self::CoalBlock,
      "packed_ice" => Self::PackedIce,
      "acacia_stairs" => Self::AcaciaStairs,
      "dark_oak_stairs" => Self::DarkOakStairs,
      "slime_block" => Self::SlimeBlock,
      "grass_path" => Self::GrassPath,
      "sunflower" => Self::Sunflower,
      "lilac" => Self::Lilac,
      "rose_bush" => Self::RoseBush,
      "peony" => Self::Peony,
      "tall_grass" => Self::TallGrass,
      "large_fern" => Self::LargeFern,
      "white_stained_glass" => Self::WhiteStainedGlass,
      "orange_stained_glass" => Self::OrangeStainedGlass,
      "magenta_stained_glass" => Self::MagentaStainedGlass,
      "light_blue_stained_glass" => Self::LightBlueStainedGlass,
      "yellow_stained_glass" => Self::YellowStainedGlass,
      "lime_stained_glass" => Self::LimeStainedGlass,
      "pink_stained_glass" => Self::PinkStainedGlass,
      "gray_stained_glass" => Self::GrayStainedGlass,
      "light_gray_stained_glass" => Self::LightGrayStainedGlass,
      "cyan_stained_glass" => Self::CyanStainedGlass,
      "purple_stained_glass" => Self::PurpleStainedGlass,
      "blue_stained_glass" => Self::BlueStainedGlass,
      "brown_stained_glass" => Self::BrownStainedGlass,
      "green_stained_glass" => Self::GreenStainedGlass,
      "red_stained_glass" => Self::RedStainedGlass,
      "black_stained_glass" => Self::BlackStainedGlass,
      "white_stained_glass_pane" => Self::WhiteStainedGlassPane,
      "orange_stained_glass_pane" => Self::OrangeStainedGlassPane,
      "magenta_stained_glass_pane" => Self::MagentaStainedGlassPane,
      "light_blue_stained_glass_pane" => Self::LightBlueStainedGlassPane,
      "yellow_stained_glass_pane" => Self::YellowStainedGlassPane,
      "lime_stained_glass_pane" => Self::LimeStainedGlassPane,
      "pink_stained_glass_pane" => Self::PinkStainedGlassPane,
      "gray_stained_glass_pane" => Self::GrayStainedGlassPane,
      "light_gray_stained_glass_pane" => Self::LightGrayStainedGlassPane,
      "cyan_stained_glass_pane" => Self::CyanStainedGlassPane,
      "purple_stained_glass_pane" => Self::PurpleStainedGlassPane,
      "blue_stained_glass_pane" => Self::BlueStainedGlassPane,
      "brown_stained_glass_pane" => Self::BrownStainedGlassPane,
      "green_stained_glass_pane" => Self::GreenStainedGlassPane,
      "red_stained_glass_pane" => Self::RedStainedGlassPane,
      "black_stained_glass_pane" => Self::BlackStainedGlassPane,
      "prismarine" => Self::Prismarine,
      "prismarine_bricks" => Self::PrismarineBricks,
      "dark_prismarine" => Self::DarkPrismarine,
      "prismarine_stairs" => Self::PrismarineStairs,
      "prismarine_brick_stairs" => Self::PrismarineBrickStairs,
      "dark_prismarine_stairs" => Self::DarkPrismarineStairs,
      "sea_lantern" => Self::SeaLantern,
      "red_sandstone" => Self::RedSandstone,
      "chiseled_red_sandstone" => Self::ChiseledRedSandstone,
      "cut_red_sandstone" => Self::CutRedSandstone,
      "red_sandstone_stairs" => Self::RedSandstoneStairs,
      "repeating_command_block" => Self::RepeatingCommandBlock,
      "chain_command_block" => Self::ChainCommandBlock,
      "magma_block" => Self::MagmaBlock,
      "nether_wart_block" => Self::NetherWartBlock,
      "red_nether_bricks" => Self::RedNetherBricks,
      "bone_block" => Self::BoneBlock,
      "structure_void" => Self::StructureVoid,
      "observer" => Self::Observer,
      "shulker_box" => Self::ShulkerBox,
      "white_shulker_box" => Self::WhiteShulkerBox,
      "orange_shulker_box" => Self::OrangeShulkerBox,
      "magenta_shulker_box" => Self::MagentaShulkerBox,
      "light_blue_shulker_box" => Self::LightBlueShulkerBox,
      "yellow_shulker_box" => Self::YellowShulkerBox,
      "lime_shulker_box" => Self::LimeShulkerBox,
      "pink_shulker_box" => Self::PinkShulkerBox,
      "gray_shulker_box" => Self::GrayShulkerBox,
      "light_gray_shulker_box" => Self::LightGrayShulkerBox,
      "cyan_shulker_box" => Self::CyanShulkerBox,
      "purple_shulker_box" => Self::PurpleShulkerBox,
      "blue_shulker_box" => Self::BlueShulkerBox,
      "brown_shulker_box" => Self::BrownShulkerBox,
      "green_shulker_box" => Self::GreenShulkerBox,
      "red_shulker_box" => Self::RedShulkerBox,
      "black_shulker_box" => Self::BlackShulkerBox,
      "white_glazed_terracotta" => Self::WhiteGlazedTerracotta,
      "orange_glazed_terracotta" => Self::OrangeGlazedTerracotta,
      "magenta_glazed_terracotta" => Self::MagentaGlazedTerracotta,
      "light_blue_glazed_terracotta" => Self::LightBlueGlazedTerracotta,
      "yellow_glazed_terracotta" => Self::YellowGlazedTerracotta,
      "lime_glazed_terracotta" => Self::LimeGlazedTerracotta,
      "pink_glazed_terracotta" => Self::PinkGlazedTerracotta,
      "gray_glazed_terracotta" => Self::GrayGlazedTerracotta,
      "light_gray_glazed_terracotta" => Self::LightGrayGlazedTerracotta,
      "cyan_glazed_terracotta" => Self::CyanGlazedTerracotta,
      "purple_glazed_terracotta" => Self::PurpleGlazedTerracotta,
      "blue_glazed_terracotta" => Self::BlueGlazedTerracotta,
      "brown_glazed_terracotta" => Self::BrownGlazedTerracotta,
      "green_glazed_terracotta" => Self::GreenGlazedTerracotta,
      "red_glazed_terracotta" => Self::RedGlazedTerracotta,
      "black_glazed_terracotta" => Self::BlackGlazedTerracotta,
      "white_concrete" => Self::WhiteConcrete,
      "orange_concrete" => Self::OrangeConcrete,
      "magenta_concrete" => Self::MagentaConcrete,
      "light_blue_concrete" => Self::LightBlueConcrete,
      "yellow_concrete" => Self::YellowConcrete,
      "lime_concrete" => Self::LimeConcrete,
      "pink_concrete" => Self::PinkConcrete,
      "gray_concrete" => Self::GrayConcrete,
      "light_gray_concrete" => Self::LightGrayConcrete,
      "cyan_concrete" => Self::CyanConcrete,
      "purple_concrete" => Self::PurpleConcrete,
      "blue_concrete" => Self::BlueConcrete,
      "brown_concrete" => Self::BrownConcrete,
      "green_concrete" => Self::GreenConcrete,
      "red_concrete" => Self::RedConcrete,
      "black_concrete" => Self::BlackConcrete,
      "white_concrete_powder" => Self::WhiteConcretePowder,
      "orange_concrete_powder" => Self::OrangeConcretePowder,
      "magenta_concrete_powder" => Self::MagentaConcretePowder,
      "light_blue_concrete_powder" => Self::LightBlueConcretePowder,
      "yellow_concrete_powder" => Self::YellowConcretePowder,
      "lime_concrete_powder" => Self::LimeConcretePowder,
      "pink_concrete_powder" => Self::PinkConcretePowder,
      "gray_concrete_powder" => Self::GrayConcretePowder,
      "light_gray_concrete_powder" => Self::LightGrayConcretePowder,
      "cyan_concrete_powder" => Self::CyanConcretePowder,
      "purple_concrete_powder" => Self::PurpleConcretePowder,
      "blue_concrete_powder" => Self::BlueConcretePowder,
      "brown_concrete_powder" => Self::BrownConcretePowder,
      "green_concrete_powder" => Self::GreenConcretePowder,
      "red_concrete_powder" => Self::RedConcretePowder,
      "black_concrete_powder" => Self::BlackConcretePowder,
      "turtle_egg" => Self::TurtleEgg,
      "dead_tube_coral_block" => Self::DeadTubeCoralBlock,
      "dead_brain_coral_block" => Self::DeadBrainCoralBlock,
      "dead_bubble_coral_block" => Self::DeadBubbleCoralBlock,
      "dead_fire_coral_block" => Self::DeadFireCoralBlock,
      "dead_horn_coral_block" => Self::DeadHornCoralBlock,
      "tube_coral_block" => Self::TubeCoralBlock,
      "brain_coral_block" => Self::BrainCoralBlock,
      "bubble_coral_block" => Self::BubbleCoralBlock,
      "fire_coral_block" => Self::FireCoralBlock,
      "horn_coral_block" => Self::HornCoralBlock,
      "tube_coral" => Self::TubeCoral,
      "brain_coral" => Self::BrainCoral,
      "bubble_coral" => Self::BubbleCoral,
      "fire_coral" => Self::FireCoral,
      "horn_coral" => Self::HornCoral,
      "dead_brain_coral" => Self::DeadBrainCoral,
      "dead_bubble_coral" => Self::DeadBubbleCoral,
      "dead_fire_coral" => Self::DeadFireCoral,
      "dead_horn_coral" => Self::DeadHornCoral,
      "dead_tube_coral" => Self::DeadTubeCoral,
      "tube_coral_fan" => Self::TubeCoralFan,
      "brain_coral_fan" => Self::BrainCoralFan,
      "bubble_coral_fan" => Self::BubbleCoralFan,
      "fire_coral_fan" => Self::FireCoralFan,
      "horn_coral_fan" => Self::HornCoralFan,
      "dead_tube_coral_fan" => Self::DeadTubeCoralFan,
      "dead_brain_coral_fan" => Self::DeadBrainCoralFan,
      "dead_bubble_coral_fan" => Self::DeadBubbleCoralFan,
      "dead_fire_coral_fan" => Self::DeadFireCoralFan,
      "dead_horn_coral_fan" => Self::DeadHornCoralFan,
      "blue_ice" => Self::BlueIce,
      "conduit" => Self::Conduit,
      "polished_granite_stairs" => Self::PolishedGraniteStairs,
      "smooth_red_sandstone_stairs" => Self::SmoothRedSandstoneStairs,
      "mossy_stone_brick_stairs" => Self::MossyStoneBrickStairs,
      "polished_diorite_stairs" => Self::PolishedDioriteStairs,
      "mossy_cobblestone_stairs" => Self::MossyCobblestoneStairs,
      "end_stone_brick_stairs" => Self::EndStoneBrickStairs,
      "stone_stairs" => Self::StoneStairs,
      "smooth_sandstone_stairs" => Self::SmoothSandstoneStairs,
      "smooth_quartz_stairs" => Self::SmoothQuartzStairs,
      "granite_stairs" => Self::GraniteStairs,
      "andesite_stairs" => Self::AndesiteStairs,
      "red_nether_brick_stairs" => Self::RedNetherBrickStairs,
      "polished_andesite_stairs" => Self::PolishedAndesiteStairs,
      "diorite_stairs" => Self::DioriteStairs,
      "polished_granite_slab" => Self::PolishedGraniteSlab,
      "smooth_red_sandstone_slab" => Self::SmoothRedSandstoneSlab,
      "mossy_stone_brick_slab" => Self::MossyStoneBrickSlab,
      "polished_diorite_slab" => Self::PolishedDioriteSlab,
      "mossy_cobblestone_slab" => Self::MossyCobblestoneSlab,
      "end_stone_brick_slab" => Self::EndStoneBrickSlab,
      "smooth_sandstone_slab" => Self::SmoothSandstoneSlab,
      "smooth_quartz_slab" => Self::SmoothQuartzSlab,
      "granite_slab" => Self::GraniteSlab,
      "andesite_slab" => Self::AndesiteSlab,
      "red_nether_brick_slab" => Self::RedNetherBrickSlab,
      "polished_andesite_slab" => Self::PolishedAndesiteSlab,
      "diorite_slab" => Self::DioriteSlab,
      "scaffolding" => Self::Scaffolding,
      "iron_door" => Self::IronDoor,
      "oak_door" => Self::OakDoor,
      "spruce_door" => Self::SpruceDoor,
      "birch_door" => Self::BirchDoor,
      "jungle_door" => Self::JungleDoor,
      "acacia_door" => Self::AcaciaDoor,
      "dark_oak_door" => Self::DarkOakDoor,
      "repeater" => Self::Repeater,
      "comparator" => Self::Comparator,
      "structure_block" => Self::StructureBlock,
      "jigsaw" => Self::Jigsaw,
      "composter" => Self::Composter,
      "turtle_helmet" => Self::TurtleHelmet,
      "scute" => Self::Scute,
      "iron_shovel" => Self::IronShovel,
      "iron_pickaxe" => Self::IronPickaxe,
      "iron_axe" => Self::IronAxe,
      "flint_and_steel" => Self::FlintAndSteel,
      "apple" => Self::Apple,
      "bow" => Self::Bow,
      "arrow" => Self::Arrow,
      "coal" => Self::Coal,
      "charcoal" => Self::Charcoal,
      "diamond" => Self::Diamond,
      "iron_ingot" => Self::IronIngot,
      "gold_ingot" => Self::GoldIngot,
      "iron_sword" => Self::IronSword,
      "wooden_sword" => Self::WoodenSword,
      "wooden_shovel" => Self::WoodenShovel,
      "wooden_pickaxe" => Self::WoodenPickaxe,
      "wooden_axe" => Self::WoodenAxe,
      "stone_sword" => Self::StoneSword,
      "stone_shovel" => Self::StoneShovel,
      "stone_pickaxe" => Self::StonePickaxe,
      "stone_axe" => Self::StoneAxe,
      "diamond_sword" => Self::DiamondSword,
      "diamond_shovel" => Self::DiamondShovel,
      "diamond_pickaxe" => Self::DiamondPickaxe,
      "diamond_axe" => Self::DiamondAxe,
      "stick" => Self::Stick,
      "bowl" => Self::Bowl,
      "mushroom_stew" => Self::MushroomStew,
      "golden_sword" => Self::GoldenSword,
      "golden_shovel" => Self::GoldenShovel,
      "golden_pickaxe" => Self::GoldenPickaxe,
      "golden_axe" => Self::GoldenAxe,
      "string" => Self::String,
      "feather" => Self::Feather,
      "gunpowder" => Self::Gunpowder,
      "wooden_hoe" => Self::WoodenHoe,
      "stone_hoe" => Self::StoneHoe,
      "iron_hoe" => Self::IronHoe,
      "diamond_hoe" => Self::DiamondHoe,
      "golden_hoe" => Self::GoldenHoe,
      "wheat_seeds" => Self::WheatSeeds,
      "wheat" => Self::Wheat,
      "bread" => Self::Bread,
      "leather_helmet" => Self::LeatherHelmet,
      "leather_chestplate" => Self::LeatherChestplate,
      "leather_leggings" => Self::LeatherLeggings,
      "leather_boots" => Self::LeatherBoots,
      "chainmail_helmet" => Self::ChainmailHelmet,
      "chainmail_chestplate" => Self::ChainmailChestplate,
      "chainmail_leggings" => Self::ChainmailLeggings,
      "chainmail_boots" => Self::ChainmailBoots,
      "iron_helmet" => Self::IronHelmet,
      "iron_chestplate" => Self::IronChestplate,
      "iron_leggings" => Self::IronLeggings,
      "iron_boots" => Self::IronBoots,
      "diamond_helmet" => Self::DiamondHelmet,
      "diamond_chestplate" => Self::DiamondChestplate,
      "diamond_leggings" => Self::DiamondLeggings,
      "diamond_boots" => Self::DiamondBoots,
      "golden_helmet" => Self::GoldenHelmet,
      "golden_chestplate" => Self::GoldenChestplate,
      "golden_leggings" => Self::GoldenLeggings,
      "golden_boots" => Self::GoldenBoots,
      "flint" => Self::Flint,
      "porkchop" => Self::Porkchop,
      "cooked_porkchop" => Self::CookedPorkchop,
      "painting" => Self::Painting,
      "golden_apple" => Self::GoldenApple,
      "enchanted_golden_apple" => Self::EnchantedGoldenApple,
      "oak_sign" => Self::OakSign,
      "spruce_sign" => Self::SpruceSign,
      "birch_sign" => Self::BirchSign,
      "jungle_sign" => Self::JungleSign,
      "acacia_sign" => Self::AcaciaSign,
      "dark_oak_sign" => Self::DarkOakSign,
      "bucket" => Self::Bucket,
      "water_bucket" => Self::WaterBucket,
      "lava_bucket" => Self::LavaBucket,
      "minecart" => Self::Minecart,
      "saddle" => Self::Saddle,
      "redstone" => Self::Redstone,
      "snowball" => Self::Snowball,
      "oak_boat" => Self::OakBoat,
      "leather" => Self::Leather,
      "milk_bucket" => Self::MilkBucket,
      "pufferfish_bucket" => Self::PufferfishBucket,
      "salmon_bucket" => Self::SalmonBucket,
      "cod_bucket" => Self::CodBucket,
      "tropical_fish_bucket" => Self::TropicalFishBucket,
      "brick" => Self::Brick,
      "clay_ball" => Self::ClayBall,
      "sugar_cane" => Self::SugarCane,
      "kelp" => Self::Kelp,
      "dried_kelp_block" => Self::DriedKelpBlock,
      "bamboo" => Self::Bamboo,
      "paper" => Self::Paper,
      "book" => Self::Book,
      "slime_ball" => Self::SlimeBall,
      "chest_minecart" => Self::ChestMinecart,
      "furnace_minecart" => Self::FurnaceMinecart,
      "egg" => Self::Egg,
      "compass" => Self::Compass,
      "fishing_rod" => Self::FishingRod,
      "clock" => Self::Clock,
      "glowstone_dust" => Self::GlowstoneDust,
      "cod" => Self::Cod,
      "salmon" => Self::Salmon,
      "tropical_fish" => Self::TropicalFish,
      "pufferfish" => Self::Pufferfish,
      "cooked_cod" => Self::CookedCod,
      "cooked_salmon" => Self::CookedSalmon,
      "ink_sac" => Self::InkSac,
      "red_dye" => Self::RedDye,
      "green_dye" => Self::GreenDye,
      "cocoa_beans" => Self::CocoaBeans,
      "lapis_lazuli" => Self::LapisLazuli,
      "purple_dye" => Self::PurpleDye,
      "cyan_dye" => Self::CyanDye,
      "light_gray_dye" => Self::LightGrayDye,
      "gray_dye" => Self::GrayDye,
      "pink_dye" => Self::PinkDye,
      "lime_dye" => Self::LimeDye,
      "yellow_dye" => Self::YellowDye,
      "light_blue_dye" => Self::LightBlueDye,
      "magenta_dye" => Self::MagentaDye,
      "orange_dye" => Self::OrangeDye,
      "bone_meal" => Self::BoneMeal,
      "blue_dye" => Self::BlueDye,
      "brown_dye" => Self::BrownDye,
      "black_dye" => Self::BlackDye,
      "white_dye" => Self::WhiteDye,
      "bone" => Self::Bone,
      "sugar" => Self::Sugar,
      "cake" => Self::Cake,
      "white_bed" => Self::WhiteBed,
      "orange_bed" => Self::OrangeBed,
      "magenta_bed" => Self::MagentaBed,
      "light_blue_bed" => Self::LightBlueBed,
      "yellow_bed" => Self::YellowBed,
      "lime_bed" => Self::LimeBed,
      "pink_bed" => Self::PinkBed,
      "gray_bed" => Self::GrayBed,
      "light_gray_bed" => Self::LightGrayBed,
      "cyan_bed" => Self::CyanBed,
      "purple_bed" => Self::PurpleBed,
      "blue_bed" => Self::BlueBed,
      "brown_bed" => Self::BrownBed,
      "green_bed" => Self::GreenBed,
      "red_bed" => Self::RedBed,
      "black_bed" => Self::BlackBed,
      "cookie" => Self::Cookie,
      "filled_map" => Self::FilledMap,
      "shears" => Self::Shears,
      "melon_slice" => Self::MelonSlice,
      "dried_kelp" => Self::DriedKelp,
      "pumpkin_seeds" => Self::PumpkinSeeds,
      "melon_seeds" => Self::MelonSeeds,
      "beef" => Self::Beef,
      "cooked_beef" => Self::CookedBeef,
      "chicken" => Self::Chicken,
      "cooked_chicken" => Self::CookedChicken,
      "rotten_flesh" => Self::RottenFlesh,
      "ender_pearl" => Self::EnderPearl,
      "blaze_rod" => Self::BlazeRod,
      "ghast_tear" => Self::GhastTear,
      "gold_nugget" => Self::GoldNugget,
      "nether_wart" => Self::NetherWart,
      "potion" => Self::Potion,
      "glass_bottle" => Self::GlassBottle,
      "spider_eye" => Self::SpiderEye,
      "fermented_spider_eye" => Self::FermentedSpiderEye,
      "blaze_powder" => Self::BlazePowder,
      "magma_cream" => Self::MagmaCream,
      "brewing_stand" => Self::BrewingStand,
      "cauldron" => Self::Cauldron,
      "ender_eye" => Self::EnderEye,
      "glistering_melon_slice" => Self::GlisteringMelonSlice,
      "bat_spawn_egg" => Self::BatSpawnEgg,
      "bee_spawn_egg" => Self::BeeSpawnEgg,
      "blaze_spawn_egg" => Self::BlazeSpawnEgg,
      "cat_spawn_egg" => Self::CatSpawnEgg,
      "cave_spider_spawn_egg" => Self::CaveSpiderSpawnEgg,
      "chicken_spawn_egg" => Self::ChickenSpawnEgg,
      "cod_spawn_egg" => Self::CodSpawnEgg,
      "cow_spawn_egg" => Self::CowSpawnEgg,
      "creeper_spawn_egg" => Self::CreeperSpawnEgg,
      "dolphin_spawn_egg" => Self::DolphinSpawnEgg,
      "donkey_spawn_egg" => Self::DonkeySpawnEgg,
      "drowned_spawn_egg" => Self::DrownedSpawnEgg,
      "elder_guardian_spawn_egg" => Self::ElderGuardianSpawnEgg,
      "enderman_spawn_egg" => Self::EndermanSpawnEgg,
      "endermite_spawn_egg" => Self::EndermiteSpawnEgg,
      "evoker_spawn_egg" => Self::EvokerSpawnEgg,
      "fox_spawn_egg" => Self::FoxSpawnEgg,
      "ghast_spawn_egg" => Self::GhastSpawnEgg,
      "guardian_spawn_egg" => Self::GuardianSpawnEgg,
      "horse_spawn_egg" => Self::HorseSpawnEgg,
      "husk_spawn_egg" => Self::HuskSpawnEgg,
      "llama_spawn_egg" => Self::LlamaSpawnEgg,
      "magma_cube_spawn_egg" => Self::MagmaCubeSpawnEgg,
      "mooshroom_spawn_egg" => Self::MooshroomSpawnEgg,
      "mule_spawn_egg" => Self::MuleSpawnEgg,
      "ocelot_spawn_egg" => Self::OcelotSpawnEgg,
      "panda_spawn_egg" => Self::PandaSpawnEgg,
      "parrot_spawn_egg" => Self::ParrotSpawnEgg,
      "phantom_spawn_egg" => Self::PhantomSpawnEgg,
      "pig_spawn_egg" => Self::PigSpawnEgg,
      "pillager_spawn_egg" => Self::PillagerSpawnEgg,
      "polar_bear_spawn_egg" => Self::PolarBearSpawnEgg,
      "pufferfish_spawn_egg" => Self::PufferfishSpawnEgg,
      "rabbit_spawn_egg" => Self::RabbitSpawnEgg,
      "ravager_spawn_egg" => Self::RavagerSpawnEgg,
      "salmon_spawn_egg" => Self::SalmonSpawnEgg,
      "sheep_spawn_egg" => Self::SheepSpawnEgg,
      "shulker_spawn_egg" => Self::ShulkerSpawnEgg,
      "silverfish_spawn_egg" => Self::SilverfishSpawnEgg,
      "skeleton_spawn_egg" => Self::SkeletonSpawnEgg,
      "skeleton_horse_spawn_egg" => Self::SkeletonHorseSpawnEgg,
      "slime_spawn_egg" => Self::SlimeSpawnEgg,
      "spider_spawn_egg" => Self::SpiderSpawnEgg,
      "squid_spawn_egg" => Self::SquidSpawnEgg,
      "stray_spawn_egg" => Self::StraySpawnEgg,
      "trader_llama_spawn_egg" => Self::TraderLlamaSpawnEgg,
      "tropical_fish_spawn_egg" => Self::TropicalFishSpawnEgg,
      "turtle_spawn_egg" => Self::TurtleSpawnEgg,
      "vex_spawn_egg" => Self::VexSpawnEgg,
      "villager_spawn_egg" => Self::VillagerSpawnEgg,
      "vindicator_spawn_egg" => Self::VindicatorSpawnEgg,
      "wandering_trader_spawn_egg" => Self::WanderingTraderSpawnEgg,
      "witch_spawn_egg" => Self::WitchSpawnEgg,
      "wither_skeleton_spawn_egg" => Self::WitherSkeletonSpawnEgg,
      "wolf_spawn_egg" => Self::WolfSpawnEgg,
      "zombie_spawn_egg" => Self::ZombieSpawnEgg,
      "zombie_horse_spawn_egg" => Self::ZombieHorseSpawnEgg,
      "zombie_pigman_spawn_egg" => Self::ZombiePigmanSpawnEgg,
      "zombie_villager_spawn_egg" => Self::ZombieVillagerSpawnEgg,
      "experience_bottle" => Self::ExperienceBottle,
      "fire_charge" => Self::FireCharge,
      "writable_book" => Self::WritableBook,
      "written_book" => Self::WrittenBook,
      "emerald" => Self::Emerald,
      "item_frame" => Self::ItemFrame,
      "flower_pot" => Self::FlowerPot,
      "carrot" => Self::Carrot,
      "potato" => Self::Potato,
      "baked_potato" => Self::BakedPotato,
      "poisonous_potato" => Self::PoisonousPotato,
      "map" => Self::Map,
      "golden_carrot" => Self::GoldenCarrot,
      "skeleton_skull" => Self::SkeletonSkull,
      "wither_skeleton_skull" => Self::WitherSkeletonSkull,
      "player_head" => Self::PlayerHead,
      "zombie_head" => Self::ZombieHead,
      "creeper_head" => Self::CreeperHead,
      "dragon_head" => Self::DragonHead,
      "carrot_on_a_stick" => Self::CarrotOnAStick,
      "nether_star" => Self::NetherStar,
      "pumpkin_pie" => Self::PumpkinPie,
      "firework_rocket" => Self::FireworkRocket,
      "firework_star" => Self::FireworkStar,
      "enchanted_book" => Self::EnchantedBook,
      "nether_brick" => Self::NetherBrick,
      "quartz" => Self::Quartz,
      "tnt_minecart" => Self::TntMinecart,
      "hopper_minecart" => Self::HopperMinecart,
      "prismarine_shard" => Self::PrismarineShard,
      "prismarine_crystals" => Self::PrismarineCrystals,
      "rabbit" => Self::Rabbit,
      "cooked_rabbit" => Self::CookedRabbit,
      "rabbit_stew" => Self::RabbitStew,
      "rabbit_foot" => Self::RabbitFoot,
      "rabbit_hide" => Self::RabbitHide,
      "armor_stand" => Self::ArmorStand,
      "iron_horse_armor" => Self::IronHorseArmor,
      "golden_horse_armor" => Self::GoldenHorseArmor,
      "diamond_horse_armor" => Self::DiamondHorseArmor,
      "leather_horse_armor" => Self::LeatherHorseArmor,
      "lead" => Self::Lead,
      "name_tag" => Self::NameTag,
      "command_block_minecart" => Self::CommandBlockMinecart,
      "mutton" => Self::Mutton,
      "cooked_mutton" => Self::CookedMutton,
      "white_banner" => Self::WhiteBanner,
      "orange_banner" => Self::OrangeBanner,
      "magenta_banner" => Self::MagentaBanner,
      "light_blue_banner" => Self::LightBlueBanner,
      "yellow_banner" => Self::YellowBanner,
      "lime_banner" => Self::LimeBanner,
      "pink_banner" => Self::PinkBanner,
      "gray_banner" => Self::GrayBanner,
      "light_gray_banner" => Self::LightGrayBanner,
      "cyan_banner" => Self::CyanBanner,
      "purple_banner" => Self::PurpleBanner,
      "blue_banner" => Self::BlueBanner,
      "brown_banner" => Self::BrownBanner,
      "green_banner" => Self::GreenBanner,
      "red_banner" => Self::RedBanner,
      "black_banner" => Self::BlackBanner,
      "end_crystal" => Self::EndCrystal,
      "chorus_fruit" => Self::ChorusFruit,
      "popped_chorus_fruit" => Self::PoppedChorusFruit,
      "beetroot" => Self::Beetroot,
      "beetroot_seeds" => Self::BeetrootSeeds,
      "beetroot_soup" => Self::BeetrootSoup,
      "dragon_breath" => Self::DragonBreath,
      "splash_potion" => Self::SplashPotion,
      "spectral_arrow" => Self::SpectralArrow,
      "tipped_arrow" => Self::TippedArrow,
      "lingering_potion" => Self::LingeringPotion,
      "shield" => Self::Shield,
      "elytra" => Self::Elytra,
      "spruce_boat" => Self::SpruceBoat,
      "birch_boat" => Self::BirchBoat,
      "jungle_boat" => Self::JungleBoat,
      "acacia_boat" => Self::AcaciaBoat,
      "dark_oak_boat" => Self::DarkOakBoat,
      "totem_of_undying" => Self::TotemOfUndying,
      "shulker_shell" => Self::ShulkerShell,
      "iron_nugget" => Self::IronNugget,
      "knowledge_book" => Self::KnowledgeBook,
      "debug_stick" => Self::DebugStick,
      "music_disc_13" => Self::MusicDisc13,
      "music_disc_cat" => Self::MusicDiscCat,
      "music_disc_blocks" => Self::MusicDiscBlocks,
      "music_disc_chirp" => Self::MusicDiscChirp,
      "music_disc_far" => Self::MusicDiscFar,
      "music_disc_mall" => Self::MusicDiscMall,
      "music_disc_mellohi" => Self::MusicDiscMellohi,
      "music_disc_stal" => Self::MusicDiscStal,
      "music_disc_strad" => Self::MusicDiscStrad,
      "music_disc_ward" => Self::MusicDiscWard,
      "music_disc_11" => Self::MusicDisc11,
      "music_disc_wait" => Self::MusicDiscWait,
      "trident" => Self::Trident,
      "phantom_membrane" => Self::PhantomMembrane,
      "nautilus_shell" => Self::NautilusShell,
      "heart_of_the_sea" => Self::HeartOfTheSea,
      "crossbow" => Self::Crossbow,
      "suspicious_stew" => Self::SuspiciousStew,
      "loom" => Self::Loom,
      "flower_banner_pattern" => Self::FlowerBannerPattern,
      "creeper_banner_pattern" => Self::CreeperBannerPattern,
      "skull_banner_pattern" => Self::SkullBannerPattern,
      "mojang_banner_pattern" => Self::MojangBannerPattern,
      "globe_banner_pattern" => Self::GlobeBannerPattern,
      "barrel" => Self::Barrel,
      "smoker" => Self::Smoker,
      "blast_furnace" => Self::BlastFurnace,
      "cartography_table" => Self::CartographyTable,
      "fletching_table" => Self::FletchingTable,
      "grindstone" => Self::Grindstone,
      "lectern" => Self::Lectern,
      "smithing_table" => Self::SmithingTable,
      "stonecutter" => Self::Stonecutter,
      "bell" => Self::Bell,
      "lantern" => Self::Lantern,
      "sweet_berries" => Self::SweetBerries,
      "campfire" => Self::Campfire,
      "honeycomb" => Self::Honeycomb,
      "bee_nest" => Self::BeeNest,
      "beehive" => Self::Beehive,
      "honey_bottle" => Self::HoneyBottle,
      "honey_block" => Self::HoneyBlock,
      "honeycomb_block" => Self::HoneycombBlock,
      _ => {return None;},
    })
  }
  fn get_id(&self) -> usize {
    *self as usize
  }
  fn from_id(id: usize) -> Option<Self> {
    FromPrimitive::from_usize(id)
  }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, FromPrimitive)]
#[allow(non_camel_case_types)]
/// Key: `minecraft:potion`
pub enum Potion {
  Empty = 0,
  Water = 1,
  Mundane = 2,
  Thick = 3,
  Awkward = 4,
  NightVision = 5,
  LongNightVision = 6,
  Invisibility = 7,
  LongInvisibility = 8,
  Leaping = 9,
  LongLeaping = 10,
  StrongLeaping = 11,
  FireResistance = 12,
  LongFireResistance = 13,
  Swiftness = 14,
  LongSwiftness = 15,
  StrongSwiftness = 16,
  Slowness = 17,
  LongSlowness = 18,
  StrongSlowness = 19,
  TurtleMaster = 20,
  LongTurtleMaster = 21,
  StrongTurtleMaster = 22,
  WaterBreathing = 23,
  LongWaterBreathing = 24,
  Healing = 25,
  StrongHealing = 26,
  Harming = 27,
  StrongHarming = 28,
  Poison = 29,
  LongPoison = 30,
  StrongPoison = 31,
  Regeneration = 32,
  LongRegeneration = 33,
  StrongRegeneration = 34,
  Strength = 35,
  LongStrength = 36,
  StrongStrength = 37,
  Weakness = 38,
  LongWeakness = 39,
  Luck = 40,
  SlowFalling = 41,
  LongSlowFalling = 42,
}
impl Potion {
  pub const ID: usize = 7;
}
impl Registry for Potion {
  fn get_registry_key(&self) -> NamespacedKey {
    NamespacedKey::new(crate::helpers::MINECRAFT_NAMESPACE, match self {
      Self::Empty => "empty",
      Self::Water => "water",
      Self::Mundane => "mundane",
      Self::Thick => "thick",
      Self::Awkward => "awkward",
      Self::NightVision => "night_vision",
      Self::LongNightVision => "long_night_vision",
      Self::Invisibility => "invisibility",
      Self::LongInvisibility => "long_invisibility",
      Self::Leaping => "leaping",
      Self::LongLeaping => "long_leaping",
      Self::StrongLeaping => "strong_leaping",
      Self::FireResistance => "fire_resistance",
      Self::LongFireResistance => "long_fire_resistance",
      Self::Swiftness => "swiftness",
      Self::LongSwiftness => "long_swiftness",
      Self::StrongSwiftness => "strong_swiftness",
      Self::Slowness => "slowness",
      Self::LongSlowness => "long_slowness",
      Self::StrongSlowness => "strong_slowness",
      Self::TurtleMaster => "turtle_master",
      Self::LongTurtleMaster => "long_turtle_master",
      Self::StrongTurtleMaster => "strong_turtle_master",
      Self::WaterBreathing => "water_breathing",
      Self::LongWaterBreathing => "long_water_breathing",
      Self::Healing => "healing",
      Self::StrongHealing => "strong_healing",
      Self::Harming => "harming",
      Self::StrongHarming => "strong_harming",
      Self::Poison => "poison",
      Self::LongPoison => "long_poison",
      Self::StrongPoison => "strong_poison",
      Self::Regeneration => "regeneration",
      Self::LongRegeneration => "long_regeneration",
      Self::StrongRegeneration => "strong_regeneration",
      Self::Strength => "strength",
      Self::LongStrength => "long_strength",
      Self::StrongStrength => "strong_strength",
      Self::Weakness => "weakness",
      Self::LongWeakness => "long_weakness",
      Self::Luck => "luck",
      Self::SlowFalling => "slow_falling",
      Self::LongSlowFalling => "long_slow_falling",
    })
  }
  fn from_registry_key(key: &NamespacedKey) -> Option<Self> {
    if *key.namespace() != crate::helpers::MINECRAFT_NAMESPACE {return None;}
    Some(match &**key.key() {
      "empty" => Self::Empty,
      "water" => Self::Water,
      "mundane" => Self::Mundane,
      "thick" => Self::Thick,
      "awkward" => Self::Awkward,
      "night_vision" => Self::NightVision,
      "long_night_vision" => Self::LongNightVision,
      "invisibility" => Self::Invisibility,
      "long_invisibility" => Self::LongInvisibility,
      "leaping" => Self::Leaping,
      "long_leaping" => Self::LongLeaping,
      "strong_leaping" => Self::StrongLeaping,
      "fire_resistance" => Self::FireResistance,
      "long_fire_resistance" => Self::LongFireResistance,
      "swiftness" => Self::Swiftness,
      "long_swiftness" => Self::LongSwiftness,
      "strong_swiftness" => Self::StrongSwiftness,
      "slowness" => Self::Slowness,
      "long_slowness" => Self::LongSlowness,
      "strong_slowness" => Self::StrongSlowness,
      "turtle_master" => Self::TurtleMaster,
      "long_turtle_master" => Self::LongTurtleMaster,
      "strong_turtle_master" => Self::StrongTurtleMaster,
      "water_breathing" => Self::WaterBreathing,
      "long_water_breathing" => Self::LongWaterBreathing,
      "healing" => Self::Healing,
      "strong_healing" => Self::StrongHealing,
      "harming" => Self::Harming,
      "strong_harming" => Self::StrongHarming,
      "poison" => Self::Poison,
      "long_poison" => Self::LongPoison,
      "strong_poison" => Self::StrongPoison,
      "regeneration" => Self::Regeneration,
      "long_regeneration" => Self::LongRegeneration,
      "strong_regeneration" => Self::StrongRegeneration,
      "strength" => Self::Strength,
      "long_strength" => Self::LongStrength,
      "strong_strength" => Self::StrongStrength,
      "weakness" => Self::Weakness,
      "long_weakness" => Self::LongWeakness,
      "luck" => Self::Luck,
      "slow_falling" => Self::SlowFalling,
      "long_slow_falling" => Self::LongSlowFalling,
      _ => {return None;},
    })
  }
  fn get_id(&self) -> usize {
    *self as usize
  }
  fn from_id(id: usize) -> Option<Self> {
    FromPrimitive::from_usize(id)
  }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, FromPrimitive)]
#[allow(non_camel_case_types)]
/// Key: `minecraft:carver`
pub enum Carver {
  Cave = 0,
  HellCave = 1,
  Canyon = 2,
  UnderwaterCanyon = 3,
  UnderwaterCave = 4,
}
impl Carver {
  pub const ID: usize = 8;
}
impl Registry for Carver {
  fn get_registry_key(&self) -> NamespacedKey {
    NamespacedKey::new(crate::helpers::MINECRAFT_NAMESPACE, match self {
      Self::Cave => "cave",
      Self::HellCave => "hell_cave",
      Self::Canyon => "canyon",
      Self::UnderwaterCanyon => "underwater_canyon",
      Self::UnderwaterCave => "underwater_cave",
    })
  }
  fn from_registry_key(key: &NamespacedKey) -> Option<Self> {
    if *key.namespace() != crate::helpers::MINECRAFT_NAMESPACE {return None;}
    Some(match &**key.key() {
      "cave" => Self::Cave,
      "hell_cave" => Self::HellCave,
      "canyon" => Self::Canyon,
      "underwater_canyon" => Self::UnderwaterCanyon,
      "underwater_cave" => Self::UnderwaterCave,
      _ => {return None;},
    })
  }
  fn get_id(&self) -> usize {
    *self as usize
  }
  fn from_id(id: usize) -> Option<Self> {
    FromPrimitive::from_usize(id)
  }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, FromPrimitive)]
#[allow(non_camel_case_types)]
/// Key: `minecraft:surface_builder`
pub enum SurfaceBuilder {
  Default = 0,
  Mountain = 1,
  ShatteredSavanna = 2,
  GravellyMountain = 3,
  GiantTreeTaiga = 4,
  Swamp = 5,
  Badlands = 6,
  WoodedBadlands = 7,
  ErodedBadlands = 8,
  FrozenOcean = 9,
  Nether = 10,
  Nope = 11,
}
impl SurfaceBuilder {
  pub const ID: usize = 9;
}
impl Registry for SurfaceBuilder {
  fn get_registry_key(&self) -> NamespacedKey {
    NamespacedKey::new(crate::helpers::MINECRAFT_NAMESPACE, match self {
      Self::Default => "default",
      Self::Mountain => "mountain",
      Self::ShatteredSavanna => "shattered_savanna",
      Self::GravellyMountain => "gravelly_mountain",
      Self::GiantTreeTaiga => "giant_tree_taiga",
      Self::Swamp => "swamp",
      Self::Badlands => "badlands",
      Self::WoodedBadlands => "wooded_badlands",
      Self::ErodedBadlands => "eroded_badlands",
      Self::FrozenOcean => "frozen_ocean",
      Self::Nether => "nether",
      Self::Nope => "nope",
    })
  }
  fn from_registry_key(key: &NamespacedKey) -> Option<Self> {
    if *key.namespace() != crate::helpers::MINECRAFT_NAMESPACE {return None;}
    Some(match &**key.key() {
      "default" => Self::Default,
      "mountain" => Self::Mountain,
      "shattered_savanna" => Self::ShatteredSavanna,
      "gravelly_mountain" => Self::GravellyMountain,
      "giant_tree_taiga" => Self::GiantTreeTaiga,
      "swamp" => Self::Swamp,
      "badlands" => Self::Badlands,
      "wooded_badlands" => Self::WoodedBadlands,
      "eroded_badlands" => Self::ErodedBadlands,
      "frozen_ocean" => Self::FrozenOcean,
      "nether" => Self::Nether,
      "nope" => Self::Nope,
      _ => {return None;},
    })
  }
  fn get_id(&self) -> usize {
    *self as usize
  }
  fn from_id(id: usize) -> Option<Self> {
    FromPrimitive::from_usize(id)
  }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, FromPrimitive)]
#[allow(non_camel_case_types)]
/// Key: `minecraft:feature`
pub enum Feature {
  PillagerOutpost = 0,
  Mineshaft = 1,
  WoodlandMansion = 2,
  JungleTemple = 3,
  DesertPyramid = 4,
  Igloo = 5,
  Shipwreck = 6,
  SwampHut = 7,
  Stronghold = 8,
  OceanMonument = 9,
  OceanRuin = 10,
  NetherBridge = 11,
  EndCity = 12,
  BuriedTreasure = 13,
  Village = 14,
  NoOp = 15,
  NormalTree = 16,
  AcaciaTree = 17,
  FancyTree = 18,
  JungleGroundBush = 19,
  DarkOakTree = 20,
  MegaJungleTree = 21,
  MegaSpruceTree = 22,
  Flower = 23,
  RandomPatch = 24,
  BlockPile = 25,
  SpringFeature = 26,
  ChorusPlant = 27,
  EmeraldOre = 28,
  VoidStartPlatform = 29,
  DesertWell = 30,
  Fossil = 31,
  HugeRedMushroom = 32,
  HugeBrownMushroom = 33,
  IceSpike = 34,
  GlowstoneBlob = 35,
  FreezeTopLayer = 36,
  Vines = 37,
  MonsterRoom = 38,
  BlueIce = 39,
  Iceberg = 40,
  ForestRock = 41,
  Disk = 42,
  IcePatch = 43,
  Lake = 44,
  Ore = 45,
  EndSpike = 46,
  EndIsland = 47,
  EndGateway = 48,
  Seagrass = 49,
  Kelp = 50,
  CoralTree = 51,
  CoralMushroom = 52,
  CoralClaw = 53,
  SeaPickle = 54,
  SimpleBlock = 55,
  Bamboo = 56,
  FillLayer = 57,
  BonusChest = 58,
  RandomRandomSelector = 59,
  RandomSelector = 60,
  SimpleRandomSelector = 61,
  RandomBooleanSelector = 62,
  Decorated = 63,
  DecoratedFlower = 64,
}
impl Feature {
  pub const ID: usize = 10;
}
impl Registry for Feature {
  fn get_registry_key(&self) -> NamespacedKey {
    NamespacedKey::new(crate::helpers::MINECRAFT_NAMESPACE, match self {
      Self::PillagerOutpost => "pillager_outpost",
      Self::Mineshaft => "mineshaft",
      Self::WoodlandMansion => "woodland_mansion",
      Self::JungleTemple => "jungle_temple",
      Self::DesertPyramid => "desert_pyramid",
      Self::Igloo => "igloo",
      Self::Shipwreck => "shipwreck",
      Self::SwampHut => "swamp_hut",
      Self::Stronghold => "stronghold",
      Self::OceanMonument => "ocean_monument",
      Self::OceanRuin => "ocean_ruin",
      Self::NetherBridge => "nether_bridge",
      Self::EndCity => "end_city",
      Self::BuriedTreasure => "buried_treasure",
      Self::Village => "village",
      Self::NoOp => "no_op",
      Self::NormalTree => "normal_tree",
      Self::AcaciaTree => "acacia_tree",
      Self::FancyTree => "fancy_tree",
      Self::JungleGroundBush => "jungle_ground_bush",
      Self::DarkOakTree => "dark_oak_tree",
      Self::MegaJungleTree => "mega_jungle_tree",
      Self::MegaSpruceTree => "mega_spruce_tree",
      Self::Flower => "flower",
      Self::RandomPatch => "random_patch",
      Self::BlockPile => "block_pile",
      Self::SpringFeature => "spring_feature",
      Self::ChorusPlant => "chorus_plant",
      Self::EmeraldOre => "emerald_ore",
      Self::VoidStartPlatform => "void_start_platform",
      Self::DesertWell => "desert_well",
      Self::Fossil => "fossil",
      Self::HugeRedMushroom => "huge_red_mushroom",
      Self::HugeBrownMushroom => "huge_brown_mushroom",
      Self::IceSpike => "ice_spike",
      Self::GlowstoneBlob => "glowstone_blob",
      Self::FreezeTopLayer => "freeze_top_layer",
      Self::Vines => "vines",
      Self::MonsterRoom => "monster_room",
      Self::BlueIce => "blue_ice",
      Self::Iceberg => "iceberg",
      Self::ForestRock => "forest_rock",
      Self::Disk => "disk",
      Self::IcePatch => "ice_patch",
      Self::Lake => "lake",
      Self::Ore => "ore",
      Self::EndSpike => "end_spike",
      Self::EndIsland => "end_island",
      Self::EndGateway => "end_gateway",
      Self::Seagrass => "seagrass",
      Self::Kelp => "kelp",
      Self::CoralTree => "coral_tree",
      Self::CoralMushroom => "coral_mushroom",
      Self::CoralClaw => "coral_claw",
      Self::SeaPickle => "sea_pickle",
      Self::SimpleBlock => "simple_block",
      Self::Bamboo => "bamboo",
      Self::FillLayer => "fill_layer",
      Self::BonusChest => "bonus_chest",
      Self::RandomRandomSelector => "random_random_selector",
      Self::RandomSelector => "random_selector",
      Self::SimpleRandomSelector => "simple_random_selector",
      Self::RandomBooleanSelector => "random_boolean_selector",
      Self::Decorated => "decorated",
      Self::DecoratedFlower => "decorated_flower",
    })
  }
  fn from_registry_key(key: &NamespacedKey) -> Option<Self> {
    if *key.namespace() != crate::helpers::MINECRAFT_NAMESPACE {return None;}
    Some(match &**key.key() {
      "pillager_outpost" => Self::PillagerOutpost,
      "mineshaft" => Self::Mineshaft,
      "woodland_mansion" => Self::WoodlandMansion,
      "jungle_temple" => Self::JungleTemple,
      "desert_pyramid" => Self::DesertPyramid,
      "igloo" => Self::Igloo,
      "shipwreck" => Self::Shipwreck,
      "swamp_hut" => Self::SwampHut,
      "stronghold" => Self::Stronghold,
      "ocean_monument" => Self::OceanMonument,
      "ocean_ruin" => Self::OceanRuin,
      "nether_bridge" => Self::NetherBridge,
      "end_city" => Self::EndCity,
      "buried_treasure" => Self::BuriedTreasure,
      "village" => Self::Village,
      "no_op" => Self::NoOp,
      "normal_tree" => Self::NormalTree,
      "acacia_tree" => Self::AcaciaTree,
      "fancy_tree" => Self::FancyTree,
      "jungle_ground_bush" => Self::JungleGroundBush,
      "dark_oak_tree" => Self::DarkOakTree,
      "mega_jungle_tree" => Self::MegaJungleTree,
      "mega_spruce_tree" => Self::MegaSpruceTree,
      "flower" => Self::Flower,
      "random_patch" => Self::RandomPatch,
      "block_pile" => Self::BlockPile,
      "spring_feature" => Self::SpringFeature,
      "chorus_plant" => Self::ChorusPlant,
      "emerald_ore" => Self::EmeraldOre,
      "void_start_platform" => Self::VoidStartPlatform,
      "desert_well" => Self::DesertWell,
      "fossil" => Self::Fossil,
      "huge_red_mushroom" => Self::HugeRedMushroom,
      "huge_brown_mushroom" => Self::HugeBrownMushroom,
      "ice_spike" => Self::IceSpike,
      "glowstone_blob" => Self::GlowstoneBlob,
      "freeze_top_layer" => Self::FreezeTopLayer,
      "vines" => Self::Vines,
      "monster_room" => Self::MonsterRoom,
      "blue_ice" => Self::BlueIce,
      "iceberg" => Self::Iceberg,
      "forest_rock" => Self::ForestRock,
      "disk" => Self::Disk,
      "ice_patch" => Self::IcePatch,
      "lake" => Self::Lake,
      "ore" => Self::Ore,
      "end_spike" => Self::EndSpike,
      "end_island" => Self::EndIsland,
      "end_gateway" => Self::EndGateway,
      "seagrass" => Self::Seagrass,
      "kelp" => Self::Kelp,
      "coral_tree" => Self::CoralTree,
      "coral_mushroom" => Self::CoralMushroom,
      "coral_claw" => Self::CoralClaw,
      "sea_pickle" => Self::SeaPickle,
      "simple_block" => Self::SimpleBlock,
      "bamboo" => Self::Bamboo,
      "fill_layer" => Self::FillLayer,
      "bonus_chest" => Self::BonusChest,
      "random_random_selector" => Self::RandomRandomSelector,
      "random_selector" => Self::RandomSelector,
      "simple_random_selector" => Self::SimpleRandomSelector,
      "random_boolean_selector" => Self::RandomBooleanSelector,
      "decorated" => Self::Decorated,
      "decorated_flower" => Self::DecoratedFlower,
      _ => {return None;},
    })
  }
  fn get_id(&self) -> usize {
    *self as usize
  }
  fn from_id(id: usize) -> Option<Self> {
    FromPrimitive::from_usize(id)
  }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, FromPrimitive)]
#[allow(non_camel_case_types)]
/// Key: `minecraft:decorator`
pub enum Decorator {
  Nope = 0,
  CountHeightmap = 1,
  CountTopSolid = 2,
  CountHeightmap32 = 3,
  CountHeightmapDouble = 4,
  CountHeight64 = 5,
  NoiseHeightmap32 = 6,
  NoiseHeightmapDouble = 7,
  ChanceHeightmap = 8,
  ChanceHeightmapDouble = 9,
  ChancePassthrough = 10,
  ChanceTopSolidHeightmap = 11,
  CountExtraHeightmap = 12,
  CountRange = 13,
  CountBiasedRange = 14,
  CountVeryBiasedRange = 15,
  RandomCountRange = 16,
  ChanceRange = 17,
  CountChanceHeightmap = 18,
  CountChanceHeightmapDouble = 19,
  CountDepthAverage = 20,
  TopSolidHeightmap = 21,
  TopSolidHeightmapRange = 22,
  TopSolidHeightmapNoiseBiased = 23,
  CarvingMask = 24,
  ForestRock = 25,
  HellFire = 26,
  Magma = 27,
  EmeraldOre = 28,
  LavaLake = 29,
  WaterLake = 30,
  Dungeons = 31,
  DarkOakTree = 32,
  Iceberg = 33,
  LightGemChance = 34,
  EndIsland = 35,
  ChorusPlant = 36,
  EndGateway = 37,
}
impl Decorator {
  pub const ID: usize = 11;
}
impl Registry for Decorator {
  fn get_registry_key(&self) -> NamespacedKey {
    NamespacedKey::new(crate::helpers::MINECRAFT_NAMESPACE, match self {
      Self::Nope => "nope",
      Self::CountHeightmap => "count_heightmap",
      Self::CountTopSolid => "count_top_solid",
      Self::CountHeightmap32 => "count_heightmap_32",
      Self::CountHeightmapDouble => "count_heightmap_double",
      Self::CountHeight64 => "count_height_64",
      Self::NoiseHeightmap32 => "noise_heightmap_32",
      Self::NoiseHeightmapDouble => "noise_heightmap_double",
      Self::ChanceHeightmap => "chance_heightmap",
      Self::ChanceHeightmapDouble => "chance_heightmap_double",
      Self::ChancePassthrough => "chance_passthrough",
      Self::ChanceTopSolidHeightmap => "chance_top_solid_heightmap",
      Self::CountExtraHeightmap => "count_extra_heightmap",
      Self::CountRange => "count_range",
      Self::CountBiasedRange => "count_biased_range",
      Self::CountVeryBiasedRange => "count_very_biased_range",
      Self::RandomCountRange => "random_count_range",
      Self::ChanceRange => "chance_range",
      Self::CountChanceHeightmap => "count_chance_heightmap",
      Self::CountChanceHeightmapDouble => "count_chance_heightmap_double",
      Self::CountDepthAverage => "count_depth_average",
      Self::TopSolidHeightmap => "top_solid_heightmap",
      Self::TopSolidHeightmapRange => "top_solid_heightmap_range",
      Self::TopSolidHeightmapNoiseBiased => "top_solid_heightmap_noise_biased",
      Self::CarvingMask => "carving_mask",
      Self::ForestRock => "forest_rock",
      Self::HellFire => "hell_fire",
      Self::Magma => "magma",
      Self::EmeraldOre => "emerald_ore",
      Self::LavaLake => "lava_lake",
      Self::WaterLake => "water_lake",
      Self::Dungeons => "dungeons",
      Self::DarkOakTree => "dark_oak_tree",
      Self::Iceberg => "iceberg",
      Self::LightGemChance => "light_gem_chance",
      Self::EndIsland => "end_island",
      Self::ChorusPlant => "chorus_plant",
      Self::EndGateway => "end_gateway",
    })
  }
  fn from_registry_key(key: &NamespacedKey) -> Option<Self> {
    if *key.namespace() != crate::helpers::MINECRAFT_NAMESPACE {return None;}
    Some(match &**key.key() {
      "nope" => Self::Nope,
      "count_heightmap" => Self::CountHeightmap,
      "count_top_solid" => Self::CountTopSolid,
      "count_heightmap_32" => Self::CountHeightmap32,
      "count_heightmap_double" => Self::CountHeightmapDouble,
      "count_height_64" => Self::CountHeight64,
      "noise_heightmap_32" => Self::NoiseHeightmap32,
      "noise_heightmap_double" => Self::NoiseHeightmapDouble,
      "chance_heightmap" => Self::ChanceHeightmap,
      "chance_heightmap_double" => Self::ChanceHeightmapDouble,
      "chance_passthrough" => Self::ChancePassthrough,
      "chance_top_solid_heightmap" => Self::ChanceTopSolidHeightmap,
      "count_extra_heightmap" => Self::CountExtraHeightmap,
      "count_range" => Self::CountRange,
      "count_biased_range" => Self::CountBiasedRange,
      "count_very_biased_range" => Self::CountVeryBiasedRange,
      "random_count_range" => Self::RandomCountRange,
      "chance_range" => Self::ChanceRange,
      "count_chance_heightmap" => Self::CountChanceHeightmap,
      "count_chance_heightmap_double" => Self::CountChanceHeightmapDouble,
      "count_depth_average" => Self::CountDepthAverage,
      "top_solid_heightmap" => Self::TopSolidHeightmap,
      "top_solid_heightmap_range" => Self::TopSolidHeightmapRange,
      "top_solid_heightmap_noise_biased" => Self::TopSolidHeightmapNoiseBiased,
      "carving_mask" => Self::CarvingMask,
      "forest_rock" => Self::ForestRock,
      "hell_fire" => Self::HellFire,
      "magma" => Self::Magma,
      "emerald_ore" => Self::EmeraldOre,
      "lava_lake" => Self::LavaLake,
      "water_lake" => Self::WaterLake,
      "dungeons" => Self::Dungeons,
      "dark_oak_tree" => Self::DarkOakTree,
      "iceberg" => Self::Iceberg,
      "light_gem_chance" => Self::LightGemChance,
      "end_island" => Self::EndIsland,
      "chorus_plant" => Self::ChorusPlant,
      "end_gateway" => Self::EndGateway,
      _ => {return None;},
    })
  }
  fn get_id(&self) -> usize {
    *self as usize
  }
  fn from_id(id: usize) -> Option<Self> {
    FromPrimitive::from_usize(id)
  }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, FromPrimitive)]
#[allow(non_camel_case_types)]
/// Key: `minecraft:biome`
pub enum Biome {
  Ocean = 0,
  Plains = 1,
  Desert = 2,
  Mountains = 3,
  Forest = 4,
  Taiga = 5,
  Swamp = 6,
  River = 7,
  Nether = 8,
  TheEnd = 9,
  FrozenOcean = 10,
  FrozenRiver = 11,
  SnowyTundra = 12,
  SnowyMountains = 13,
  MushroomFields = 14,
  MushroomFieldShore = 15,
  Beach = 16,
  DesertHills = 17,
  WoodedHills = 18,
  TaigaHills = 19,
  MountainEdge = 20,
  Jungle = 21,
  JungleHills = 22,
  JungleEdge = 23,
  DeepOcean = 24,
  StoneShore = 25,
  SnowyBeach = 26,
  BirchForest = 27,
  BirchForestHills = 28,
  DarkForest = 29,
  SnowyTaiga = 30,
  SnowyTaigaHills = 31,
  GiantTreeTaiga = 32,
  GiantTreeTaigaHills = 33,
  WoodedMountains = 34,
  Savanna = 35,
  SavannaPlateau = 36,
  Badlands = 37,
  WoodedBadlandsPlateau = 38,
  BadlandsPlateau = 39,
  SmallEndIslands = 40,
  EndMidlands = 41,
  EndHighlands = 42,
  EndBarrens = 43,
  WarmOcean = 44,
  LukewarmOcean = 45,
  ColdOcean = 46,
  DeepWarmOcean = 47,
  DeepLukewarmOcean = 48,
  DeepColdOcean = 49,
  DeepFrozenOcean = 50,
  TheVoid = 127,
  SunflowerPlains = 129,
  DesertLakes = 130,
  GravellyMountains = 131,
  FlowerForest = 132,
  TaigaMountains = 133,
  SwampHills = 134,
  IceSpikes = 140,
  ModifiedJungle = 149,
  ModifiedJungleEdge = 151,
  TallBirchForest = 155,
  TallBirchHills = 156,
  DarkForestHills = 157,
  SnowyTaigaMountains = 158,
  GiantSpruceTaiga = 160,
  GiantSpruceTaigaHills = 161,
  ModifiedGravellyMountains = 162,
  ShatteredSavanna = 163,
  ShatteredSavannaPlateau = 164,
  ErodedBadlands = 165,
  ModifiedWoodedBadlandsPlateau = 166,
  ModifiedBadlandsPlateau = 167,
  BambooJungle = 168,
  BambooJungleHills = 169,
}
impl Biome {
  pub const ID: usize = 12;
}
impl Registry for Biome {
  fn get_registry_key(&self) -> NamespacedKey {
    NamespacedKey::new(crate::helpers::MINECRAFT_NAMESPACE, match self {
      Self::Ocean => "ocean",
      Self::Plains => "plains",
      Self::Desert => "desert",
      Self::Mountains => "mountains",
      Self::Forest => "forest",
      Self::Taiga => "taiga",
      Self::Swamp => "swamp",
      Self::River => "river",
      Self::Nether => "nether",
      Self::TheEnd => "the_end",
      Self::FrozenOcean => "frozen_ocean",
      Self::FrozenRiver => "frozen_river",
      Self::SnowyTundra => "snowy_tundra",
      Self::SnowyMountains => "snowy_mountains",
      Self::MushroomFields => "mushroom_fields",
      Self::MushroomFieldShore => "mushroom_field_shore",
      Self::Beach => "beach",
      Self::DesertHills => "desert_hills",
      Self::WoodedHills => "wooded_hills",
      Self::TaigaHills => "taiga_hills",
      Self::MountainEdge => "mountain_edge",
      Self::Jungle => "jungle",
      Self::JungleHills => "jungle_hills",
      Self::JungleEdge => "jungle_edge",
      Self::DeepOcean => "deep_ocean",
      Self::StoneShore => "stone_shore",
      Self::SnowyBeach => "snowy_beach",
      Self::BirchForest => "birch_forest",
      Self::BirchForestHills => "birch_forest_hills",
      Self::DarkForest => "dark_forest",
      Self::SnowyTaiga => "snowy_taiga",
      Self::SnowyTaigaHills => "snowy_taiga_hills",
      Self::GiantTreeTaiga => "giant_tree_taiga",
      Self::GiantTreeTaigaHills => "giant_tree_taiga_hills",
      Self::WoodedMountains => "wooded_mountains",
      Self::Savanna => "savanna",
      Self::SavannaPlateau => "savanna_plateau",
      Self::Badlands => "badlands",
      Self::WoodedBadlandsPlateau => "wooded_badlands_plateau",
      Self::BadlandsPlateau => "badlands_plateau",
      Self::SmallEndIslands => "small_end_islands",
      Self::EndMidlands => "end_midlands",
      Self::EndHighlands => "end_highlands",
      Self::EndBarrens => "end_barrens",
      Self::WarmOcean => "warm_ocean",
      Self::LukewarmOcean => "lukewarm_ocean",
      Self::ColdOcean => "cold_ocean",
      Self::DeepWarmOcean => "deep_warm_ocean",
      Self::DeepLukewarmOcean => "deep_lukewarm_ocean",
      Self::DeepColdOcean => "deep_cold_ocean",
      Self::DeepFrozenOcean => "deep_frozen_ocean",
      Self::TheVoid => "the_void",
      Self::SunflowerPlains => "sunflower_plains",
      Self::DesertLakes => "desert_lakes",
      Self::GravellyMountains => "gravelly_mountains",
      Self::FlowerForest => "flower_forest",
      Self::TaigaMountains => "taiga_mountains",
      Self::SwampHills => "swamp_hills",
      Self::IceSpikes => "ice_spikes",
      Self::ModifiedJungle => "modified_jungle",
      Self::ModifiedJungleEdge => "modified_jungle_edge",
      Self::TallBirchForest => "tall_birch_forest",
      Self::TallBirchHills => "tall_birch_hills",
      Self::DarkForestHills => "dark_forest_hills",
      Self::SnowyTaigaMountains => "snowy_taiga_mountains",
      Self::GiantSpruceTaiga => "giant_spruce_taiga",
      Self::GiantSpruceTaigaHills => "giant_spruce_taiga_hills",
      Self::ModifiedGravellyMountains => "modified_gravelly_mountains",
      Self::ShatteredSavanna => "shattered_savanna",
      Self::ShatteredSavannaPlateau => "shattered_savanna_plateau",
      Self::ErodedBadlands => "eroded_badlands",
      Self::ModifiedWoodedBadlandsPlateau => "modified_wooded_badlands_plateau",
      Self::ModifiedBadlandsPlateau => "modified_badlands_plateau",
      Self::BambooJungle => "bamboo_jungle",
      Self::BambooJungleHills => "bamboo_jungle_hills",
    })
  }
  fn from_registry_key(key: &NamespacedKey) -> Option<Self> {
    if *key.namespace() != crate::helpers::MINECRAFT_NAMESPACE {return None;}
    Some(match &**key.key() {
      "ocean" => Self::Ocean,
      "plains" => Self::Plains,
      "desert" => Self::Desert,
      "mountains" => Self::Mountains,
      "forest" => Self::Forest,
      "taiga" => Self::Taiga,
      "swamp" => Self::Swamp,
      "river" => Self::River,
      "nether" => Self::Nether,
      "the_end" => Self::TheEnd,
      "frozen_ocean" => Self::FrozenOcean,
      "frozen_river" => Self::FrozenRiver,
      "snowy_tundra" => Self::SnowyTundra,
      "snowy_mountains" => Self::SnowyMountains,
      "mushroom_fields" => Self::MushroomFields,
      "mushroom_field_shore" => Self::MushroomFieldShore,
      "beach" => Self::Beach,
      "desert_hills" => Self::DesertHills,
      "wooded_hills" => Self::WoodedHills,
      "taiga_hills" => Self::TaigaHills,
      "mountain_edge" => Self::MountainEdge,
      "jungle" => Self::Jungle,
      "jungle_hills" => Self::JungleHills,
      "jungle_edge" => Self::JungleEdge,
      "deep_ocean" => Self::DeepOcean,
      "stone_shore" => Self::StoneShore,
      "snowy_beach" => Self::SnowyBeach,
      "birch_forest" => Self::BirchForest,
      "birch_forest_hills" => Self::BirchForestHills,
      "dark_forest" => Self::DarkForest,
      "snowy_taiga" => Self::SnowyTaiga,
      "snowy_taiga_hills" => Self::SnowyTaigaHills,
      "giant_tree_taiga" => Self::GiantTreeTaiga,
      "giant_tree_taiga_hills" => Self::GiantTreeTaigaHills,
      "wooded_mountains" => Self::WoodedMountains,
      "savanna" => Self::Savanna,
      "savanna_plateau" => Self::SavannaPlateau,
      "badlands" => Self::Badlands,
      "wooded_badlands_plateau" => Self::WoodedBadlandsPlateau,
      "badlands_plateau" => Self::BadlandsPlateau,
      "small_end_islands" => Self::SmallEndIslands,
      "end_midlands" => Self::EndMidlands,
      "end_highlands" => Self::EndHighlands,
      "end_barrens" => Self::EndBarrens,
      "warm_ocean" => Self::WarmOcean,
      "lukewarm_ocean" => Self::LukewarmOcean,
      "cold_ocean" => Self::ColdOcean,
      "deep_warm_ocean" => Self::DeepWarmOcean,
      "deep_lukewarm_ocean" => Self::DeepLukewarmOcean,
      "deep_cold_ocean" => Self::DeepColdOcean,
      "deep_frozen_ocean" => Self::DeepFrozenOcean,
      "the_void" => Self::TheVoid,
      "sunflower_plains" => Self::SunflowerPlains,
      "desert_lakes" => Self::DesertLakes,
      "gravelly_mountains" => Self::GravellyMountains,
      "flower_forest" => Self::FlowerForest,
      "taiga_mountains" => Self::TaigaMountains,
      "swamp_hills" => Self::SwampHills,
      "ice_spikes" => Self::IceSpikes,
      "modified_jungle" => Self::ModifiedJungle,
      "modified_jungle_edge" => Self::ModifiedJungleEdge,
      "tall_birch_forest" => Self::TallBirchForest,
      "tall_birch_hills" => Self::TallBirchHills,
      "dark_forest_hills" => Self::DarkForestHills,
      "snowy_taiga_mountains" => Self::SnowyTaigaMountains,
      "giant_spruce_taiga" => Self::GiantSpruceTaiga,
      "giant_spruce_taiga_hills" => Self::GiantSpruceTaigaHills,
      "modified_gravelly_mountains" => Self::ModifiedGravellyMountains,
      "shattered_savanna" => Self::ShatteredSavanna,
      "shattered_savanna_plateau" => Self::ShatteredSavannaPlateau,
      "eroded_badlands" => Self::ErodedBadlands,
      "modified_wooded_badlands_plateau" => Self::ModifiedWoodedBadlandsPlateau,
      "modified_badlands_plateau" => Self::ModifiedBadlandsPlateau,
      "bamboo_jungle" => Self::BambooJungle,
      "bamboo_jungle_hills" => Self::BambooJungleHills,
      _ => {return None;},
    })
  }
  fn get_id(&self) -> usize {
    *self as usize
  }
  fn from_id(id: usize) -> Option<Self> {
    FromPrimitive::from_usize(id)
  }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, FromPrimitive)]
#[allow(non_camel_case_types)]
/// Key: `minecraft:block_state_provider_type`
pub enum BlockStateProviderType {
  SimpleStateProvider = 0,
  WeightedStateProvider = 1,
  PlainFlowerProvider = 2,
  ForestFlowerProvider = 3,
}
impl BlockStateProviderType {
  pub const ID: usize = 13;
}
impl Registry for BlockStateProviderType {
  fn get_registry_key(&self) -> NamespacedKey {
    NamespacedKey::new(crate::helpers::MINECRAFT_NAMESPACE, match self {
      Self::SimpleStateProvider => "simple_state_provider",
      Self::WeightedStateProvider => "weighted_state_provider",
      Self::PlainFlowerProvider => "plain_flower_provider",
      Self::ForestFlowerProvider => "forest_flower_provider",
    })
  }
  fn from_registry_key(key: &NamespacedKey) -> Option<Self> {
    if *key.namespace() != crate::helpers::MINECRAFT_NAMESPACE {return None;}
    Some(match &**key.key() {
      "simple_state_provider" => Self::SimpleStateProvider,
      "weighted_state_provider" => Self::WeightedStateProvider,
      "plain_flower_provider" => Self::PlainFlowerProvider,
      "forest_flower_provider" => Self::ForestFlowerProvider,
      _ => {return None;},
    })
  }
  fn get_id(&self) -> usize {
    *self as usize
  }
  fn from_id(id: usize) -> Option<Self> {
    FromPrimitive::from_usize(id)
  }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, FromPrimitive)]
#[allow(non_camel_case_types)]
/// Key: `minecraft:block_placer_type`
pub enum BlockPlacerType {
  SimpleBlockPlacer = 0,
  DoublePlantPlacer = 1,
  ColumnPlacer = 2,
}
impl BlockPlacerType {
  pub const ID: usize = 14;
}
impl Registry for BlockPlacerType {
  fn get_registry_key(&self) -> NamespacedKey {
    NamespacedKey::new(crate::helpers::MINECRAFT_NAMESPACE, match self {
      Self::SimpleBlockPlacer => "simple_block_placer",
      Self::DoublePlantPlacer => "double_plant_placer",
      Self::ColumnPlacer => "column_placer",
    })
  }
  fn from_registry_key(key: &NamespacedKey) -> Option<Self> {
    if *key.namespace() != crate::helpers::MINECRAFT_NAMESPACE {return None;}
    Some(match &**key.key() {
      "simple_block_placer" => Self::SimpleBlockPlacer,
      "double_plant_placer" => Self::DoublePlantPlacer,
      "column_placer" => Self::ColumnPlacer,
      _ => {return None;},
    })
  }
  fn get_id(&self) -> usize {
    *self as usize
  }
  fn from_id(id: usize) -> Option<Self> {
    FromPrimitive::from_usize(id)
  }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, FromPrimitive)]
#[allow(non_camel_case_types)]
/// Key: `minecraft:foliage_placer_type`
pub enum FoliagePlacerType {
  BlobFoliagePlacer = 0,
  SpruceFoliagePlacer = 1,
  PineFoliagePlacer = 2,
  AcaciaFoliagePlacer = 3,
}
impl FoliagePlacerType {
  pub const ID: usize = 15;
}
impl Registry for FoliagePlacerType {
  fn get_registry_key(&self) -> NamespacedKey {
    NamespacedKey::new(crate::helpers::MINECRAFT_NAMESPACE, match self {
      Self::BlobFoliagePlacer => "blob_foliage_placer",
      Self::SpruceFoliagePlacer => "spruce_foliage_placer",
      Self::PineFoliagePlacer => "pine_foliage_placer",
      Self::AcaciaFoliagePlacer => "acacia_foliage_placer",
    })
  }
  fn from_registry_key(key: &NamespacedKey) -> Option<Self> {
    if *key.namespace() != crate::helpers::MINECRAFT_NAMESPACE {return None;}
    Some(match &**key.key() {
      "blob_foliage_placer" => Self::BlobFoliagePlacer,
      "spruce_foliage_placer" => Self::SpruceFoliagePlacer,
      "pine_foliage_placer" => Self::PineFoliagePlacer,
      "acacia_foliage_placer" => Self::AcaciaFoliagePlacer,
      _ => {return None;},
    })
  }
  fn get_id(&self) -> usize {
    *self as usize
  }
  fn from_id(id: usize) -> Option<Self> {
    FromPrimitive::from_usize(id)
  }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, FromPrimitive)]
#[allow(non_camel_case_types)]
/// Key: `minecraft:tree_decorator_type`
pub enum TreeDecoratorType {
  TrunkVine = 0,
  LeaveVine = 1,
  Cocoa = 2,
  Beehive = 3,
  AlterGround = 4,
}
impl TreeDecoratorType {
  pub const ID: usize = 16;
}
impl Registry for TreeDecoratorType {
  fn get_registry_key(&self) -> NamespacedKey {
    NamespacedKey::new(crate::helpers::MINECRAFT_NAMESPACE, match self {
      Self::TrunkVine => "trunk_vine",
      Self::LeaveVine => "leave_vine",
      Self::Cocoa => "cocoa",
      Self::Beehive => "beehive",
      Self::AlterGround => "alter_ground",
    })
  }
  fn from_registry_key(key: &NamespacedKey) -> Option<Self> {
    if *key.namespace() != crate::helpers::MINECRAFT_NAMESPACE {return None;}
    Some(match &**key.key() {
      "trunk_vine" => Self::TrunkVine,
      "leave_vine" => Self::LeaveVine,
      "cocoa" => Self::Cocoa,
      "beehive" => Self::Beehive,
      "alter_ground" => Self::AlterGround,
      _ => {return None;},
    })
  }
  fn get_id(&self) -> usize {
    *self as usize
  }
  fn from_id(id: usize) -> Option<Self> {
    FromPrimitive::from_usize(id)
  }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, FromPrimitive)]
#[allow(non_camel_case_types)]
/// Key: `minecraft:particle_type`
pub enum ParticleType {
  AmbientEntityEffect = 0,
  AngryVillager = 1,
  Barrier = 2,
  Block = 3,
  Bubble = 4,
  Cloud = 5,
  Crit = 6,
  DamageIndicator = 7,
  DragonBreath = 8,
  DrippingLava = 9,
  FallingLava = 10,
  LandingLava = 11,
  DrippingWater = 12,
  FallingWater = 13,
  Dust = 14,
  Effect = 15,
  ElderGuardian = 16,
  EnchantedHit = 17,
  Enchant = 18,
  EndRod = 19,
  EntityEffect = 20,
  ExplosionEmitter = 21,
  Explosion = 22,
  FallingDust = 23,
  Firework = 24,
  Fishing = 25,
  Flame = 26,
  Flash = 27,
  HappyVillager = 28,
  Composter = 29,
  Heart = 30,
  InstantEffect = 31,
  Item = 32,
  ItemSlime = 33,
  ItemSnowball = 34,
  LargeSmoke = 35,
  Lava = 36,
  Mycelium = 37,
  Note = 38,
  Poof = 39,
  Portal = 40,
  Rain = 41,
  Smoke = 42,
  Sneeze = 43,
  Spit = 44,
  SquidInk = 45,
  SweepAttack = 46,
  TotemOfUndying = 47,
  Underwater = 48,
  Splash = 49,
  Witch = 50,
  BubblePop = 51,
  CurrentDown = 52,
  BubbleColumnUp = 53,
  Nautilus = 54,
  Dolphin = 55,
  CampfireCosySmoke = 56,
  CampfireSignalSmoke = 57,
  DrippingHoney = 58,
  FallingHoney = 59,
  LandingHoney = 60,
  FallingNectar = 61,
}
impl ParticleType {
  pub const ID: usize = 17;
}
impl Registry for ParticleType {
  fn get_registry_key(&self) -> NamespacedKey {
    NamespacedKey::new(crate::helpers::MINECRAFT_NAMESPACE, match self {
      Self::AmbientEntityEffect => "ambient_entity_effect",
      Self::AngryVillager => "angry_villager",
      Self::Barrier => "barrier",
      Self::Block => "block",
      Self::Bubble => "bubble",
      Self::Cloud => "cloud",
      Self::Crit => "crit",
      Self::DamageIndicator => "damage_indicator",
      Self::DragonBreath => "dragon_breath",
      Self::DrippingLava => "dripping_lava",
      Self::FallingLava => "falling_lava",
      Self::LandingLava => "landing_lava",
      Self::DrippingWater => "dripping_water",
      Self::FallingWater => "falling_water",
      Self::Dust => "dust",
      Self::Effect => "effect",
      Self::ElderGuardian => "elder_guardian",
      Self::EnchantedHit => "enchanted_hit",
      Self::Enchant => "enchant",
      Self::EndRod => "end_rod",
      Self::EntityEffect => "entity_effect",
      Self::ExplosionEmitter => "explosion_emitter",
      Self::Explosion => "explosion",
      Self::FallingDust => "falling_dust",
      Self::Firework => "firework",
      Self::Fishing => "fishing",
      Self::Flame => "flame",
      Self::Flash => "flash",
      Self::HappyVillager => "happy_villager",
      Self::Composter => "composter",
      Self::Heart => "heart",
      Self::InstantEffect => "instant_effect",
      Self::Item => "item",
      Self::ItemSlime => "item_slime",
      Self::ItemSnowball => "item_snowball",
      Self::LargeSmoke => "large_smoke",
      Self::Lava => "lava",
      Self::Mycelium => "mycelium",
      Self::Note => "note",
      Self::Poof => "poof",
      Self::Portal => "portal",
      Self::Rain => "rain",
      Self::Smoke => "smoke",
      Self::Sneeze => "sneeze",
      Self::Spit => "spit",
      Self::SquidInk => "squid_ink",
      Self::SweepAttack => "sweep_attack",
      Self::TotemOfUndying => "totem_of_undying",
      Self::Underwater => "underwater",
      Self::Splash => "splash",
      Self::Witch => "witch",
      Self::BubblePop => "bubble_pop",
      Self::CurrentDown => "current_down",
      Self::BubbleColumnUp => "bubble_column_up",
      Self::Nautilus => "nautilus",
      Self::Dolphin => "dolphin",
      Self::CampfireCosySmoke => "campfire_cosy_smoke",
      Self::CampfireSignalSmoke => "campfire_signal_smoke",
      Self::DrippingHoney => "dripping_honey",
      Self::FallingHoney => "falling_honey",
      Self::LandingHoney => "landing_honey",
      Self::FallingNectar => "falling_nectar",
    })
  }
  fn from_registry_key(key: &NamespacedKey) -> Option<Self> {
    if *key.namespace() != crate::helpers::MINECRAFT_NAMESPACE {return None;}
    Some(match &**key.key() {
      "ambient_entity_effect" => Self::AmbientEntityEffect,
      "angry_villager" => Self::AngryVillager,
      "barrier" => Self::Barrier,
      "block" => Self::Block,
      "bubble" => Self::Bubble,
      "cloud" => Self::Cloud,
      "crit" => Self::Crit,
      "damage_indicator" => Self::DamageIndicator,
      "dragon_breath" => Self::DragonBreath,
      "dripping_lava" => Self::DrippingLava,
      "falling_lava" => Self::FallingLava,
      "landing_lava" => Self::LandingLava,
      "dripping_water" => Self::DrippingWater,
      "falling_water" => Self::FallingWater,
      "dust" => Self::Dust,
      "effect" => Self::Effect,
      "elder_guardian" => Self::ElderGuardian,
      "enchanted_hit" => Self::EnchantedHit,
      "enchant" => Self::Enchant,
      "end_rod" => Self::EndRod,
      "entity_effect" => Self::EntityEffect,
      "explosion_emitter" => Self::ExplosionEmitter,
      "explosion" => Self::Explosion,
      "falling_dust" => Self::FallingDust,
      "firework" => Self::Firework,
      "fishing" => Self::Fishing,
      "flame" => Self::Flame,
      "flash" => Self::Flash,
      "happy_villager" => Self::HappyVillager,
      "composter" => Self::Composter,
      "heart" => Self::Heart,
      "instant_effect" => Self::InstantEffect,
      "item" => Self::Item,
      "item_slime" => Self::ItemSlime,
      "item_snowball" => Self::ItemSnowball,
      "large_smoke" => Self::LargeSmoke,
      "lava" => Self::Lava,
      "mycelium" => Self::Mycelium,
      "note" => Self::Note,
      "poof" => Self::Poof,
      "portal" => Self::Portal,
      "rain" => Self::Rain,
      "smoke" => Self::Smoke,
      "sneeze" => Self::Sneeze,
      "spit" => Self::Spit,
      "squid_ink" => Self::SquidInk,
      "sweep_attack" => Self::SweepAttack,
      "totem_of_undying" => Self::TotemOfUndying,
      "underwater" => Self::Underwater,
      "splash" => Self::Splash,
      "witch" => Self::Witch,
      "bubble_pop" => Self::BubblePop,
      "current_down" => Self::CurrentDown,
      "bubble_column_up" => Self::BubbleColumnUp,
      "nautilus" => Self::Nautilus,
      "dolphin" => Self::Dolphin,
      "campfire_cosy_smoke" => Self::CampfireCosySmoke,
      "campfire_signal_smoke" => Self::CampfireSignalSmoke,
      "dripping_honey" => Self::DrippingHoney,
      "falling_honey" => Self::FallingHoney,
      "landing_honey" => Self::LandingHoney,
      "falling_nectar" => Self::FallingNectar,
      _ => {return None;},
    })
  }
  fn get_id(&self) -> usize {
    *self as usize
  }
  fn from_id(id: usize) -> Option<Self> {
    FromPrimitive::from_usize(id)
  }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, FromPrimitive)]
#[allow(non_camel_case_types)]
/// Key: `minecraft:biome_source_type`
pub enum BiomeSourceType {
  Checkerboard = 0,
  Fixed = 1,
  VanillaLayered = 2,
  TheEnd = 3,
}
impl BiomeSourceType {
  pub const ID: usize = 18;
}
impl Registry for BiomeSourceType {
  fn get_registry_key(&self) -> NamespacedKey {
    NamespacedKey::new(crate::helpers::MINECRAFT_NAMESPACE, match self {
      Self::Checkerboard => "checkerboard",
      Self::Fixed => "fixed",
      Self::VanillaLayered => "vanilla_layered",
      Self::TheEnd => "the_end",
    })
  }
  fn from_registry_key(key: &NamespacedKey) -> Option<Self> {
    if *key.namespace() != crate::helpers::MINECRAFT_NAMESPACE {return None;}
    Some(match &**key.key() {
      "checkerboard" => Self::Checkerboard,
      "fixed" => Self::Fixed,
      "vanilla_layered" => Self::VanillaLayered,
      "the_end" => Self::TheEnd,
      _ => {return None;},
    })
  }
  fn get_id(&self) -> usize {
    *self as usize
  }
  fn from_id(id: usize) -> Option<Self> {
    FromPrimitive::from_usize(id)
  }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, FromPrimitive)]
#[allow(non_camel_case_types)]
/// Key: `minecraft:block_entity_type`
pub enum BlockEntityType {
  Furnace = 0,
  Chest = 1,
  TrappedChest = 2,
  EnderChest = 3,
  Jukebox = 4,
  Dispenser = 5,
  Dropper = 6,
  Sign = 7,
  MobSpawner = 8,
  Piston = 9,
  BrewingStand = 10,
  EnchantingTable = 11,
  EndPortal = 12,
  Beacon = 13,
  Skull = 14,
  DaylightDetector = 15,
  Hopper = 16,
  Comparator = 17,
  Banner = 18,
  StructureBlock = 19,
  EndGateway = 20,
  CommandBlock = 21,
  ShulkerBox = 22,
  Bed = 23,
  Conduit = 24,
  Barrel = 25,
  Smoker = 26,
  BlastFurnace = 27,
  Lectern = 28,
  Bell = 29,
  Jigsaw = 30,
  Campfire = 31,
  Beehive = 32,
}
impl BlockEntityType {
  pub const ID: usize = 19;
}
impl Registry for BlockEntityType {
  fn get_registry_key(&self) -> NamespacedKey {
    NamespacedKey::new(crate::helpers::MINECRAFT_NAMESPACE, match self {
      Self::Furnace => "furnace",
      Self::Chest => "chest",
      Self::TrappedChest => "trapped_chest",
      Self::EnderChest => "ender_chest",
      Self::Jukebox => "jukebox",
      Self::Dispenser => "dispenser",
      Self::Dropper => "dropper",
      Self::Sign => "sign",
      Self::MobSpawner => "mob_spawner",
      Self::Piston => "piston",
      Self::BrewingStand => "brewing_stand",
      Self::EnchantingTable => "enchanting_table",
      Self::EndPortal => "end_portal",
      Self::Beacon => "beacon",
      Self::Skull => "skull",
      Self::DaylightDetector => "daylight_detector",
      Self::Hopper => "hopper",
      Self::Comparator => "comparator",
      Self::Banner => "banner",
      Self::StructureBlock => "structure_block",
      Self::EndGateway => "end_gateway",
      Self::CommandBlock => "command_block",
      Self::ShulkerBox => "shulker_box",
      Self::Bed => "bed",
      Self::Conduit => "conduit",
      Self::Barrel => "barrel",
      Self::Smoker => "smoker",
      Self::BlastFurnace => "blast_furnace",
      Self::Lectern => "lectern",
      Self::Bell => "bell",
      Self::Jigsaw => "jigsaw",
      Self::Campfire => "campfire",
      Self::Beehive => "beehive",
    })
  }
  fn from_registry_key(key: &NamespacedKey) -> Option<Self> {
    if *key.namespace() != crate::helpers::MINECRAFT_NAMESPACE {return None;}
    Some(match &**key.key() {
      "furnace" => Self::Furnace,
      "chest" => Self::Chest,
      "trapped_chest" => Self::TrappedChest,
      "ender_chest" => Self::EnderChest,
      "jukebox" => Self::Jukebox,
      "dispenser" => Self::Dispenser,
      "dropper" => Self::Dropper,
      "sign" => Self::Sign,
      "mob_spawner" => Self::MobSpawner,
      "piston" => Self::Piston,
      "brewing_stand" => Self::BrewingStand,
      "enchanting_table" => Self::EnchantingTable,
      "end_portal" => Self::EndPortal,
      "beacon" => Self::Beacon,
      "skull" => Self::Skull,
      "daylight_detector" => Self::DaylightDetector,
      "hopper" => Self::Hopper,
      "comparator" => Self::Comparator,
      "banner" => Self::Banner,
      "structure_block" => Self::StructureBlock,
      "end_gateway" => Self::EndGateway,
      "command_block" => Self::CommandBlock,
      "shulker_box" => Self::ShulkerBox,
      "bed" => Self::Bed,
      "conduit" => Self::Conduit,
      "barrel" => Self::Barrel,
      "smoker" => Self::Smoker,
      "blast_furnace" => Self::BlastFurnace,
      "lectern" => Self::Lectern,
      "bell" => Self::Bell,
      "jigsaw" => Self::Jigsaw,
      "campfire" => Self::Campfire,
      "beehive" => Self::Beehive,
      _ => {return None;},
    })
  }
  fn get_id(&self) -> usize {
    *self as usize
  }
  fn from_id(id: usize) -> Option<Self> {
    FromPrimitive::from_usize(id)
  }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, FromPrimitive)]
#[allow(non_camel_case_types)]
/// Key: `minecraft:chunk_generator_type`
pub enum ChunkGeneratorType {
  Surface = 0,
  Caves = 1,
  FloatingIslands = 2,
  Debug = 3,
  Flat = 4,
}
impl ChunkGeneratorType {
  pub const ID: usize = 20;
}
impl Registry for ChunkGeneratorType {
  fn get_registry_key(&self) -> NamespacedKey {
    NamespacedKey::new(crate::helpers::MINECRAFT_NAMESPACE, match self {
      Self::Surface => "surface",
      Self::Caves => "caves",
      Self::FloatingIslands => "floating_islands",
      Self::Debug => "debug",
      Self::Flat => "flat",
    })
  }
  fn from_registry_key(key: &NamespacedKey) -> Option<Self> {
    if *key.namespace() != crate::helpers::MINECRAFT_NAMESPACE {return None;}
    Some(match &**key.key() {
      "surface" => Self::Surface,
      "caves" => Self::Caves,
      "floating_islands" => Self::FloatingIslands,
      "debug" => Self::Debug,
      "flat" => Self::Flat,
      _ => {return None;},
    })
  }
  fn get_id(&self) -> usize {
    *self as usize
  }
  fn from_id(id: usize) -> Option<Self> {
    FromPrimitive::from_usize(id)
  }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, FromPrimitive)]
#[allow(non_camel_case_types)]
/// Key: `minecraft:dimension_type`
pub enum DimensionType {
  Overworld = 1,
  TheNether = 0,
  TheEnd = 2,
}
impl DimensionType {
  pub const ID: usize = 21;
}
impl Registry for DimensionType {
  fn get_registry_key(&self) -> NamespacedKey {
    NamespacedKey::new(crate::helpers::MINECRAFT_NAMESPACE, match self {
      Self::Overworld => "overworld",
      Self::TheNether => "the_nether",
      Self::TheEnd => "the_end",
    })
  }
  fn from_registry_key(key: &NamespacedKey) -> Option<Self> {
    if *key.namespace() != crate::helpers::MINECRAFT_NAMESPACE {return None;}
    Some(match &**key.key() {
      "overworld" => Self::Overworld,
      "the_nether" => Self::TheNether,
      "the_end" => Self::TheEnd,
      _ => {return None;},
    })
  }
  fn get_id(&self) -> usize {
    *self as usize
  }
  fn from_id(id: usize) -> Option<Self> {
    FromPrimitive::from_usize(id)
  }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, FromPrimitive)]
#[allow(non_camel_case_types)]
/// Key: `minecraft:motive`
pub enum Motive {
  Kebab = 0,
  Aztec = 1,
  Alban = 2,
  Aztec2 = 3,
  Bomb = 4,
  Plant = 5,
  Wasteland = 6,
  Pool = 7,
  Courbet = 8,
  Sea = 9,
  Sunset = 10,
  Creebet = 11,
  Wanderer = 12,
  Graham = 13,
  Match = 14,
  Bust = 15,
  Stage = 16,
  Void = 17,
  SkullAndRoses = 18,
  Wither = 19,
  Fighters = 20,
  Pointer = 21,
  Pigscene = 22,
  BurningSkull = 23,
  Skeleton = 24,
  DonkeyKong = 25,
}
impl Motive {
  pub const ID: usize = 22;
}
impl Registry for Motive {
  fn get_registry_key(&self) -> NamespacedKey {
    NamespacedKey::new(crate::helpers::MINECRAFT_NAMESPACE, match self {
      Self::Kebab => "kebab",
      Self::Aztec => "aztec",
      Self::Alban => "alban",
      Self::Aztec2 => "aztec2",
      Self::Bomb => "bomb",
      Self::Plant => "plant",
      Self::Wasteland => "wasteland",
      Self::Pool => "pool",
      Self::Courbet => "courbet",
      Self::Sea => "sea",
      Self::Sunset => "sunset",
      Self::Creebet => "creebet",
      Self::Wanderer => "wanderer",
      Self::Graham => "graham",
      Self::Match => "match",
      Self::Bust => "bust",
      Self::Stage => "stage",
      Self::Void => "void",
      Self::SkullAndRoses => "skull_and_roses",
      Self::Wither => "wither",
      Self::Fighters => "fighters",
      Self::Pointer => "pointer",
      Self::Pigscene => "pigscene",
      Self::BurningSkull => "burning_skull",
      Self::Skeleton => "skeleton",
      Self::DonkeyKong => "donkey_kong",
    })
  }
  fn from_registry_key(key: &NamespacedKey) -> Option<Self> {
    if *key.namespace() != crate::helpers::MINECRAFT_NAMESPACE {return None;}
    Some(match &**key.key() {
      "kebab" => Self::Kebab,
      "aztec" => Self::Aztec,
      "alban" => Self::Alban,
      "aztec2" => Self::Aztec2,
      "bomb" => Self::Bomb,
      "plant" => Self::Plant,
      "wasteland" => Self::Wasteland,
      "pool" => Self::Pool,
      "courbet" => Self::Courbet,
      "sea" => Self::Sea,
      "sunset" => Self::Sunset,
      "creebet" => Self::Creebet,
      "wanderer" => Self::Wanderer,
      "graham" => Self::Graham,
      "match" => Self::Match,
      "bust" => Self::Bust,
      "stage" => Self::Stage,
      "void" => Self::Void,
      "skull_and_roses" => Self::SkullAndRoses,
      "wither" => Self::Wither,
      "fighters" => Self::Fighters,
      "pointer" => Self::Pointer,
      "pigscene" => Self::Pigscene,
      "burning_skull" => Self::BurningSkull,
      "skeleton" => Self::Skeleton,
      "donkey_kong" => Self::DonkeyKong,
      _ => {return None;},
    })
  }
  fn get_id(&self) -> usize {
    *self as usize
  }
  fn from_id(id: usize) -> Option<Self> {
    FromPrimitive::from_usize(id)
  }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, FromPrimitive)]
#[allow(non_camel_case_types)]
/// Key: `minecraft:custom_stat`
pub enum CustomStat {
  LeaveGame = 0,
  PlayOneMinute = 1,
  TimeSinceDeath = 2,
  TimeSinceRest = 3,
  SneakTime = 4,
  WalkOneCm = 5,
  CrouchOneCm = 6,
  SprintOneCm = 7,
  WalkOnWaterOneCm = 8,
  FallOneCm = 9,
  ClimbOneCm = 10,
  FlyOneCm = 11,
  WalkUnderWaterOneCm = 12,
  MinecartOneCm = 13,
  BoatOneCm = 14,
  PigOneCm = 15,
  HorseOneCm = 16,
  AviateOneCm = 17,
  SwimOneCm = 18,
  Jump = 19,
  Drop = 20,
  DamageDealt = 21,
  DamageDealtAbsorbed = 22,
  DamageDealtResisted = 23,
  DamageTaken = 24,
  DamageBlockedByShield = 25,
  DamageAbsorbed = 26,
  DamageResisted = 27,
  Deaths = 28,
  MobKills = 29,
  AnimalsBred = 30,
  PlayerKills = 31,
  FishCaught = 32,
  TalkedToVillager = 33,
  TradedWithVillager = 34,
  EatCakeSlice = 35,
  FillCauldron = 36,
  UseCauldron = 37,
  CleanArmor = 38,
  CleanBanner = 39,
  CleanShulkerBox = 40,
  InteractWithBrewingstand = 41,
  InteractWithBeacon = 42,
  InspectDropper = 43,
  InspectHopper = 44,
  InspectDispenser = 45,
  PlayNoteblock = 46,
  TuneNoteblock = 47,
  PotFlower = 48,
  TriggerTrappedChest = 49,
  OpenEnderchest = 50,
  EnchantItem = 51,
  PlayRecord = 52,
  InteractWithFurnace = 53,
  InteractWithCraftingTable = 54,
  OpenChest = 55,
  SleepInBed = 56,
  OpenShulkerBox = 57,
  OpenBarrel = 58,
  InteractWithBlastFurnace = 59,
  InteractWithSmoker = 60,
  InteractWithLectern = 61,
  InteractWithCampfire = 62,
  InteractWithCartographyTable = 63,
  InteractWithLoom = 64,
  InteractWithStonecutter = 65,
  BellRing = 66,
  RaidTrigger = 67,
  RaidWin = 68,
  InteractWithAnvil = 69,
  InteractWithGrindstone = 70,
}
impl CustomStat {
  pub const ID: usize = 23;
}
impl Registry for CustomStat {
  fn get_registry_key(&self) -> NamespacedKey {
    NamespacedKey::new(crate::helpers::MINECRAFT_NAMESPACE, match self {
      Self::LeaveGame => "leave_game",
      Self::PlayOneMinute => "play_one_minute",
      Self::TimeSinceDeath => "time_since_death",
      Self::TimeSinceRest => "time_since_rest",
      Self::SneakTime => "sneak_time",
      Self::WalkOneCm => "walk_one_cm",
      Self::CrouchOneCm => "crouch_one_cm",
      Self::SprintOneCm => "sprint_one_cm",
      Self::WalkOnWaterOneCm => "walk_on_water_one_cm",
      Self::FallOneCm => "fall_one_cm",
      Self::ClimbOneCm => "climb_one_cm",
      Self::FlyOneCm => "fly_one_cm",
      Self::WalkUnderWaterOneCm => "walk_under_water_one_cm",
      Self::MinecartOneCm => "minecart_one_cm",
      Self::BoatOneCm => "boat_one_cm",
      Self::PigOneCm => "pig_one_cm",
      Self::HorseOneCm => "horse_one_cm",
      Self::AviateOneCm => "aviate_one_cm",
      Self::SwimOneCm => "swim_one_cm",
      Self::Jump => "jump",
      Self::Drop => "drop",
      Self::DamageDealt => "damage_dealt",
      Self::DamageDealtAbsorbed => "damage_dealt_absorbed",
      Self::DamageDealtResisted => "damage_dealt_resisted",
      Self::DamageTaken => "damage_taken",
      Self::DamageBlockedByShield => "damage_blocked_by_shield",
      Self::DamageAbsorbed => "damage_absorbed",
      Self::DamageResisted => "damage_resisted",
      Self::Deaths => "deaths",
      Self::MobKills => "mob_kills",
      Self::AnimalsBred => "animals_bred",
      Self::PlayerKills => "player_kills",
      Self::FishCaught => "fish_caught",
      Self::TalkedToVillager => "talked_to_villager",
      Self::TradedWithVillager => "traded_with_villager",
      Self::EatCakeSlice => "eat_cake_slice",
      Self::FillCauldron => "fill_cauldron",
      Self::UseCauldron => "use_cauldron",
      Self::CleanArmor => "clean_armor",
      Self::CleanBanner => "clean_banner",
      Self::CleanShulkerBox => "clean_shulker_box",
      Self::InteractWithBrewingstand => "interact_with_brewingstand",
      Self::InteractWithBeacon => "interact_with_beacon",
      Self::InspectDropper => "inspect_dropper",
      Self::InspectHopper => "inspect_hopper",
      Self::InspectDispenser => "inspect_dispenser",
      Self::PlayNoteblock => "play_noteblock",
      Self::TuneNoteblock => "tune_noteblock",
      Self::PotFlower => "pot_flower",
      Self::TriggerTrappedChest => "trigger_trapped_chest",
      Self::OpenEnderchest => "open_enderchest",
      Self::EnchantItem => "enchant_item",
      Self::PlayRecord => "play_record",
      Self::InteractWithFurnace => "interact_with_furnace",
      Self::InteractWithCraftingTable => "interact_with_crafting_table",
      Self::OpenChest => "open_chest",
      Self::SleepInBed => "sleep_in_bed",
      Self::OpenShulkerBox => "open_shulker_box",
      Self::OpenBarrel => "open_barrel",
      Self::InteractWithBlastFurnace => "interact_with_blast_furnace",
      Self::InteractWithSmoker => "interact_with_smoker",
      Self::InteractWithLectern => "interact_with_lectern",
      Self::InteractWithCampfire => "interact_with_campfire",
      Self::InteractWithCartographyTable => "interact_with_cartography_table",
      Self::InteractWithLoom => "interact_with_loom",
      Self::InteractWithStonecutter => "interact_with_stonecutter",
      Self::BellRing => "bell_ring",
      Self::RaidTrigger => "raid_trigger",
      Self::RaidWin => "raid_win",
      Self::InteractWithAnvil => "interact_with_anvil",
      Self::InteractWithGrindstone => "interact_with_grindstone",
    })
  }
  fn from_registry_key(key: &NamespacedKey) -> Option<Self> {
    if *key.namespace() != crate::helpers::MINECRAFT_NAMESPACE {return None;}
    Some(match &**key.key() {
      "leave_game" => Self::LeaveGame,
      "play_one_minute" => Self::PlayOneMinute,
      "time_since_death" => Self::TimeSinceDeath,
      "time_since_rest" => Self::TimeSinceRest,
      "sneak_time" => Self::SneakTime,
      "walk_one_cm" => Self::WalkOneCm,
      "crouch_one_cm" => Self::CrouchOneCm,
      "sprint_one_cm" => Self::SprintOneCm,
      "walk_on_water_one_cm" => Self::WalkOnWaterOneCm,
      "fall_one_cm" => Self::FallOneCm,
      "climb_one_cm" => Self::ClimbOneCm,
      "fly_one_cm" => Self::FlyOneCm,
      "walk_under_water_one_cm" => Self::WalkUnderWaterOneCm,
      "minecart_one_cm" => Self::MinecartOneCm,
      "boat_one_cm" => Self::BoatOneCm,
      "pig_one_cm" => Self::PigOneCm,
      "horse_one_cm" => Self::HorseOneCm,
      "aviate_one_cm" => Self::AviateOneCm,
      "swim_one_cm" => Self::SwimOneCm,
      "jump" => Self::Jump,
      "drop" => Self::Drop,
      "damage_dealt" => Self::DamageDealt,
      "damage_dealt_absorbed" => Self::DamageDealtAbsorbed,
      "damage_dealt_resisted" => Self::DamageDealtResisted,
      "damage_taken" => Self::DamageTaken,
      "damage_blocked_by_shield" => Self::DamageBlockedByShield,
      "damage_absorbed" => Self::DamageAbsorbed,
      "damage_resisted" => Self::DamageResisted,
      "deaths" => Self::Deaths,
      "mob_kills" => Self::MobKills,
      "animals_bred" => Self::AnimalsBred,
      "player_kills" => Self::PlayerKills,
      "fish_caught" => Self::FishCaught,
      "talked_to_villager" => Self::TalkedToVillager,
      "traded_with_villager" => Self::TradedWithVillager,
      "eat_cake_slice" => Self::EatCakeSlice,
      "fill_cauldron" => Self::FillCauldron,
      "use_cauldron" => Self::UseCauldron,
      "clean_armor" => Self::CleanArmor,
      "clean_banner" => Self::CleanBanner,
      "clean_shulker_box" => Self::CleanShulkerBox,
      "interact_with_brewingstand" => Self::InteractWithBrewingstand,
      "interact_with_beacon" => Self::InteractWithBeacon,
      "inspect_dropper" => Self::InspectDropper,
      "inspect_hopper" => Self::InspectHopper,
      "inspect_dispenser" => Self::InspectDispenser,
      "play_noteblock" => Self::PlayNoteblock,
      "tune_noteblock" => Self::TuneNoteblock,
      "pot_flower" => Self::PotFlower,
      "trigger_trapped_chest" => Self::TriggerTrappedChest,
      "open_enderchest" => Self::OpenEnderchest,
      "enchant_item" => Self::EnchantItem,
      "play_record" => Self::PlayRecord,
      "interact_with_furnace" => Self::InteractWithFurnace,
      "interact_with_crafting_table" => Self::InteractWithCraftingTable,
      "open_chest" => Self::OpenChest,
      "sleep_in_bed" => Self::SleepInBed,
      "open_shulker_box" => Self::OpenShulkerBox,
      "open_barrel" => Self::OpenBarrel,
      "interact_with_blast_furnace" => Self::InteractWithBlastFurnace,
      "interact_with_smoker" => Self::InteractWithSmoker,
      "interact_with_lectern" => Self::InteractWithLectern,
      "interact_with_campfire" => Self::InteractWithCampfire,
      "interact_with_cartography_table" => Self::InteractWithCartographyTable,
      "interact_with_loom" => Self::InteractWithLoom,
      "interact_with_stonecutter" => Self::InteractWithStonecutter,
      "bell_ring" => Self::BellRing,
      "raid_trigger" => Self::RaidTrigger,
      "raid_win" => Self::RaidWin,
      "interact_with_anvil" => Self::InteractWithAnvil,
      "interact_with_grindstone" => Self::InteractWithGrindstone,
      _ => {return None;},
    })
  }
  fn get_id(&self) -> usize {
    *self as usize
  }
  fn from_id(id: usize) -> Option<Self> {
    FromPrimitive::from_usize(id)
  }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, FromPrimitive)]
#[allow(non_camel_case_types)]
/// Key: `minecraft:chunk_status`
pub enum ChunkStatus {
  Empty = 0,
  StructureStarts = 1,
  StructureReferences = 2,
  Biomes = 3,
  Noise = 4,
  Surface = 5,
  Carvers = 6,
  LiquidCarvers = 7,
  Features = 8,
  Light = 9,
  Spawn = 10,
  Heightmaps = 11,
  Full = 12,
}
impl ChunkStatus {
  pub const ID: usize = 24;
}
impl Registry for ChunkStatus {
  fn get_registry_key(&self) -> NamespacedKey {
    NamespacedKey::new(crate::helpers::MINECRAFT_NAMESPACE, match self {
      Self::Empty => "empty",
      Self::StructureStarts => "structure_starts",
      Self::StructureReferences => "structure_references",
      Self::Biomes => "biomes",
      Self::Noise => "noise",
      Self::Surface => "surface",
      Self::Carvers => "carvers",
      Self::LiquidCarvers => "liquid_carvers",
      Self::Features => "features",
      Self::Light => "light",
      Self::Spawn => "spawn",
      Self::Heightmaps => "heightmaps",
      Self::Full => "full",
    })
  }
  fn from_registry_key(key: &NamespacedKey) -> Option<Self> {
    if *key.namespace() != crate::helpers::MINECRAFT_NAMESPACE {return None;}
    Some(match &**key.key() {
      "empty" => Self::Empty,
      "structure_starts" => Self::StructureStarts,
      "structure_references" => Self::StructureReferences,
      "biomes" => Self::Biomes,
      "noise" => Self::Noise,
      "surface" => Self::Surface,
      "carvers" => Self::Carvers,
      "liquid_carvers" => Self::LiquidCarvers,
      "features" => Self::Features,
      "light" => Self::Light,
      "spawn" => Self::Spawn,
      "heightmaps" => Self::Heightmaps,
      "full" => Self::Full,
      _ => {return None;},
    })
  }
  fn get_id(&self) -> usize {
    *self as usize
  }
  fn from_id(id: usize) -> Option<Self> {
    FromPrimitive::from_usize(id)
  }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, FromPrimitive)]
#[allow(non_camel_case_types)]
/// Key: `minecraft:structure_feature`
pub enum StructureFeature {
  Mineshaft = 0,
  PillagerOutpost = 1,
  Fortress = 2,
  Stronghold = 3,
  JunglePyramid = 4,
  OceanRuin = 5,
  DesertPyramid = 6,
  Igloo = 7,
  SwampHut = 8,
  Monument = 9,
  Endcity = 10,
  Mansion = 11,
  BuriedTreasure = 12,
  Shipwreck = 13,
  Village = 14,
}
impl StructureFeature {
  pub const ID: usize = 25;
}
impl Registry for StructureFeature {
  fn get_registry_key(&self) -> NamespacedKey {
    NamespacedKey::new(crate::helpers::MINECRAFT_NAMESPACE, match self {
      Self::Mineshaft => "mineshaft",
      Self::PillagerOutpost => "pillager_outpost",
      Self::Fortress => "fortress",
      Self::Stronghold => "stronghold",
      Self::JunglePyramid => "jungle_pyramid",
      Self::OceanRuin => "ocean_ruin",
      Self::DesertPyramid => "desert_pyramid",
      Self::Igloo => "igloo",
      Self::SwampHut => "swamp_hut",
      Self::Monument => "monument",
      Self::Endcity => "endcity",
      Self::Mansion => "mansion",
      Self::BuriedTreasure => "buried_treasure",
      Self::Shipwreck => "shipwreck",
      Self::Village => "village",
    })
  }
  fn from_registry_key(key: &NamespacedKey) -> Option<Self> {
    if *key.namespace() != crate::helpers::MINECRAFT_NAMESPACE {return None;}
    Some(match &**key.key() {
      "mineshaft" => Self::Mineshaft,
      "pillager_outpost" => Self::PillagerOutpost,
      "fortress" => Self::Fortress,
      "stronghold" => Self::Stronghold,
      "jungle_pyramid" => Self::JunglePyramid,
      "ocean_ruin" => Self::OceanRuin,
      "desert_pyramid" => Self::DesertPyramid,
      "igloo" => Self::Igloo,
      "swamp_hut" => Self::SwampHut,
      "monument" => Self::Monument,
      "endcity" => Self::Endcity,
      "mansion" => Self::Mansion,
      "buried_treasure" => Self::BuriedTreasure,
      "shipwreck" => Self::Shipwreck,
      "village" => Self::Village,
      _ => {return None;},
    })
  }
  fn get_id(&self) -> usize {
    *self as usize
  }
  fn from_id(id: usize) -> Option<Self> {
    FromPrimitive::from_usize(id)
  }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, FromPrimitive)]
#[allow(non_camel_case_types)]
/// Key: `minecraft:structure_piece`
pub enum StructurePiece {
  Mscorridor = 0,
  Mscrossing = 1,
  Msroom = 2,
  Msstairs = 3,
  Pcp = 4,
  Nvi = 5,
  Nebcr = 6,
  Nebef = 7,
  Nebs = 8,
  Neccs = 9,
  Nectb = 10,
  Nece = 11,
  Nescsc = 12,
  Nesclt = 13,
  Nesc = 14,
  Nescrt = 15,
  Necsr = 16,
  Nemt = 17,
  Nerc = 18,
  Nesr = 19,
  Nestart = 20,
  Shcc = 21,
  Shfc = 22,
  Sh5c = 23,
  Shlt = 24,
  Shli = 25,
  Shpr = 26,
  Shph = 27,
  Shrt = 28,
  Shrc = 29,
  Shsd = 30,
  Shstart = 31,
  Shs = 32,
  Shssd = 33,
  Tejp = 34,
  Orp = 35,
  Iglu = 36,
  Tesh = 37,
  Tedp = 38,
  Omb = 39,
  Omcr = 40,
  Omdxr = 41,
  Omdxyr = 42,
  Omdyr = 43,
  Omdyzr = 44,
  Omdzr = 45,
  Omentry = 46,
  Ompenthouse = 47,
  Omsimple = 48,
  Omsimplet = 49,
  Omwr = 50,
  Ecp = 51,
  Wmp = 52,
  Btp = 53,
  Shipwreck = 54,
}
impl StructurePiece {
  pub const ID: usize = 26;
}
impl Registry for StructurePiece {
  fn get_registry_key(&self) -> NamespacedKey {
    NamespacedKey::new(crate::helpers::MINECRAFT_NAMESPACE, match self {
      Self::Mscorridor => "mscorridor",
      Self::Mscrossing => "mscrossing",
      Self::Msroom => "msroom",
      Self::Msstairs => "msstairs",
      Self::Pcp => "pcp",
      Self::Nvi => "nvi",
      Self::Nebcr => "nebcr",
      Self::Nebef => "nebef",
      Self::Nebs => "nebs",
      Self::Neccs => "neccs",
      Self::Nectb => "nectb",
      Self::Nece => "nece",
      Self::Nescsc => "nescsc",
      Self::Nesclt => "nesclt",
      Self::Nesc => "nesc",
      Self::Nescrt => "nescrt",
      Self::Necsr => "necsr",
      Self::Nemt => "nemt",
      Self::Nerc => "nerc",
      Self::Nesr => "nesr",
      Self::Nestart => "nestart",
      Self::Shcc => "shcc",
      Self::Shfc => "shfc",
      Self::Sh5c => "sh5c",
      Self::Shlt => "shlt",
      Self::Shli => "shli",
      Self::Shpr => "shpr",
      Self::Shph => "shph",
      Self::Shrt => "shrt",
      Self::Shrc => "shrc",
      Self::Shsd => "shsd",
      Self::Shstart => "shstart",
      Self::Shs => "shs",
      Self::Shssd => "shssd",
      Self::Tejp => "tejp",
      Self::Orp => "orp",
      Self::Iglu => "iglu",
      Self::Tesh => "tesh",
      Self::Tedp => "tedp",
      Self::Omb => "omb",
      Self::Omcr => "omcr",
      Self::Omdxr => "omdxr",
      Self::Omdxyr => "omdxyr",
      Self::Omdyr => "omdyr",
      Self::Omdyzr => "omdyzr",
      Self::Omdzr => "omdzr",
      Self::Omentry => "omentry",
      Self::Ompenthouse => "ompenthouse",
      Self::Omsimple => "omsimple",
      Self::Omsimplet => "omsimplet",
      Self::Omwr => "omwr",
      Self::Ecp => "ecp",
      Self::Wmp => "wmp",
      Self::Btp => "btp",
      Self::Shipwreck => "shipwreck",
    })
  }
  fn from_registry_key(key: &NamespacedKey) -> Option<Self> {
    if *key.namespace() != crate::helpers::MINECRAFT_NAMESPACE {return None;}
    Some(match &**key.key() {
      "mscorridor" => Self::Mscorridor,
      "mscrossing" => Self::Mscrossing,
      "msroom" => Self::Msroom,
      "msstairs" => Self::Msstairs,
      "pcp" => Self::Pcp,
      "nvi" => Self::Nvi,
      "nebcr" => Self::Nebcr,
      "nebef" => Self::Nebef,
      "nebs" => Self::Nebs,
      "neccs" => Self::Neccs,
      "nectb" => Self::Nectb,
      "nece" => Self::Nece,
      "nescsc" => Self::Nescsc,
      "nesclt" => Self::Nesclt,
      "nesc" => Self::Nesc,
      "nescrt" => Self::Nescrt,
      "necsr" => Self::Necsr,
      "nemt" => Self::Nemt,
      "nerc" => Self::Nerc,
      "nesr" => Self::Nesr,
      "nestart" => Self::Nestart,
      "shcc" => Self::Shcc,
      "shfc" => Self::Shfc,
      "sh5c" => Self::Sh5c,
      "shlt" => Self::Shlt,
      "shli" => Self::Shli,
      "shpr" => Self::Shpr,
      "shph" => Self::Shph,
      "shrt" => Self::Shrt,
      "shrc" => Self::Shrc,
      "shsd" => Self::Shsd,
      "shstart" => Self::Shstart,
      "shs" => Self::Shs,
      "shssd" => Self::Shssd,
      "tejp" => Self::Tejp,
      "orp" => Self::Orp,
      "iglu" => Self::Iglu,
      "tesh" => Self::Tesh,
      "tedp" => Self::Tedp,
      "omb" => Self::Omb,
      "omcr" => Self::Omcr,
      "omdxr" => Self::Omdxr,
      "omdxyr" => Self::Omdxyr,
      "omdyr" => Self::Omdyr,
      "omdyzr" => Self::Omdyzr,
      "omdzr" => Self::Omdzr,
      "omentry" => Self::Omentry,
      "ompenthouse" => Self::Ompenthouse,
      "omsimple" => Self::Omsimple,
      "omsimplet" => Self::Omsimplet,
      "omwr" => Self::Omwr,
      "ecp" => Self::Ecp,
      "wmp" => Self::Wmp,
      "btp" => Self::Btp,
      "shipwreck" => Self::Shipwreck,
      _ => {return None;},
    })
  }
  fn get_id(&self) -> usize {
    *self as usize
  }
  fn from_id(id: usize) -> Option<Self> {
    FromPrimitive::from_usize(id)
  }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, FromPrimitive)]
#[allow(non_camel_case_types)]
/// Key: `minecraft:rule_test`
pub enum RuleTest {
  AlwaysTrue = 0,
  BlockMatch = 1,
  BlockstateMatch = 2,
  TagMatch = 3,
  RandomBlockMatch = 4,
  RandomBlockstateMatch = 5,
}
impl RuleTest {
  pub const ID: usize = 27;
}
impl Registry for RuleTest {
  fn get_registry_key(&self) -> NamespacedKey {
    NamespacedKey::new(crate::helpers::MINECRAFT_NAMESPACE, match self {
      Self::AlwaysTrue => "always_true",
      Self::BlockMatch => "block_match",
      Self::BlockstateMatch => "blockstate_match",
      Self::TagMatch => "tag_match",
      Self::RandomBlockMatch => "random_block_match",
      Self::RandomBlockstateMatch => "random_blockstate_match",
    })
  }
  fn from_registry_key(key: &NamespacedKey) -> Option<Self> {
    if *key.namespace() != crate::helpers::MINECRAFT_NAMESPACE {return None;}
    Some(match &**key.key() {
      "always_true" => Self::AlwaysTrue,
      "block_match" => Self::BlockMatch,
      "blockstate_match" => Self::BlockstateMatch,
      "tag_match" => Self::TagMatch,
      "random_block_match" => Self::RandomBlockMatch,
      "random_blockstate_match" => Self::RandomBlockstateMatch,
      _ => {return None;},
    })
  }
  fn get_id(&self) -> usize {
    *self as usize
  }
  fn from_id(id: usize) -> Option<Self> {
    FromPrimitive::from_usize(id)
  }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, FromPrimitive)]
#[allow(non_camel_case_types)]
/// Key: `minecraft:structure_processor`
pub enum StructureProcessor {
  BlockIgnore = 0,
  BlockRot = 1,
  Gravity = 2,
  JigsawReplacement = 3,
  Rule = 4,
  Nop = 5,
}
impl StructureProcessor {
  pub const ID: usize = 28;
}
impl Registry for StructureProcessor {
  fn get_registry_key(&self) -> NamespacedKey {
    NamespacedKey::new(crate::helpers::MINECRAFT_NAMESPACE, match self {
      Self::BlockIgnore => "block_ignore",
      Self::BlockRot => "block_rot",
      Self::Gravity => "gravity",
      Self::JigsawReplacement => "jigsaw_replacement",
      Self::Rule => "rule",
      Self::Nop => "nop",
    })
  }
  fn from_registry_key(key: &NamespacedKey) -> Option<Self> {
    if *key.namespace() != crate::helpers::MINECRAFT_NAMESPACE {return None;}
    Some(match &**key.key() {
      "block_ignore" => Self::BlockIgnore,
      "block_rot" => Self::BlockRot,
      "gravity" => Self::Gravity,
      "jigsaw_replacement" => Self::JigsawReplacement,
      "rule" => Self::Rule,
      "nop" => Self::Nop,
      _ => {return None;},
    })
  }
  fn get_id(&self) -> usize {
    *self as usize
  }
  fn from_id(id: usize) -> Option<Self> {
    FromPrimitive::from_usize(id)
  }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, FromPrimitive)]
#[allow(non_camel_case_types)]
/// Key: `minecraft:structure_pool_element`
pub enum StructurePoolElement {
  SinglePoolElement = 0,
  ListPoolElement = 1,
  FeaturePoolElement = 2,
  EmptyPoolElement = 3,
}
impl StructurePoolElement {
  pub const ID: usize = 29;
}
impl Registry for StructurePoolElement {
  fn get_registry_key(&self) -> NamespacedKey {
    NamespacedKey::new(crate::helpers::MINECRAFT_NAMESPACE, match self {
      Self::SinglePoolElement => "single_pool_element",
      Self::ListPoolElement => "list_pool_element",
      Self::FeaturePoolElement => "feature_pool_element",
      Self::EmptyPoolElement => "empty_pool_element",
    })
  }
  fn from_registry_key(key: &NamespacedKey) -> Option<Self> {
    if *key.namespace() != crate::helpers::MINECRAFT_NAMESPACE {return None;}
    Some(match &**key.key() {
      "single_pool_element" => Self::SinglePoolElement,
      "list_pool_element" => Self::ListPoolElement,
      "feature_pool_element" => Self::FeaturePoolElement,
      "empty_pool_element" => Self::EmptyPoolElement,
      _ => {return None;},
    })
  }
  fn get_id(&self) -> usize {
    *self as usize
  }
  fn from_id(id: usize) -> Option<Self> {
    FromPrimitive::from_usize(id)
  }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, FromPrimitive)]
#[allow(non_camel_case_types)]
/// Key: `minecraft:menu`
pub enum Menu {
  Generic9x1 = 0,
  Generic9x2 = 1,
  Generic9x3 = 2,
  Generic9x4 = 3,
  Generic9x5 = 4,
  Generic9x6 = 5,
  Generic3x3 = 6,
  Anvil = 7,
  Beacon = 8,
  BlastFurnace = 9,
  BrewingStand = 10,
  Crafting = 11,
  Enchantment = 12,
  Furnace = 13,
  Grindstone = 14,
  Hopper = 15,
  Lectern = 16,
  Loom = 17,
  Merchant = 18,
  ShulkerBox = 19,
  Smoker = 20,
  CartographyTable = 21,
  Stonecutter = 22,
}
impl Menu {
  pub const ID: usize = 30;
}
impl Registry for Menu {
  fn get_registry_key(&self) -> NamespacedKey {
    NamespacedKey::new(crate::helpers::MINECRAFT_NAMESPACE, match self {
      Self::Generic9x1 => "generic_9x1",
      Self::Generic9x2 => "generic_9x2",
      Self::Generic9x3 => "generic_9x3",
      Self::Generic9x4 => "generic_9x4",
      Self::Generic9x5 => "generic_9x5",
      Self::Generic9x6 => "generic_9x6",
      Self::Generic3x3 => "generic_3x3",
      Self::Anvil => "anvil",
      Self::Beacon => "beacon",
      Self::BlastFurnace => "blast_furnace",
      Self::BrewingStand => "brewing_stand",
      Self::Crafting => "crafting",
      Self::Enchantment => "enchantment",
      Self::Furnace => "furnace",
      Self::Grindstone => "grindstone",
      Self::Hopper => "hopper",
      Self::Lectern => "lectern",
      Self::Loom => "loom",
      Self::Merchant => "merchant",
      Self::ShulkerBox => "shulker_box",
      Self::Smoker => "smoker",
      Self::CartographyTable => "cartography_table",
      Self::Stonecutter => "stonecutter",
    })
  }
  fn from_registry_key(key: &NamespacedKey) -> Option<Self> {
    if *key.namespace() != crate::helpers::MINECRAFT_NAMESPACE {return None;}
    Some(match &**key.key() {
      "generic_9x1" => Self::Generic9x1,
      "generic_9x2" => Self::Generic9x2,
      "generic_9x3" => Self::Generic9x3,
      "generic_9x4" => Self::Generic9x4,
      "generic_9x5" => Self::Generic9x5,
      "generic_9x6" => Self::Generic9x6,
      "generic_3x3" => Self::Generic3x3,
      "anvil" => Self::Anvil,
      "beacon" => Self::Beacon,
      "blast_furnace" => Self::BlastFurnace,
      "brewing_stand" => Self::BrewingStand,
      "crafting" => Self::Crafting,
      "enchantment" => Self::Enchantment,
      "furnace" => Self::Furnace,
      "grindstone" => Self::Grindstone,
      "hopper" => Self::Hopper,
      "lectern" => Self::Lectern,
      "loom" => Self::Loom,
      "merchant" => Self::Merchant,
      "shulker_box" => Self::ShulkerBox,
      "smoker" => Self::Smoker,
      "cartography_table" => Self::CartographyTable,
      "stonecutter" => Self::Stonecutter,
      _ => {return None;},
    })
  }
  fn get_id(&self) -> usize {
    *self as usize
  }
  fn from_id(id: usize) -> Option<Self> {
    FromPrimitive::from_usize(id)
  }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, FromPrimitive)]
#[allow(non_camel_case_types)]
/// Key: `minecraft:recipe_type`
pub enum RecipeType {
  Crafting = 0,
  Smelting = 1,
  Blasting = 2,
  Smoking = 3,
  CampfireCooking = 4,
  Stonecutting = 5,
}
impl RecipeType {
  pub const ID: usize = 31;
}
impl Registry for RecipeType {
  fn get_registry_key(&self) -> NamespacedKey {
    NamespacedKey::new(crate::helpers::MINECRAFT_NAMESPACE, match self {
      Self::Crafting => "crafting",
      Self::Smelting => "smelting",
      Self::Blasting => "blasting",
      Self::Smoking => "smoking",
      Self::CampfireCooking => "campfire_cooking",
      Self::Stonecutting => "stonecutting",
    })
  }
  fn from_registry_key(key: &NamespacedKey) -> Option<Self> {
    if *key.namespace() != crate::helpers::MINECRAFT_NAMESPACE {return None;}
    Some(match &**key.key() {
      "crafting" => Self::Crafting,
      "smelting" => Self::Smelting,
      "blasting" => Self::Blasting,
      "smoking" => Self::Smoking,
      "campfire_cooking" => Self::CampfireCooking,
      "stonecutting" => Self::Stonecutting,
      _ => {return None;},
    })
  }
  fn get_id(&self) -> usize {
    *self as usize
  }
  fn from_id(id: usize) -> Option<Self> {
    FromPrimitive::from_usize(id)
  }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, FromPrimitive)]
#[allow(non_camel_case_types)]
/// Key: `minecraft:recipe_serializer`
pub enum RecipeSerializer {
  CraftingShaped = 0,
  CraftingShapeless = 1,
  CraftingSpecialArmordye = 2,
  CraftingSpecialBookcloning = 3,
  CraftingSpecialMapcloning = 4,
  CraftingSpecialMapextending = 5,
  CraftingSpecialFireworkRocket = 6,
  CraftingSpecialFireworkStar = 7,
  CraftingSpecialFireworkStarFade = 8,
  CraftingSpecialTippedarrow = 9,
  CraftingSpecialBannerduplicate = 10,
  CraftingSpecialShielddecoration = 11,
  CraftingSpecialShulkerboxcoloring = 12,
  CraftingSpecialSuspiciousstew = 13,
  CraftingSpecialRepairitem = 14,
  Smelting = 15,
  Blasting = 16,
  Smoking = 17,
  CampfireCooking = 18,
  Stonecutting = 19,
}
impl RecipeSerializer {
  pub const ID: usize = 32;
}
impl Registry for RecipeSerializer {
  fn get_registry_key(&self) -> NamespacedKey {
    NamespacedKey::new(crate::helpers::MINECRAFT_NAMESPACE, match self {
      Self::CraftingShaped => "crafting_shaped",
      Self::CraftingShapeless => "crafting_shapeless",
      Self::CraftingSpecialArmordye => "crafting_special_armordye",
      Self::CraftingSpecialBookcloning => "crafting_special_bookcloning",
      Self::CraftingSpecialMapcloning => "crafting_special_mapcloning",
      Self::CraftingSpecialMapextending => "crafting_special_mapextending",
      Self::CraftingSpecialFireworkRocket => "crafting_special_firework_rocket",
      Self::CraftingSpecialFireworkStar => "crafting_special_firework_star",
      Self::CraftingSpecialFireworkStarFade => "crafting_special_firework_star_fade",
      Self::CraftingSpecialTippedarrow => "crafting_special_tippedarrow",
      Self::CraftingSpecialBannerduplicate => "crafting_special_bannerduplicate",
      Self::CraftingSpecialShielddecoration => "crafting_special_shielddecoration",
      Self::CraftingSpecialShulkerboxcoloring => "crafting_special_shulkerboxcoloring",
      Self::CraftingSpecialSuspiciousstew => "crafting_special_suspiciousstew",
      Self::CraftingSpecialRepairitem => "crafting_special_repairitem",
      Self::Smelting => "smelting",
      Self::Blasting => "blasting",
      Self::Smoking => "smoking",
      Self::CampfireCooking => "campfire_cooking",
      Self::Stonecutting => "stonecutting",
    })
  }
  fn from_registry_key(key: &NamespacedKey) -> Option<Self> {
    if *key.namespace() != crate::helpers::MINECRAFT_NAMESPACE {return None;}
    Some(match &**key.key() {
      "crafting_shaped" => Self::CraftingShaped,
      "crafting_shapeless" => Self::CraftingShapeless,
      "crafting_special_armordye" => Self::CraftingSpecialArmordye,
      "crafting_special_bookcloning" => Self::CraftingSpecialBookcloning,
      "crafting_special_mapcloning" => Self::CraftingSpecialMapcloning,
      "crafting_special_mapextending" => Self::CraftingSpecialMapextending,
      "crafting_special_firework_rocket" => Self::CraftingSpecialFireworkRocket,
      "crafting_special_firework_star" => Self::CraftingSpecialFireworkStar,
      "crafting_special_firework_star_fade" => Self::CraftingSpecialFireworkStarFade,
      "crafting_special_tippedarrow" => Self::CraftingSpecialTippedarrow,
      "crafting_special_bannerduplicate" => Self::CraftingSpecialBannerduplicate,
      "crafting_special_shielddecoration" => Self::CraftingSpecialShielddecoration,
      "crafting_special_shulkerboxcoloring" => Self::CraftingSpecialShulkerboxcoloring,
      "crafting_special_suspiciousstew" => Self::CraftingSpecialSuspiciousstew,
      "crafting_special_repairitem" => Self::CraftingSpecialRepairitem,
      "smelting" => Self::Smelting,
      "blasting" => Self::Blasting,
      "smoking" => Self::Smoking,
      "campfire_cooking" => Self::CampfireCooking,
      "stonecutting" => Self::Stonecutting,
      _ => {return None;},
    })
  }
  fn get_id(&self) -> usize {
    *self as usize
  }
  fn from_id(id: usize) -> Option<Self> {
    FromPrimitive::from_usize(id)
  }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, FromPrimitive)]
#[allow(non_camel_case_types)]
/// Key: `minecraft:stat_type`
pub enum StatType {
  Mined = 0,
  Crafted = 1,
  Used = 2,
  Broken = 3,
  PickedUp = 4,
  Dropped = 5,
  Killed = 6,
  KilledBy = 7,
  Custom = 8,
}
impl StatType {
  pub const ID: usize = 33;
}
impl Registry for StatType {
  fn get_registry_key(&self) -> NamespacedKey {
    NamespacedKey::new(crate::helpers::MINECRAFT_NAMESPACE, match self {
      Self::Mined => "mined",
      Self::Crafted => "crafted",
      Self::Used => "used",
      Self::Broken => "broken",
      Self::PickedUp => "picked_up",
      Self::Dropped => "dropped",
      Self::Killed => "killed",
      Self::KilledBy => "killed_by",
      Self::Custom => "custom",
    })
  }
  fn from_registry_key(key: &NamespacedKey) -> Option<Self> {
    if *key.namespace() != crate::helpers::MINECRAFT_NAMESPACE {return None;}
    Some(match &**key.key() {
      "mined" => Self::Mined,
      "crafted" => Self::Crafted,
      "used" => Self::Used,
      "broken" => Self::Broken,
      "picked_up" => Self::PickedUp,
      "dropped" => Self::Dropped,
      "killed" => Self::Killed,
      "killed_by" => Self::KilledBy,
      "custom" => Self::Custom,
      _ => {return None;},
    })
  }
  fn get_id(&self) -> usize {
    *self as usize
  }
  fn from_id(id: usize) -> Option<Self> {
    FromPrimitive::from_usize(id)
  }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, FromPrimitive)]
#[allow(non_camel_case_types)]
/// Key: `minecraft:villager_type`
pub enum VillagerType {
  Desert = 0,
  Jungle = 1,
  Plains = 2,
  Savanna = 3,
  Snow = 4,
  Swamp = 5,
  Taiga = 6,
}
impl VillagerType {
  pub const ID: usize = 34;
}
impl Registry for VillagerType {
  fn get_registry_key(&self) -> NamespacedKey {
    NamespacedKey::new(crate::helpers::MINECRAFT_NAMESPACE, match self {
      Self::Desert => "desert",
      Self::Jungle => "jungle",
      Self::Plains => "plains",
      Self::Savanna => "savanna",
      Self::Snow => "snow",
      Self::Swamp => "swamp",
      Self::Taiga => "taiga",
    })
  }
  fn from_registry_key(key: &NamespacedKey) -> Option<Self> {
    if *key.namespace() != crate::helpers::MINECRAFT_NAMESPACE {return None;}
    Some(match &**key.key() {
      "desert" => Self::Desert,
      "jungle" => Self::Jungle,
      "plains" => Self::Plains,
      "savanna" => Self::Savanna,
      "snow" => Self::Snow,
      "swamp" => Self::Swamp,
      "taiga" => Self::Taiga,
      _ => {return None;},
    })
  }
  fn get_id(&self) -> usize {
    *self as usize
  }
  fn from_id(id: usize) -> Option<Self> {
    FromPrimitive::from_usize(id)
  }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, FromPrimitive)]
#[allow(non_camel_case_types)]
/// Key: `minecraft:villager_profession`
pub enum VillagerProfession {
  None = 0,
  Armorer = 1,
  Butcher = 2,
  Cartographer = 3,
  Cleric = 4,
  Farmer = 5,
  Fisherman = 6,
  Fletcher = 7,
  Leatherworker = 8,
  Librarian = 9,
  Mason = 10,
  Nitwit = 11,
  Shepherd = 12,
  Toolsmith = 13,
  Weaponsmith = 14,
}
impl VillagerProfession {
  pub const ID: usize = 35;
}
impl Registry for VillagerProfession {
  fn get_registry_key(&self) -> NamespacedKey {
    NamespacedKey::new(crate::helpers::MINECRAFT_NAMESPACE, match self {
      Self::None => "none",
      Self::Armorer => "armorer",
      Self::Butcher => "butcher",
      Self::Cartographer => "cartographer",
      Self::Cleric => "cleric",
      Self::Farmer => "farmer",
      Self::Fisherman => "fisherman",
      Self::Fletcher => "fletcher",
      Self::Leatherworker => "leatherworker",
      Self::Librarian => "librarian",
      Self::Mason => "mason",
      Self::Nitwit => "nitwit",
      Self::Shepherd => "shepherd",
      Self::Toolsmith => "toolsmith",
      Self::Weaponsmith => "weaponsmith",
    })
  }
  fn from_registry_key(key: &NamespacedKey) -> Option<Self> {
    if *key.namespace() != crate::helpers::MINECRAFT_NAMESPACE {return None;}
    Some(match &**key.key() {
      "none" => Self::None,
      "armorer" => Self::Armorer,
      "butcher" => Self::Butcher,
      "cartographer" => Self::Cartographer,
      "cleric" => Self::Cleric,
      "farmer" => Self::Farmer,
      "fisherman" => Self::Fisherman,
      "fletcher" => Self::Fletcher,
      "leatherworker" => Self::Leatherworker,
      "librarian" => Self::Librarian,
      "mason" => Self::Mason,
      "nitwit" => Self::Nitwit,
      "shepherd" => Self::Shepherd,
      "toolsmith" => Self::Toolsmith,
      "weaponsmith" => Self::Weaponsmith,
      _ => {return None;},
    })
  }
  fn get_id(&self) -> usize {
    *self as usize
  }
  fn from_id(id: usize) -> Option<Self> {
    FromPrimitive::from_usize(id)
  }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, FromPrimitive)]
#[allow(non_camel_case_types)]
/// Key: `minecraft:point_of_interest_type`
pub enum PointOfInterestType {
  Unemployed = 0,
  Armorer = 1,
  Butcher = 2,
  Cartographer = 3,
  Cleric = 4,
  Farmer = 5,
  Fisherman = 6,
  Fletcher = 7,
  Leatherworker = 8,
  Librarian = 9,
  Mason = 10,
  Nitwit = 11,
  Shepherd = 12,
  Toolsmith = 13,
  Weaponsmith = 14,
  Home = 15,
  Meeting = 16,
  Beehive = 17,
  BeeNest = 18,
  NetherPortal = 19,
}
impl PointOfInterestType {
  pub const ID: usize = 36;
}
impl Registry for PointOfInterestType {
  fn get_registry_key(&self) -> NamespacedKey {
    NamespacedKey::new(crate::helpers::MINECRAFT_NAMESPACE, match self {
      Self::Unemployed => "unemployed",
      Self::Armorer => "armorer",
      Self::Butcher => "butcher",
      Self::Cartographer => "cartographer",
      Self::Cleric => "cleric",
      Self::Farmer => "farmer",
      Self::Fisherman => "fisherman",
      Self::Fletcher => "fletcher",
      Self::Leatherworker => "leatherworker",
      Self::Librarian => "librarian",
      Self::Mason => "mason",
      Self::Nitwit => "nitwit",
      Self::Shepherd => "shepherd",
      Self::Toolsmith => "toolsmith",
      Self::Weaponsmith => "weaponsmith",
      Self::Home => "home",
      Self::Meeting => "meeting",
      Self::Beehive => "beehive",
      Self::BeeNest => "bee_nest",
      Self::NetherPortal => "nether_portal",
    })
  }
  fn from_registry_key(key: &NamespacedKey) -> Option<Self> {
    if *key.namespace() != crate::helpers::MINECRAFT_NAMESPACE {return None;}
    Some(match &**key.key() {
      "unemployed" => Self::Unemployed,
      "armorer" => Self::Armorer,
      "butcher" => Self::Butcher,
      "cartographer" => Self::Cartographer,
      "cleric" => Self::Cleric,
      "farmer" => Self::Farmer,
      "fisherman" => Self::Fisherman,
      "fletcher" => Self::Fletcher,
      "leatherworker" => Self::Leatherworker,
      "librarian" => Self::Librarian,
      "mason" => Self::Mason,
      "nitwit" => Self::Nitwit,
      "shepherd" => Self::Shepherd,
      "toolsmith" => Self::Toolsmith,
      "weaponsmith" => Self::Weaponsmith,
      "home" => Self::Home,
      "meeting" => Self::Meeting,
      "beehive" => Self::Beehive,
      "bee_nest" => Self::BeeNest,
      "nether_portal" => Self::NetherPortal,
      _ => {return None;},
    })
  }
  fn get_id(&self) -> usize {
    *self as usize
  }
  fn from_id(id: usize) -> Option<Self> {
    FromPrimitive::from_usize(id)
  }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, FromPrimitive)]
#[allow(non_camel_case_types)]
/// Key: `minecraft:memory_module_type`
pub enum MemoryModuleType {
  Dummy = 0,
  Home = 1,
  JobSite = 2,
  MeetingPoint = 3,
  SecondaryJobSite = 4,
  Mobs = 5,
  VisibleMobs = 6,
  VisibleVillagerBabies = 7,
  NearestPlayers = 8,
  NearestVisiblePlayer = 9,
  WalkTarget = 10,
  LookTarget = 11,
  InteractionTarget = 12,
  BreedTarget = 13,
  Path = 14,
  InteractableDoors = 15,
  OpenedDoors = 16,
  NearestBed = 17,
  HurtBy = 18,
  HurtByEntity = 19,
  NearestHostile = 20,
  HidingPlace = 21,
  HeardBellTime = 22,
  CantReachWalkTargetSince = 23,
  GolemLastSeenTime = 24,
  LastSlept = 25,
  LastWoken = 26,
  LastWorkedAtPoi = 27,
}
impl MemoryModuleType {
  pub const ID: usize = 37;
}
impl Registry for MemoryModuleType {
  fn get_registry_key(&self) -> NamespacedKey {
    NamespacedKey::new(crate::helpers::MINECRAFT_NAMESPACE, match self {
      Self::Dummy => "dummy",
      Self::Home => "home",
      Self::JobSite => "job_site",
      Self::MeetingPoint => "meeting_point",
      Self::SecondaryJobSite => "secondary_job_site",
      Self::Mobs => "mobs",
      Self::VisibleMobs => "visible_mobs",
      Self::VisibleVillagerBabies => "visible_villager_babies",
      Self::NearestPlayers => "nearest_players",
      Self::NearestVisiblePlayer => "nearest_visible_player",
      Self::WalkTarget => "walk_target",
      Self::LookTarget => "look_target",
      Self::InteractionTarget => "interaction_target",
      Self::BreedTarget => "breed_target",
      Self::Path => "path",
      Self::InteractableDoors => "interactable_doors",
      Self::OpenedDoors => "opened_doors",
      Self::NearestBed => "nearest_bed",
      Self::HurtBy => "hurt_by",
      Self::HurtByEntity => "hurt_by_entity",
      Self::NearestHostile => "nearest_hostile",
      Self::HidingPlace => "hiding_place",
      Self::HeardBellTime => "heard_bell_time",
      Self::CantReachWalkTargetSince => "cant_reach_walk_target_since",
      Self::GolemLastSeenTime => "golem_last_seen_time",
      Self::LastSlept => "last_slept",
      Self::LastWoken => "last_woken",
      Self::LastWorkedAtPoi => "last_worked_at_poi",
    })
  }
  fn from_registry_key(key: &NamespacedKey) -> Option<Self> {
    if *key.namespace() != crate::helpers::MINECRAFT_NAMESPACE {return None;}
    Some(match &**key.key() {
      "dummy" => Self::Dummy,
      "home" => Self::Home,
      "job_site" => Self::JobSite,
      "meeting_point" => Self::MeetingPoint,
      "secondary_job_site" => Self::SecondaryJobSite,
      "mobs" => Self::Mobs,
      "visible_mobs" => Self::VisibleMobs,
      "visible_villager_babies" => Self::VisibleVillagerBabies,
      "nearest_players" => Self::NearestPlayers,
      "nearest_visible_player" => Self::NearestVisiblePlayer,
      "walk_target" => Self::WalkTarget,
      "look_target" => Self::LookTarget,
      "interaction_target" => Self::InteractionTarget,
      "breed_target" => Self::BreedTarget,
      "path" => Self::Path,
      "interactable_doors" => Self::InteractableDoors,
      "opened_doors" => Self::OpenedDoors,
      "nearest_bed" => Self::NearestBed,
      "hurt_by" => Self::HurtBy,
      "hurt_by_entity" => Self::HurtByEntity,
      "nearest_hostile" => Self::NearestHostile,
      "hiding_place" => Self::HidingPlace,
      "heard_bell_time" => Self::HeardBellTime,
      "cant_reach_walk_target_since" => Self::CantReachWalkTargetSince,
      "golem_last_seen_time" => Self::GolemLastSeenTime,
      "last_slept" => Self::LastSlept,
      "last_woken" => Self::LastWoken,
      "last_worked_at_poi" => Self::LastWorkedAtPoi,
      _ => {return None;},
    })
  }
  fn get_id(&self) -> usize {
    *self as usize
  }
  fn from_id(id: usize) -> Option<Self> {
    FromPrimitive::from_usize(id)
  }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, FromPrimitive)]
#[allow(non_camel_case_types)]
/// Key: `minecraft:sensor_type`
pub enum SensorType {
  Dummy = 0,
  NearestLivingEntities = 1,
  NearestPlayers = 2,
  InteractableDoors = 3,
  NearestBed = 4,
  HurtBy = 5,
  VillagerHostiles = 6,
  VillagerBabies = 7,
  SecondaryPois = 8,
  GolemLastSeen = 9,
}
impl SensorType {
  pub const ID: usize = 38;
}
impl Registry for SensorType {
  fn get_registry_key(&self) -> NamespacedKey {
    NamespacedKey::new(crate::helpers::MINECRAFT_NAMESPACE, match self {
      Self::Dummy => "dummy",
      Self::NearestLivingEntities => "nearest_living_entities",
      Self::NearestPlayers => "nearest_players",
      Self::InteractableDoors => "interactable_doors",
      Self::NearestBed => "nearest_bed",
      Self::HurtBy => "hurt_by",
      Self::VillagerHostiles => "villager_hostiles",
      Self::VillagerBabies => "villager_babies",
      Self::SecondaryPois => "secondary_pois",
      Self::GolemLastSeen => "golem_last_seen",
    })
  }
  fn from_registry_key(key: &NamespacedKey) -> Option<Self> {
    if *key.namespace() != crate::helpers::MINECRAFT_NAMESPACE {return None;}
    Some(match &**key.key() {
      "dummy" => Self::Dummy,
      "nearest_living_entities" => Self::NearestLivingEntities,
      "nearest_players" => Self::NearestPlayers,
      "interactable_doors" => Self::InteractableDoors,
      "nearest_bed" => Self::NearestBed,
      "hurt_by" => Self::HurtBy,
      "villager_hostiles" => Self::VillagerHostiles,
      "villager_babies" => Self::VillagerBabies,
      "secondary_pois" => Self::SecondaryPois,
      "golem_last_seen" => Self::GolemLastSeen,
      _ => {return None;},
    })
  }
  fn get_id(&self) -> usize {
    *self as usize
  }
  fn from_id(id: usize) -> Option<Self> {
    FromPrimitive::from_usize(id)
  }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, FromPrimitive)]
#[allow(non_camel_case_types)]
/// Key: `minecraft:schedule`
pub enum Schedule {
  Empty = 0,
  Simple = 1,
  VillagerBaby = 2,
  VillagerDefault = 3,
}
impl Schedule {
  pub const ID: usize = 39;
}
impl Registry for Schedule {
  fn get_registry_key(&self) -> NamespacedKey {
    NamespacedKey::new(crate::helpers::MINECRAFT_NAMESPACE, match self {
      Self::Empty => "empty",
      Self::Simple => "simple",
      Self::VillagerBaby => "villager_baby",
      Self::VillagerDefault => "villager_default",
    })
  }
  fn from_registry_key(key: &NamespacedKey) -> Option<Self> {
    if *key.namespace() != crate::helpers::MINECRAFT_NAMESPACE {return None;}
    Some(match &**key.key() {
      "empty" => Self::Empty,
      "simple" => Self::Simple,
      "villager_baby" => Self::VillagerBaby,
      "villager_default" => Self::VillagerDefault,
      _ => {return None;},
    })
  }
  fn get_id(&self) -> usize {
    *self as usize
  }
  fn from_id(id: usize) -> Option<Self> {
    FromPrimitive::from_usize(id)
  }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, FromPrimitive)]
#[allow(non_camel_case_types)]
/// Key: `minecraft:activity`
pub enum Activity {
  Core = 0,
  Idle = 1,
  Work = 2,
  Play = 3,
  Rest = 4,
  Meet = 5,
  Panic = 6,
  Raid = 7,
  PreRaid = 8,
  Hide = 9,
}
impl Activity {
  pub const ID: usize = 40;
}
impl Registry for Activity {
  fn get_registry_key(&self) -> NamespacedKey {
    NamespacedKey::new(crate::helpers::MINECRAFT_NAMESPACE, match self {
      Self::Core => "core",
      Self::Idle => "idle",
      Self::Work => "work",
      Self::Play => "play",
      Self::Rest => "rest",
      Self::Meet => "meet",
      Self::Panic => "panic",
      Self::Raid => "raid",
      Self::PreRaid => "pre_raid",
      Self::Hide => "hide",
    })
  }
  fn from_registry_key(key: &NamespacedKey) -> Option<Self> {
    if *key.namespace() != crate::helpers::MINECRAFT_NAMESPACE {return None;}
    Some(match &**key.key() {
      "core" => Self::Core,
      "idle" => Self::Idle,
      "work" => Self::Work,
      "play" => Self::Play,
      "rest" => Self::Rest,
      "meet" => Self::Meet,
      "panic" => Self::Panic,
      "raid" => Self::Raid,
      "pre_raid" => Self::PreRaid,
      "hide" => Self::Hide,
      _ => {return None;},
    })
  }
  fn get_id(&self) -> usize {
    *self as usize
  }
  fn from_id(id: usize) -> Option<Self> {
    FromPrimitive::from_usize(id)
  }
}
